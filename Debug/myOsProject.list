
myOsProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  0800c7e0  0800c7e0  0001c7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d060  0800d060  000205a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d060  0800d060  0001d060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d068  0800d068  000205a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d068  0800d068  0001d068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d06c  0800d06c  0001d06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a0  20000000  0800d070  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e18c  200005a0  0800d610  000205a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000e72c  0800d610  0002e72c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c492  00000000  00000000  000205d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007690  00000000  00000000  0005ca62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002140  00000000  00000000  000640f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e20  00000000  00000000  00066238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c8c3  00000000  00000000  00068058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002683c  00000000  00000000  0009491b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3632  00000000  00000000  000bb157  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e789  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008de8  00000000  00000000  0018e804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005a0 	.word	0x200005a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7c8 	.word	0x0800c7c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005a4 	.word	0x200005a4
 80001cc:	0800c7c8 	.word	0x0800c7c8

080001d0 <port_int_disable>:
   .syntax unified


.type port_int_disable, %function
port_int_disable:
    CPSID   I
 80001d0:	b672      	cpsid	i
    BX      LR
 80001d2:	4770      	bx	lr

080001d4 <port_int_enable>:


.type port_int_enable, %function
port_int_enable:
    CPSIE   I
 80001d4:	b662      	cpsie	i
    BX      LR
 80001d6:	4770      	bx	lr

080001d8 <port_cpsr_save>:


.type port_cpsr_save, %function
port_cpsr_save:
    MRS     R0, PRIMASK
 80001d8:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   I
 80001dc:	b672      	cpsid	i
    BX      LR
 80001de:	4770      	bx	lr

080001e0 <port_cpsr_restore>:


.type port_cpsr_restore, %function
port_cpsr_restore:
    MSR     PRIMASK, R0
 80001e0:	f380 8810 	msr	PRIMASK, r0
    BX      LR
 80001e4:	4770      	bx	lr

080001e6 <port_clz>:


.type port_clz, %function
port_clz:
    CLZ     R0, R0
 80001e6:	fab0 f080 	clz	r0, r0
    BX      LR
 80001ea:	4770      	bx	lr

080001ec <port_sched_start>:


.thumb_func
.type port_sched_start, %function
port_sched_start:
    CPSID   I
 80001ec:	b672      	cpsid	i

    @ set pendsv priority lowest
    @ otherwise trigger pendsv in port_irq_context_switch will cause a context switch in irq
    @ that would be a disaster
    MOVW    R0, #:lower16:NVIC_SYSPRI14
 80001ee:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 80001f2:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 80001f6:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 80001fa:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 80001fe:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:SCB_VTOR
 8000200:	f64e 5008 	movw	r0, #60680	; 0xed08
    MOVT    R0, #:upper16:SCB_VTOR
 8000204:	f2ce 0000 	movt	r0, #57344	; 0xe000
    LDR     R0, [R0]
 8000208:	6800      	ldr	r0, [r0, #0]
    LDR     R0, [R0]
 800020a:	6800      	ldr	r0, [r0, #0]
    MSR     MSP, R0
 800020c:	f380 8808 	msr	MSP, r0

    MOVW    R0, #:lower16:k_curr_task
 8000210:	f240 6088 	movw	r0, #1672	; 0x688
    MOVT    R0, #:upper16:k_curr_task
 8000214:	f2c2 0000 	movt	r0, #8192	; 0x2000

    @ k_curr_task = k_next_task;
    MOVW    R1, #:lower16:k_next_task
 8000218:	f240 618c 	movw	r1, #1676	; 0x68c
    MOVT    R1, #:upper16:k_next_task
 800021c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000220:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000222:	6002      	str	r2, [r0, #0]

    @ sp = k_next_task->sp
    LDR     R0, [R2]
 8000224:	6810      	ldr	r0, [r2, #0]
    @ PSP = sp
    MSR     PSP, R0
 8000226:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 800022a:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 800022e:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000232:	f380 8814 	msr	CONTROL, r0

    ISB
 8000236:	f3bf 8f6f 	isb	sy

    @ restore r4-11 from new process stack
    LDMFD    SP!, {R4 - R11}
 800023a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

    #if (defined(__VFP_FP__) && !defined(__SOFTFP__))
    @ ignore EXC_RETURN the first switch
    LDMFD   SP!, {R0}
 800023e:	bc01      	pop	{r0}
    #endif

    @ restore r0, r3
    LDMFD    SP!, {R0 - R3}
 8000240:	bc0f      	pop	{r0, r1, r2, r3}
    @ load R12 and LR
    LDMFD    SP!, {R12, LR}    
 8000242:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    @ load PC and discard xPSR
    LDMFD    SP!, {R1, R2}
 8000246:	bc06      	pop	{r1, r2}

    CPSIE    I
 8000248:	b662      	cpsie	i
    BX       R1
 800024a:	4708      	bx	r1

0800024c <port_context_switch>:


.thumb_func
.type port_context_switch, %function
port_context_switch:
    LDR     R0, =NVIC_INT_CTRL
 800024c:	4817      	ldr	r0, [pc, #92]	; (80002ac <_context_restore+0x28>)
    LDR     R1, =NVIC_PENDSVSET
 800024e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000252:	6001      	str	r1, [r0, #0]
    BX      LR
 8000254:	4770      	bx	lr

08000256 <port_irq_context_switch>:


.thumb_func
.type port_irq_context_switch, %function
port_irq_context_switch:
    LDR     R0, =NVIC_INT_CTRL
 8000256:	4815      	ldr	r0, [pc, #84]	; (80002ac <_context_restore+0x28>)
    LDR     R1, =NVIC_PENDSVSET
 8000258:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 800025c:	6001      	str	r1, [r0, #0]
    BX      LR
 800025e:	4770      	bx	lr

08000260 <PendSV_Handler>:


.thumb_func
.type PendSV_Handler, %function
PendSV_Handler:
    CPSID   I
 8000260:	b672      	cpsid	i
    MRS     R0, PSP
 8000262:	f3ef 8009 	mrs	r0, PSP

08000266 <_context_save>:

_context_save:
    @ R0-R3, R12, LR, PC, xPSR is saved automatically here
    #if (defined(__VFP_FP__) && !defined(__SOFTFP__))
    @ is it extended frame?
    TST     LR, #0x10
 8000266:	f01e 0f10 	tst.w	lr, #16
    IT      EQ
 800026a:	bf08      	it	eq
    VSTMDBEQ  R0!, {S16 - S31}
 800026c:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    @ S0 - S16, FPSCR saved automatically here

    @ save EXC_RETURN
    STMFD   R0!, {LR}
 8000270:	f840 ed04 	str.w	lr, [r0, #-4]!
    #endif

    @ save remaining regs r4 - 11 on process stack
    STMFD   R0!, {R4 - R11}
 8000274:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    @ k_curr_task->sp = PSP;
    MOVW    R5, #:lower16:k_curr_task
 8000278:	f240 6588 	movw	r5, #1672	; 0x688
    MOVT    R5, #:upper16:k_curr_task
 800027c:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R6, [R5]
 8000280:	682e      	ldr	r6, [r5, #0]
    @ R0 is SP of process being switched out
    STR     R0, [R6]
 8000282:	6030      	str	r0, [r6, #0]

08000284 <_context_restore>:

_context_restore:
    @ k_curr_task = k_next_task;
    MOVW    R1, #:lower16:k_next_task
 8000284:	f240 618c 	movw	r1, #1676	; 0x68c
    MOVT    R1, #:upper16:k_next_task
 8000288:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 800028c:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 800028e:	602a      	str	r2, [r5, #0]

    @ R0 = k_next_task->sp
    LDR     R0, [R2]
 8000290:	6810      	ldr	r0, [r2, #0]

    @ restore R4 - R11
    LDMFD   R0!, {R4 - R11}
 8000292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    #if (defined(__VFP_FP__) && !defined(__SOFTFP__))
    @ restore EXC_RETURN
    LDMFD   R0!, {LR}
 8000296:	f850 eb04 	ldr.w	lr, [r0], #4
    @ is it extended frame?
    TST     LR, #0x10
 800029a:	f01e 0f10 	tst.w	lr, #16
    IT      EQ
 800029e:	bf08      	it	eq
    VLDMIAEQ    R0!, {S16 - S31}
 80002a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    #endif

    @ Load PSP with new process SP
    MSR     PSP, R0
 80002a4:	f380 8809 	msr	PSP, r0
    
    CPSIE   I
 80002a8:	b662      	cpsie	i

    @ R0-R3, R12, LR, PC, xPSR restored automatically here
    @ S0 - S16, FPSCR restored automatically here if FPCA = 1
    BX      LR
 80002aa:	4770      	bx	lr
    LDR     R0, =NVIC_INT_CTRL
 80002ac:	e000ed04 	.word	0xe000ed04

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b972 	b.w	800065c <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9e08      	ldr	r6, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	4688      	mov	r8, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	d14b      	bne.n	8000436 <__udivmoddi4+0xa6>
 800039e:	428a      	cmp	r2, r1
 80003a0:	4615      	mov	r5, r2
 80003a2:	d967      	bls.n	8000474 <__udivmoddi4+0xe4>
 80003a4:	fab2 f282 	clz	r2, r2
 80003a8:	b14a      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003aa:	f1c2 0720 	rsb	r7, r2, #32
 80003ae:	fa01 f302 	lsl.w	r3, r1, r2
 80003b2:	fa20 f707 	lsr.w	r7, r0, r7
 80003b6:	4095      	lsls	r5, r2
 80003b8:	ea47 0803 	orr.w	r8, r7, r3
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003c8:	fa1f fc85 	uxth.w	ip, r5
 80003cc:	fb0e 8817 	mls	r8, lr, r7, r8
 80003d0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d4:	fb07 f10c 	mul.w	r1, r7, ip
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18eb      	adds	r3, r5, r3
 80003de:	f107 30ff 	add.w	r0, r7, #4294967295
 80003e2:	f080 811b 	bcs.w	800061c <__udivmoddi4+0x28c>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8118 	bls.w	800061c <__udivmoddi4+0x28c>
 80003ec:	3f02      	subs	r7, #2
 80003ee:	442b      	add	r3, r5
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fc0c 	mul.w	ip, r0, ip
 8000404:	45a4      	cmp	ip, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	192c      	adds	r4, r5, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295
 800040e:	f080 8107 	bcs.w	8000620 <__udivmoddi4+0x290>
 8000412:	45a4      	cmp	ip, r4
 8000414:	f240 8104 	bls.w	8000620 <__udivmoddi4+0x290>
 8000418:	3802      	subs	r0, #2
 800041a:	442c      	add	r4, r5
 800041c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000420:	eba4 040c 	sub.w	r4, r4, ip
 8000424:	2700      	movs	r7, #0
 8000426:	b11e      	cbz	r6, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c6 4300 	strd	r4, r3, [r6]
 8000430:	4639      	mov	r1, r7
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0xbe>
 800043a:	2e00      	cmp	r6, #0
 800043c:	f000 80eb 	beq.w	8000616 <__udivmoddi4+0x286>
 8000440:	2700      	movs	r7, #0
 8000442:	e9c6 0100 	strd	r0, r1, [r6]
 8000446:	4638      	mov	r0, r7
 8000448:	4639      	mov	r1, r7
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f783 	clz	r7, r3
 8000452:	2f00      	cmp	r7, #0
 8000454:	d147      	bne.n	80004e6 <__udivmoddi4+0x156>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0xd0>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80fa 	bhi.w	8000654 <__udivmoddi4+0x2c4>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0303 	sbc.w	r3, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	4698      	mov	r8, r3
 800046a:	2e00      	cmp	r6, #0
 800046c:	d0e0      	beq.n	8000430 <__udivmoddi4+0xa0>
 800046e:	e9c6 4800 	strd	r4, r8, [r6]
 8000472:	e7dd      	b.n	8000430 <__udivmoddi4+0xa0>
 8000474:	b902      	cbnz	r2, 8000478 <__udivmoddi4+0xe8>
 8000476:	deff      	udf	#255	; 0xff
 8000478:	fab2 f282 	clz	r2, r2
 800047c:	2a00      	cmp	r2, #0
 800047e:	f040 808f 	bne.w	80005a0 <__udivmoddi4+0x210>
 8000482:	1b49      	subs	r1, r1, r5
 8000484:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000488:	fa1f f885 	uxth.w	r8, r5
 800048c:	2701      	movs	r7, #1
 800048e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000492:	0c23      	lsrs	r3, r4, #16
 8000494:	fb0e 111c 	mls	r1, lr, ip, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb08 f10c 	mul.w	r1, r8, ip
 80004a0:	4299      	cmp	r1, r3
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x124>
 80004a4:	18eb      	adds	r3, r5, r3
 80004a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x122>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	f200 80cd 	bhi.w	800064c <__udivmoddi4+0x2bc>
 80004b2:	4684      	mov	ip, r0
 80004b4:	1a59      	subs	r1, r3, r1
 80004b6:	b2a3      	uxth	r3, r4
 80004b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004bc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004c4:	fb08 f800 	mul.w	r8, r8, r0
 80004c8:	45a0      	cmp	r8, r4
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x14c>
 80004cc:	192c      	adds	r4, r5, r4
 80004ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x14a>
 80004d4:	45a0      	cmp	r8, r4
 80004d6:	f200 80b6 	bhi.w	8000646 <__udivmoddi4+0x2b6>
 80004da:	4618      	mov	r0, r3
 80004dc:	eba4 0408 	sub.w	r4, r4, r8
 80004e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004e4:	e79f      	b.n	8000426 <__udivmoddi4+0x96>
 80004e6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ea:	40bb      	lsls	r3, r7
 80004ec:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004f0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004f4:	fa01 f407 	lsl.w	r4, r1, r7
 80004f8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004fc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000500:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000504:	4325      	orrs	r5, r4
 8000506:	fbb3 f9f8 	udiv	r9, r3, r8
 800050a:	0c2c      	lsrs	r4, r5, #16
 800050c:	fb08 3319 	mls	r3, r8, r9, r3
 8000510:	fa1f fa8e 	uxth.w	sl, lr
 8000514:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000518:	fb09 f40a 	mul.w	r4, r9, sl
 800051c:	429c      	cmp	r4, r3
 800051e:	fa02 f207 	lsl.w	r2, r2, r7
 8000522:	fa00 f107 	lsl.w	r1, r0, r7
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b0>
 8000528:	eb1e 0303 	adds.w	r3, lr, r3
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	f080 8087 	bcs.w	8000642 <__udivmoddi4+0x2b2>
 8000534:	429c      	cmp	r4, r3
 8000536:	f240 8084 	bls.w	8000642 <__udivmoddi4+0x2b2>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4473      	add	r3, lr
 8000540:	1b1b      	subs	r3, r3, r4
 8000542:	b2ad      	uxth	r5, r5
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3310 	mls	r3, r8, r0, r3
 800054c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000550:	fb00 fa0a 	mul.w	sl, r0, sl
 8000554:	45a2      	cmp	sl, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1da>
 8000558:	eb1e 0404 	adds.w	r4, lr, r4
 800055c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000560:	d26b      	bcs.n	800063a <__udivmoddi4+0x2aa>
 8000562:	45a2      	cmp	sl, r4
 8000564:	d969      	bls.n	800063a <__udivmoddi4+0x2aa>
 8000566:	3802      	subs	r0, #2
 8000568:	4474      	add	r4, lr
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	eba4 040a 	sub.w	r4, r4, sl
 8000576:	454c      	cmp	r4, r9
 8000578:	46c2      	mov	sl, r8
 800057a:	464b      	mov	r3, r9
 800057c:	d354      	bcc.n	8000628 <__udivmoddi4+0x298>
 800057e:	d051      	beq.n	8000624 <__udivmoddi4+0x294>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d069      	beq.n	8000658 <__udivmoddi4+0x2c8>
 8000584:	ebb1 050a 	subs.w	r5, r1, sl
 8000588:	eb64 0403 	sbc.w	r4, r4, r3
 800058c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000590:	40fd      	lsrs	r5, r7
 8000592:	40fc      	lsrs	r4, r7
 8000594:	ea4c 0505 	orr.w	r5, ip, r5
 8000598:	e9c6 5400 	strd	r5, r4, [r6]
 800059c:	2700      	movs	r7, #0
 800059e:	e747      	b.n	8000430 <__udivmoddi4+0xa0>
 80005a0:	f1c2 0320 	rsb	r3, r2, #32
 80005a4:	fa20 f703 	lsr.w	r7, r0, r3
 80005a8:	4095      	lsls	r5, r2
 80005aa:	fa01 f002 	lsl.w	r0, r1, r2
 80005ae:	fa21 f303 	lsr.w	r3, r1, r3
 80005b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005b6:	4338      	orrs	r0, r7
 80005b8:	0c01      	lsrs	r1, r0, #16
 80005ba:	fbb3 f7fe 	udiv	r7, r3, lr
 80005be:	fa1f f885 	uxth.w	r8, r5
 80005c2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ca:	fb07 f308 	mul.w	r3, r7, r8
 80005ce:	428b      	cmp	r3, r1
 80005d0:	fa04 f402 	lsl.w	r4, r4, r2
 80005d4:	d907      	bls.n	80005e6 <__udivmoddi4+0x256>
 80005d6:	1869      	adds	r1, r5, r1
 80005d8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005dc:	d22f      	bcs.n	800063e <__udivmoddi4+0x2ae>
 80005de:	428b      	cmp	r3, r1
 80005e0:	d92d      	bls.n	800063e <__udivmoddi4+0x2ae>
 80005e2:	3f02      	subs	r7, #2
 80005e4:	4429      	add	r1, r5
 80005e6:	1acb      	subs	r3, r1, r3
 80005e8:	b281      	uxth	r1, r0
 80005ea:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ee:	fb0e 3310 	mls	r3, lr, r0, r3
 80005f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f6:	fb00 f308 	mul.w	r3, r0, r8
 80005fa:	428b      	cmp	r3, r1
 80005fc:	d907      	bls.n	800060e <__udivmoddi4+0x27e>
 80005fe:	1869      	adds	r1, r5, r1
 8000600:	f100 3cff 	add.w	ip, r0, #4294967295
 8000604:	d217      	bcs.n	8000636 <__udivmoddi4+0x2a6>
 8000606:	428b      	cmp	r3, r1
 8000608:	d915      	bls.n	8000636 <__udivmoddi4+0x2a6>
 800060a:	3802      	subs	r0, #2
 800060c:	4429      	add	r1, r5
 800060e:	1ac9      	subs	r1, r1, r3
 8000610:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000614:	e73b      	b.n	800048e <__udivmoddi4+0xfe>
 8000616:	4637      	mov	r7, r6
 8000618:	4630      	mov	r0, r6
 800061a:	e709      	b.n	8000430 <__udivmoddi4+0xa0>
 800061c:	4607      	mov	r7, r0
 800061e:	e6e7      	b.n	80003f0 <__udivmoddi4+0x60>
 8000620:	4618      	mov	r0, r3
 8000622:	e6fb      	b.n	800041c <__udivmoddi4+0x8c>
 8000624:	4541      	cmp	r1, r8
 8000626:	d2ab      	bcs.n	8000580 <__udivmoddi4+0x1f0>
 8000628:	ebb8 0a02 	subs.w	sl, r8, r2
 800062c:	eb69 020e 	sbc.w	r2, r9, lr
 8000630:	3801      	subs	r0, #1
 8000632:	4613      	mov	r3, r2
 8000634:	e7a4      	b.n	8000580 <__udivmoddi4+0x1f0>
 8000636:	4660      	mov	r0, ip
 8000638:	e7e9      	b.n	800060e <__udivmoddi4+0x27e>
 800063a:	4618      	mov	r0, r3
 800063c:	e795      	b.n	800056a <__udivmoddi4+0x1da>
 800063e:	4667      	mov	r7, ip
 8000640:	e7d1      	b.n	80005e6 <__udivmoddi4+0x256>
 8000642:	4681      	mov	r9, r0
 8000644:	e77c      	b.n	8000540 <__udivmoddi4+0x1b0>
 8000646:	3802      	subs	r0, #2
 8000648:	442c      	add	r4, r5
 800064a:	e747      	b.n	80004dc <__udivmoddi4+0x14c>
 800064c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000650:	442b      	add	r3, r5
 8000652:	e72f      	b.n	80004b4 <__udivmoddi4+0x124>
 8000654:	4638      	mov	r0, r7
 8000656:	e708      	b.n	800046a <__udivmoddi4+0xda>
 8000658:	4637      	mov	r7, r6
 800065a:	e6e9      	b.n	8000430 <__udivmoddi4+0xa0>

0800065c <__aeabi_idiv0>:
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <printHello>:

#define REC_TASK_STK_SIZE				512
void initTask(void const * pdata);
osThreadDef(initTask, osPriorityNormal, 1, REC_TASK_STK_SIZE);

static void printHello(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	//Print hello string
	iDebugPrint(DBG_LEV_INFO, "==============================\r\n");
 8000664:	4906      	ldr	r1, [pc, #24]	; (8000680 <printHello+0x20>)
 8000666:	2003      	movs	r0, #3
 8000668:	f004 fda8 	bl	80051bc <iDebugPrint>
	iDebugPrint(DBG_LEV_INFO, "         HELLO WORLD\r\n");
 800066c:	4905      	ldr	r1, [pc, #20]	; (8000684 <printHello+0x24>)
 800066e:	2003      	movs	r0, #3
 8000670:	f004 fda4 	bl	80051bc <iDebugPrint>
	iDebugPrint(DBG_LEV_INFO, "==============================\r\n");
 8000674:	4902      	ldr	r1, [pc, #8]	; (8000680 <printHello+0x20>)
 8000676:	2003      	movs	r0, #3
 8000678:	f004 fda0 	bl	80051bc <iDebugPrint>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	0800c7ec 	.word	0x0800c7ec
 8000684:	0800c810 	.word	0x0800c810

08000688 <poolInterfaceInit>:

static void poolInterfaceInit(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
	//Init tPool
	tPoolConfigDef tpoolCfg;
	tpoolCfg.Malloc = OsAbsMalloc;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <poolInterfaceInit+0x30>)
 8000690:	607b      	str	r3, [r7, #4]
	tpoolCfg.Free = OsAbsFree;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <poolInterfaceInit+0x34>)
 8000694:	60bb      	str	r3, [r7, #8]
	tpoolCfg.getSysTick = OsAbsTickGet;
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <poolInterfaceInit+0x38>)
 8000698:	60fb      	str	r3, [r7, #12]
	if (tPoolInit(&tpoolCfg) != TP_OK) {
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f004 feb7 	bl	8005410 <tPoolInit>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d003      	beq.n	80006b0 <poolInterfaceInit+0x28>
		//Error
		iDebugPrint(DBG_LEV_ERROR, "Pool initialize error\r\n");
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <poolInterfaceInit+0x3c>)
 80006aa:	2005      	movs	r0, #5
 80006ac:	f004 fd86 	bl	80051bc <iDebugPrint>
	}
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	080052bb 	.word	0x080052bb
 80006bc:	080052d3 	.word	0x080052d3
 80006c0:	080052ad 	.word	0x080052ad
 80006c4:	0800c828 	.word	0x0800c828

080006c8 <initTask>:

void initTask(void const * pdata) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	iDebugInit(); //初始化调试log打印接口
 80006d0:	f004 fd54 	bl	800517c <iDebugInit>
	printHello(); //打印hello world
 80006d4:	f7ff ffc4 	bl	8000660 <printHello>
	poolInterfaceInit(); //初始化池接口
 80006d8:	f7ff ffd6 	bl	8000688 <poolInterfaceInit>
	boardInit(); //板子初始化
 80006dc:	f000 f9c7 	bl	8000a6e <boardInit>
	IComInit();
 80006e0:	f004 fd2e 	bl	8005140 <IComInit>

	/*
	 * 创建工作任务
	 */
	fly_task_board_create();
 80006e4:	f000 f9fe 	bl	8000ae4 <fly_task_board_create>
	fly_task_net_create();
 80006e8:	f000 faf6 	bl	8000cd8 <fly_task_net_create>
#ifdef DEBUG
//	com_test_task_create();
#endif

	/*destroy current running thread */
	tos_task_destroy(osThreadGetId());
 80006ec:	f00a fee4 	bl	800b4b8 <osThreadGetId>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f009 f894 	bl	8009820 <tos_task_destroy>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <applicationEntry>:

/**
 * 用户程序入口
 */
void applicationEntry(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  	//先创建任务，才可以使用信号量等
	osThreadCreate(osThread(initTask), NULL);
 8000704:	2100      	movs	r1, #0
 8000706:	4802      	ldr	r0, [pc, #8]	; (8000710 <applicationEntry+0x10>)
 8000708:	f00a fea1 	bl	800b44e <osThreadCreate>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	0800cd9c 	.word	0x0800cd9c

08000714 <FindBoardGPIOsMapItem>:
		//I_GPIO_27
		{ .Port = GPIOC, .Pin = GPIO_PIN_3, .irqHandleId = EXTI3_IRQn, },
};

/******************************local方法**********************************/
static iBoardGPIOsDef* FindBoardGPIOsMapItem(iBoardIoEnumDef io) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	if (io > GPIO_MAX)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b26      	cmp	r3, #38	; 0x26
 8000722:	d901      	bls.n	8000728 <FindBoardGPIOsMapItem+0x14>
		return NULL;
 8000724:	2300      	movs	r3, #0
 8000726:	e006      	b.n	8000736 <FindBoardGPIOsMapItem+0x22>

	return &iBoardGPIOsMap[io];
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <FindBoardGPIOsMapItem+0x30>)
 8000734:	4413      	add	r3, r2
}
 8000736:	4618      	mov	r0, r3
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000000 	.word	0x20000000

08000748 <IsCurrentPortPinIRQ>:
	} else if (GPIOx == GPIOI) {
		__HAL_RCC_GPIOI_CLK_ENABLE();
	} 
}

static BOOL IsCurrentPortPinIRQ(GPIO_TypeDef *GPIOx, uint16_t iBoardPin) {
 8000748:	b480      	push	{r7}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	807b      	strh	r3, [r7, #2]
	BOOL result = False;
 8000754:	2300      	movs	r3, #0
 8000756:	75fb      	strb	r3, [r7, #23]
	uint32_t position = 0x00U;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
	uint32_t tmp = 0x00U;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]

	/* Get the current EXTI IO position */
	position = iBoardPin;
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	613b      	str	r3, [r7, #16]

	/* Get the SYSCFG external interrupt configuration registers*/
	tmp = SYSCFG->EXTICR[position >> 2U];
 8000764:	4a29      	ldr	r2, [pc, #164]	; (800080c <IsCurrentPortPinIRQ+0xc4>)
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	089b      	lsrs	r3, r3, #2
 800076a:	3302      	adds	r3, #2
 800076c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000770:	60fb      	str	r3, [r7, #12]
	tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	f003 0303 	and.w	r3, r3, #3
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	220f      	movs	r2, #15
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	4013      	ands	r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
	if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)))) {
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a21      	ldr	r2, [pc, #132]	; (8000810 <IsCurrentPortPinIRQ+0xc8>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d02b      	beq.n	80007e6 <IsCurrentPortPinIRQ+0x9e>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a20      	ldr	r2, [pc, #128]	; (8000814 <IsCurrentPortPinIRQ+0xcc>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d025      	beq.n	80007e2 <IsCurrentPortPinIRQ+0x9a>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a1f      	ldr	r2, [pc, #124]	; (8000818 <IsCurrentPortPinIRQ+0xd0>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d01f      	beq.n	80007de <IsCurrentPortPinIRQ+0x96>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <IsCurrentPortPinIRQ+0xd4>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d019      	beq.n	80007da <IsCurrentPortPinIRQ+0x92>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <IsCurrentPortPinIRQ+0xd8>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d013      	beq.n	80007d6 <IsCurrentPortPinIRQ+0x8e>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <IsCurrentPortPinIRQ+0xdc>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d00d      	beq.n	80007d2 <IsCurrentPortPinIRQ+0x8a>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <IsCurrentPortPinIRQ+0xe0>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d007      	beq.n	80007ce <IsCurrentPortPinIRQ+0x86>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a1a      	ldr	r2, [pc, #104]	; (800082c <IsCurrentPortPinIRQ+0xe4>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d101      	bne.n	80007ca <IsCurrentPortPinIRQ+0x82>
 80007c6:	2307      	movs	r3, #7
 80007c8:	e00e      	b.n	80007e8 <IsCurrentPortPinIRQ+0xa0>
 80007ca:	2308      	movs	r3, #8
 80007cc:	e00c      	b.n	80007e8 <IsCurrentPortPinIRQ+0xa0>
 80007ce:	2306      	movs	r3, #6
 80007d0:	e00a      	b.n	80007e8 <IsCurrentPortPinIRQ+0xa0>
 80007d2:	2305      	movs	r3, #5
 80007d4:	e008      	b.n	80007e8 <IsCurrentPortPinIRQ+0xa0>
 80007d6:	2304      	movs	r3, #4
 80007d8:	e006      	b.n	80007e8 <IsCurrentPortPinIRQ+0xa0>
 80007da:	2303      	movs	r3, #3
 80007dc:	e004      	b.n	80007e8 <IsCurrentPortPinIRQ+0xa0>
 80007de:	2302      	movs	r3, #2
 80007e0:	e002      	b.n	80007e8 <IsCurrentPortPinIRQ+0xa0>
 80007e2:	2301      	movs	r3, #1
 80007e4:	e000      	b.n	80007e8 <IsCurrentPortPinIRQ+0xa0>
 80007e6:	2300      	movs	r3, #0
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	f002 0203 	and.w	r2, r2, #3
 80007ee:	0092      	lsls	r2, r2, #2
 80007f0:	4093      	lsls	r3, r2
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d101      	bne.n	80007fe <IsCurrentPortPinIRQ+0xb6>
		result = True;
 80007fa:	2301      	movs	r3, #1
 80007fc:	75fb      	strb	r3, [r7, #23]
	}

	return result;
 80007fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000800:	4618      	mov	r0, r3
 8000802:	371c      	adds	r7, #28
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40013800 	.word	0x40013800
 8000810:	40020000 	.word	0x40020000
 8000814:	40020400 	.word	0x40020400
 8000818:	40020800 	.word	0x40020800
 800081c:	40020c00 	.word	0x40020c00
 8000820:	40021000 	.word	0x40021000
 8000824:	40021400 	.word	0x40021400
 8000828:	40021800 	.word	0x40021800
 800082c:	40021c00 	.word	0x40021c00

08000830 <DoExtiIrqHandler>:

static void DoExtiIrqHandler(uint16_t extiPin) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	80fb      	strh	r3, [r7, #6]
	uint8_t id;

	//遍历查找匹配的PIN
	for (id = 0; id < ARRY_LEN(iBoardGPIOsMap, iBoardGPIOsDef); id++) {
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e04c      	b.n	80008da <DoExtiIrqHandler+0xaa>
		//找到对应的PIN
		if (iBoardGPIOsMap[id].Pin == extiPin) {
 8000840:	7bfa      	ldrb	r2, [r7, #15]
 8000842:	4929      	ldr	r1, [pc, #164]	; (80008e8 <DoExtiIrqHandler+0xb8>)
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	3304      	adds	r3, #4
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	429a      	cmp	r2, r3
 8000856:	d13d      	bne.n	80008d4 <DoExtiIrqHandler+0xa4>
			//是否是配置的PORT
			if (IsCurrentPortPinIRQ((GPIO_TypeDef*) iBoardGPIOsMap[id].Port,
 8000858:	7bfa      	ldrb	r2, [r7, #15]
 800085a:	4923      	ldr	r1, [pc, #140]	; (80008e8 <DoExtiIrqHandler+0xb8>)
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	440b      	add	r3, r1
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	7bfa      	ldrb	r2, [r7, #15]
 800086a:	491f      	ldr	r1, [pc, #124]	; (80008e8 <DoExtiIrqHandler+0xb8>)
 800086c:	4613      	mov	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	4413      	add	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	440b      	add	r3, r1
 8000876:	3304      	adds	r3, #4
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	4619      	mov	r1, r3
 800087c:	f7ff ff64 	bl	8000748 <IsCurrentPortPinIRQ>
 8000880:	4603      	mov	r3, r0
 8000882:	2b01      	cmp	r3, #1
 8000884:	d126      	bne.n	80008d4 <DoExtiIrqHandler+0xa4>
					iBoardGPIOsMap[id].Pin) == True) {
				/* EXTI line interrupt detected */
				if (__HAL_GPIO_EXTI_GET_IT(extiPin) != RESET) {
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <DoExtiIrqHandler+0xbc>)
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	4013      	ands	r3, r2
 800088e:	2b00      	cmp	r3, #0
 8000890:	d020      	beq.n	80008d4 <DoExtiIrqHandler+0xa4>
					//清中断
					__HAL_GPIO_EXTI_CLEAR_IT(extiPin);
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <DoExtiIrqHandler+0xbc>)
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	6153      	str	r3, [r2, #20]

					//中断回调函数
					if (iBoardGPIOsMap[id].callBack != NULL) {
 8000898:	7bfa      	ldrb	r2, [r7, #15]
 800089a:	4913      	ldr	r1, [pc, #76]	; (80008e8 <DoExtiIrqHandler+0xb8>)
 800089c:	4613      	mov	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	440b      	add	r3, r1
 80008a6:	3308      	adds	r3, #8
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d012      	beq.n	80008d4 <DoExtiIrqHandler+0xa4>
						uint8_t state;

						state = boardGpioInputGet((iBoardIoEnumDef) id);
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f8b9 	bl	8000a28 <boardGpioInputGet>
 80008b6:	4603      	mov	r3, r0
 80008b8:	73bb      	strb	r3, [r7, #14]
						iBoardGPIOsMap[id].callBack((iBoardIoEnumDef) id,
 80008ba:	7bfa      	ldrb	r2, [r7, #15]
 80008bc:	490a      	ldr	r1, [pc, #40]	; (80008e8 <DoExtiIrqHandler+0xb8>)
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	440b      	add	r3, r1
 80008c8:	3308      	adds	r3, #8
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	7bb9      	ldrb	r1, [r7, #14]
 80008ce:	7bfa      	ldrb	r2, [r7, #15]
 80008d0:	4610      	mov	r0, r2
 80008d2:	4798      	blx	r3
	for (id = 0; id < ARRY_LEN(iBoardGPIOsMap, iBoardGPIOsDef); id++) {
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	3301      	adds	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2b25      	cmp	r3, #37	; 0x25
 80008de:	d9af      	bls.n	8000840 <DoExtiIrqHandler+0x10>
				}
			}
		}
	}

}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000000 	.word	0x20000000
 80008ec:	40013c00 	.word	0x40013c00

080008f0 <EXTI0_IRQHandler>:

/******************************IRQHandler方法**********************************/
void EXTI0_IRQHandler(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	DoExtiIrqHandler(GPIO_PIN_0);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f7ff ff9b 	bl	8000830 <DoExtiIrqHandler>
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}

080008fe <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
	DoExtiIrqHandler(GPIO_PIN_1);
 8000902:	2002      	movs	r0, #2
 8000904:	f7ff ff94 	bl	8000830 <DoExtiIrqHandler>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	DoExtiIrqHandler(GPIO_PIN_2);
 8000910:	2004      	movs	r0, #4
 8000912:	f7ff ff8d 	bl	8000830 <DoExtiIrqHandler>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
	DoExtiIrqHandler(GPIO_PIN_3);
 800091e:	2008      	movs	r0, #8
 8000920:	f7ff ff86 	bl	8000830 <DoExtiIrqHandler>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	DoExtiIrqHandler(GPIO_PIN_4);
 800092c:	2010      	movs	r0, #16
 800092e:	f7ff ff7f 	bl	8000830 <DoExtiIrqHandler>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET) {
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <EXTI9_5_IRQHandler+0x68>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <EXTI9_5_IRQHandler+0x16>
		DoExtiIrqHandler(GPIO_PIN_5);
 8000948:	2020      	movs	r0, #32
 800094a:	f7ff ff71 	bl	8000830 <DoExtiIrqHandler>
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET) {
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <EXTI9_5_IRQHandler+0x68>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000956:	2b00      	cmp	r3, #0
 8000958:	d002      	beq.n	8000960 <EXTI9_5_IRQHandler+0x28>
		DoExtiIrqHandler(GPIO_PIN_6);
 800095a:	2040      	movs	r0, #64	; 0x40
 800095c:	f7ff ff68 	bl	8000830 <DoExtiIrqHandler>
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) {
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <EXTI9_5_IRQHandler+0x68>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <EXTI9_5_IRQHandler+0x3a>
		DoExtiIrqHandler(GPIO_PIN_7);
 800096c:	2080      	movs	r0, #128	; 0x80
 800096e:	f7ff ff5f 	bl	8000830 <DoExtiIrqHandler>
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) {
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <EXTI9_5_IRQHandler+0x68>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <EXTI9_5_IRQHandler+0x4e>
		DoExtiIrqHandler(GPIO_PIN_8);
 800097e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000982:	f7ff ff55 	bl	8000830 <DoExtiIrqHandler>
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) {
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <EXTI9_5_IRQHandler+0x68>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800098e:	2b00      	cmp	r3, #0
 8000990:	d003      	beq.n	800099a <EXTI9_5_IRQHandler+0x62>
		DoExtiIrqHandler(GPIO_PIN_9);
 8000992:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000996:	f7ff ff4b 	bl	8000830 <DoExtiIrqHandler>
	}
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40013c00 	.word	0x40013c00

080009a4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) {
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <EXTI15_10_IRQHandler+0x80>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d003      	beq.n	80009bc <EXTI15_10_IRQHandler+0x18>
		DoExtiIrqHandler(GPIO_PIN_10);
 80009b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009b8:	f7ff ff3a 	bl	8000830 <DoExtiIrqHandler>
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) {
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <EXTI15_10_IRQHandler+0x80>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <EXTI15_10_IRQHandler+0x2c>
		DoExtiIrqHandler(GPIO_PIN_11);
 80009c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80009cc:	f7ff ff30 	bl	8000830 <DoExtiIrqHandler>
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) {
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <EXTI15_10_IRQHandler+0x80>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <EXTI15_10_IRQHandler+0x40>
		DoExtiIrqHandler(GPIO_PIN_12);
 80009dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009e0:	f7ff ff26 	bl	8000830 <DoExtiIrqHandler>
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <EXTI15_10_IRQHandler+0x80>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d003      	beq.n	80009f8 <EXTI15_10_IRQHandler+0x54>
		DoExtiIrqHandler(GPIO_PIN_13);
 80009f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009f4:	f7ff ff1c 	bl	8000830 <DoExtiIrqHandler>
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) {
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <EXTI15_10_IRQHandler+0x80>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <EXTI15_10_IRQHandler+0x68>
		DoExtiIrqHandler(GPIO_PIN_14);
 8000a04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a08:	f7ff ff12 	bl	8000830 <DoExtiIrqHandler>
	}
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) {
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <EXTI15_10_IRQHandler+0x80>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <EXTI15_10_IRQHandler+0x7c>
		DoExtiIrqHandler(GPIO_PIN_15);
 8000a18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a1c:	f7ff ff08 	bl	8000830 <DoExtiIrqHandler>
	}
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40013c00 	.word	0x40013c00

08000a28 <boardGpioInputGet>:
		HAL_GPIO_WritePin((GPIO_TypeDef*) pIO->Port, pIO->Pin,
				(GPIO_PinState) state);
	}
}

uint8 boardGpioInputGet(iBoardIoEnumDef io) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	uint8 res = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	73fb      	strb	r3, [r7, #15]
	if (io > GPIO_MAX)
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b26      	cmp	r3, #38	; 0x26
 8000a3a:	d901      	bls.n	8000a40 <boardGpioInputGet+0x18>
		return 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e012      	b.n	8000a66 <boardGpioInputGet+0x3e>

	iBoardGPIOsDef *pIO = FindBoardGPIOsMapItem(io);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe66 	bl	8000714 <FindBoardGPIOsMapItem>
 8000a48:	60b8      	str	r0, [r7, #8]

	if (pIO) {
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d009      	beq.n	8000a64 <boardGpioInputGet+0x3c>
		res = HAL_GPIO_ReadPin((GPIO_TypeDef*) pIO->Port, pIO->Pin);
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	889b      	ldrh	r3, [r3, #4]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	f001 fdb8 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000a60:	4603      	mov	r3, r0
 8000a62:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <boardInit>:

void boardInit(void) {
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <parseServerCmd>:
//这个size需要注意，如果太小，会导致执行频繁，而其它任务被饿死
#define TEST_TASK_STK_SIZE				512
static void test_task(void const *pdata);
osThreadDef(test_task, osPriorityNormal, 1, TEST_TASK_STK_SIZE);

void parseServerCmd(uint8_t *data_ptr, uint32_t length){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	if (!data_ptr)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d014      	beq.n	8000ab6 <parseServerCmd+0x3a>
		return;

	uint8_t cmd = data_ptr[0];
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	73fb      	strb	r3, [r7, #15]

	if (cmd == '0') {
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	2b30      	cmp	r3, #48	; 0x30
 8000a96:	d105      	bne.n	8000aa4 <parseServerCmd+0x28>
		HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin, LED_OFF);//关灯
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <parseServerCmd+0x44>)
 8000a9e:	f001 fdaf 	bl	8002600 <HAL_GPIO_WritePin>
 8000aa2:	e009      	b.n	8000ab8 <parseServerCmd+0x3c>
	} else
	if (cmd == '1'){
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	2b31      	cmp	r3, #49	; 0x31
 8000aa8:	d106      	bne.n	8000ab8 <parseServerCmd+0x3c>
		HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin, LED_ON);//开灯
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <parseServerCmd+0x44>)
 8000ab0:	f001 fda6 	bl	8002600 <HAL_GPIO_WritePin>
 8000ab4:	e000      	b.n	8000ab8 <parseServerCmd+0x3c>
		return;
 8000ab6:	bf00      	nop
	}
}
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <test_task>:

static void test_task(void const *arg) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

	while(1){
		OsAbsSleep(500);
 8000acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad0:	f004 fc8c 	bl	80053ec <OsAbsSleep>
		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <test_task+0x1c>)
 8000ad8:	f001 fdab 	bl	8002632 <HAL_GPIO_TogglePin>
		OsAbsSleep(500);
 8000adc:	e7f6      	b.n	8000acc <test_task+0x8>
 8000ade:	bf00      	nop
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <fly_task_board_create>:
	}
}


void fly_task_board_create(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	iDebugPrint(DBG_LEV_INFO, "board task create\r\n");
 8000ae8:	4904      	ldr	r1, [pc, #16]	; (8000afc <fly_task_board_create+0x18>)
 8000aea:	2003      	movs	r0, #3
 8000aec:	f004 fb66 	bl	80051bc <iDebugPrint>
	osThreadCreate(osThread(test_task), NULL);
 8000af0:	2100      	movs	r1, #0
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <fly_task_board_create+0x1c>)
 8000af4:	f00a fcab 	bl	800b44e <osThreadCreate>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	0800c84c 	.word	0x0800c84c
 8000b00:	0800cdbc 	.word	0x0800cdbc

08000b04 <espcom_rec_callback>:
uint8_t recv_data_0[RECV_LEN];

/*
 * 消息接收回调
 */
static void espcom_rec_callback(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	if (net_connected != -1) {
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <espcom_rec_callback+0x18>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b10:	d002      	beq.n	8000b18 <espcom_rec_callback+0x14>
		tos_sem_post(&sem_rec);
 8000b12:	4803      	ldr	r0, [pc, #12]	; (8000b20 <espcom_rec_callback+0x1c>)
 8000b14:	f008 f87e 	bl	8008c14 <tos_sem_post>
	}
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001cc 	.word	0x200001cc
 8000b20:	200005bc 	.word	0x200005bc

08000b24 <res_init>:

/*
 * 资源初始化
 */
static void res_init(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	if (K_ERR_NONE != tos_sem_create(&sem_rec, 0)) {
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <res_init+0x20>)
 8000b2c:	f007 ffd5 	bl	8008ada <tos_sem_create>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <res_init+0x1a>
		iDebugPrint(DBG_LEV_ERROR, "sem_rec create error\r\n");
 8000b36:	4904      	ldr	r1, [pc, #16]	; (8000b48 <res_init+0x24>)
 8000b38:	2005      	movs	r0, #5
 8000b3a:	f004 fb3f 	bl	80051bc <iDebugPrint>
	}
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200005bc 	.word	0x200005bc
 8000b48:	0800c87c 	.word	0x0800c87c

08000b4c <tcp_test0>:

void tcp_test0(void)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
	int recv_len = -1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	607b      	str	r3, [r7, #4]
	k_err_t err;

	while (1) {
		err = tos_sem_pend(&sem_rec, tos_millisec2tick(1*1000));
 8000b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5c:	f009 f9e0 	bl	8009f20 <tos_millisec2tick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	460c      	mov	r4, r1
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	481c      	ldr	r0, [pc, #112]	; (8000bdc <tcp_test0+0x90>)
 8000b6a:	f008 f861 	bl	8008c30 <tos_sem_pend>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	807b      	strh	r3, [r7, #2]
		if (err != K_ERR_NONE) {
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d005      	beq.n	8000b84 <tcp_test0+0x38>
			iDebugPrint(DBG_LEV_WARN, "net_rec may be error :%d\r\n", err);
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4918      	ldr	r1, [pc, #96]	; (8000be0 <tcp_test0+0x94>)
 8000b7e:	2004      	movs	r0, #4
 8000b80:	f004 fb1c 	bl	80051bc <iDebugPrint>
			//continue;
		}

		recv_len = tos_sal_module_recv_timeout(socket_id_0, recv_data_0, sizeof(recv_data_0), 8000);
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <tcp_test0+0x98>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b90:	4915      	ldr	r1, [pc, #84]	; (8000be8 <tcp_test0+0x9c>)
 8000b92:	f00a fbe1 	bl	800b358 <tos_sal_module_recv_timeout>
 8000b96:	6078      	str	r0, [r7, #4]
		if (recv_len < 0) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da04      	bge.n	8000ba8 <tcp_test0+0x5c>
			printf("task0 receive error\n");
 8000b9e:	4913      	ldr	r1, [pc, #76]	; (8000bec <tcp_test0+0xa0>)
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f004 fb0b 	bl	80051bc <iDebugPrint>
 8000ba6:	e7d7      	b.n	8000b58 <tcp_test0+0xc>
		} else if (recv_len == 0) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d104      	bne.n	8000bb8 <tcp_test0+0x6c>
			printf("task0 receive none\n");
 8000bae:	4910      	ldr	r1, [pc, #64]	; (8000bf0 <tcp_test0+0xa4>)
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f004 fb03 	bl	80051bc <iDebugPrint>
 8000bb6:	e7cf      	b.n	8000b58 <tcp_test0+0xc>
		} else {
			recv_data_0[recv_len] = 0;
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <tcp_test0+0x9c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
			printf("task0: receive len: %d\nmsg from remote: %s\n", recv_len, recv_data_0);
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <tcp_test0+0x9c>)
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	490b      	ldr	r1, [pc, #44]	; (8000bf4 <tcp_test0+0xa8>)
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f004 faf7 	bl	80051bc <iDebugPrint>

			parseServerCmd(recv_data_0, recv_len);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <tcp_test0+0x9c>)
 8000bd4:	f7ff ff52 	bl	8000a7c <parseServerCmd>
		err = tos_sem_pend(&sem_rec, tos_millisec2tick(1*1000));
 8000bd8:	e7be      	b.n	8000b58 <tcp_test0+0xc>
 8000bda:	bf00      	nop
 8000bdc:	200005bc 	.word	0x200005bc
 8000be0:	0800c894 	.word	0x0800c894
 8000be4:	200001c8 	.word	0x200001c8
 8000be8:	20002bc8 	.word	0x20002bc8
 8000bec:	0800c8b0 	.word	0x0800c8b0
 8000bf0:	0800c8c8 	.word	0x0800c8c8
 8000bf4:	0800c8dc 	.word	0x0800c8dc

08000bf8 <net_main_task>:

	}
}

uint8_t send_buff[] = "GET http://oldsix.top/myServer/server?temperature=234\r\n";
static void net_main_task(void const *arg) {
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	int err_count = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]

	esp8266_sal_init(HAL_UART_PORT_2);
 8000c04:	2002      	movs	r0, #2
 8000c06:	f005 fe2f 	bl	8006868 <esp8266_sal_init>
	esp8266_rec_callback_regist(espcom_rec_callback);
 8000c0a:	4828      	ldr	r0, [pc, #160]	; (8000cac <net_main_task+0xb4>)
 8000c0c:	f005 fe68 	bl	80068e0 <esp8266_rec_callback_regist>
    esp8266_join_ap("HW", "00000000");
 8000c10:	4927      	ldr	r1, [pc, #156]	; (8000cb0 <net_main_task+0xb8>)
 8000c12:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <net_main_task+0xbc>)
 8000c14:	f005 fb2c 	bl	8006270 <esp8266_join_ap>
	
	socket_id_0 = tos_sal_module_connect("111.67.205.50", "80", TOS_SAL_PROTO_TCP);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4927      	ldr	r1, [pc, #156]	; (8000cb8 <net_main_task+0xc0>)
 8000c1c:	4827      	ldr	r0, [pc, #156]	; (8000cbc <net_main_task+0xc4>)
 8000c1e:	f00a fb59 	bl	800b2d4 <tos_sal_module_connect>
 8000c22:	4602      	mov	r2, r0
 8000c24:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <net_main_task+0xc8>)
 8000c26:	601a      	str	r2, [r3, #0]
    if (socket_id_0 == -1) {
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <net_main_task+0xc8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d108      	bne.n	8000c44 <net_main_task+0x4c>
        printf("TCP0 connect failed\r\n");
 8000c32:	4924      	ldr	r1, [pc, #144]	; (8000cc4 <net_main_task+0xcc>)
 8000c34:	2001      	movs	r0, #1
 8000c36:	f004 fac1 	bl	80051bc <iDebugPrint>
        net_connected = -1;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <net_main_task+0xd0>)
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	e009      	b.n	8000c58 <net_main_task+0x60>
    } else {
        printf("TCP0 connect success! fd: %d\n", socket_id_0);
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <net_main_task+0xc8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4920      	ldr	r1, [pc, #128]	; (8000ccc <net_main_task+0xd4>)
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f004 fab5 	bl	80051bc <iDebugPrint>
        net_connected = 0;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <net_main_task+0xd0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
    }

	while(1){
		tos_sleep_ms(2000);
 8000c58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c5c:	f009 f99d 	bl	8009f9a <tos_sleep_ms>
		if(net_connected != -1){
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <net_main_task+0xd0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c68:	d01b      	beq.n	8000ca2 <net_main_task+0xaa>
			//建立连接成功，开始发送数据
			net_connected = tos_sal_module_send(socket_id_0, send_buff, strlen((const char *)send_buff));
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <net_main_task+0xc8>)
 8000c6c:	681c      	ldr	r4, [r3, #0]
 8000c6e:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <net_main_task+0xd8>)
 8000c70:	f7ff fb1e 	bl	80002b0 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4915      	ldr	r1, [pc, #84]	; (8000cd0 <net_main_task+0xd8>)
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	f00a fb4c 	bl	800b318 <tos_sal_module_send>
 8000c80:	4602      	mov	r2, r0
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <net_main_task+0xd0>)
 8000c84:	601a      	str	r2, [r3, #0]

			if(net_connected == -1) {
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <net_main_task+0xd0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8e:	d108      	bne.n	8000ca2 <net_main_task+0xaa>
				//连接失败，断开重连
				tos_sal_module_close(socket_id_0);
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <net_main_task+0xc8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f00a fb81 	bl	800b39c <tos_sal_module_close>
				iDebugPrint(DBG_LEV_ERROR, "net try to force restart\r\n");
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <net_main_task+0xdc>)
 8000c9c:	2005      	movs	r0, #5
 8000c9e:	f004 fa8d 	bl	80051bc <iDebugPrint>
				//重新初始化
				//...
			}
		}

		tos_sleep_ms(5000);
 8000ca2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ca6:	f009 f978 	bl	8009f9a <tos_sleep_ms>
		tos_sleep_ms(2000);
 8000caa:	e7d5      	b.n	8000c58 <net_main_task+0x60>
 8000cac:	08000b05 	.word	0x08000b05
 8000cb0:	0800c908 	.word	0x0800c908
 8000cb4:	0800c914 	.word	0x0800c914
 8000cb8:	0800c918 	.word	0x0800c918
 8000cbc:	0800c91c 	.word	0x0800c91c
 8000cc0:	200001c8 	.word	0x200001c8
 8000cc4:	0800c92c 	.word	0x0800c92c
 8000cc8:	200001cc 	.word	0x200001cc
 8000ccc:	0800c944 	.word	0x0800c944
 8000cd0:	200001d0 	.word	0x200001d0
 8000cd4:	0800c964 	.word	0x0800c964

08000cd8 <fly_task_net_create>:
	}
}


void fly_task_net_create(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	iDebugPrint(DBG_LEV_INFO, "net task create\r\n");
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <fly_task_net_create+0x24>)
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f004 fa6c 	bl	80051bc <iDebugPrint>
	res_init();
 8000ce4:	f7ff ff1e 	bl	8000b24 <res_init>
	osThreadCreate(osThread(net_main_task), NULL);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <fly_task_net_create+0x28>)
 8000cec:	f00a fbaf 	bl	800b44e <osThreadCreate>
	osThreadCreate(osThread(tcp_test0), NULL);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4804      	ldr	r0, [pc, #16]	; (8000d04 <fly_task_net_create+0x2c>)
 8000cf4:	f00a fbab 	bl	800b44e <osThreadCreate>
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	0800c980 	.word	0x0800c980
 8000d00:	0800cddc 	.word	0x0800cddc
 8000d04:	0800cdfc 	.word	0x0800cdfc

08000d08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	; 0x30
 8000d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	4b4e      	ldr	r3, [pc, #312]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a4d      	ldr	r2, [pc, #308]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	4b47      	ldr	r3, [pc, #284]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a46      	ldr	r2, [pc, #280]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b44      	ldr	r3, [pc, #272]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a3f      	ldr	r2, [pc, #252]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b3d      	ldr	r3, [pc, #244]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a38      	ldr	r2, [pc, #224]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d7c:	f043 0320 	orr.w	r3, r3, #32
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a2a      	ldr	r2, [pc, #168]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <MX_GPIO_Init+0x154>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4825      	ldr	r0, [pc, #148]	; (8000e60 <MX_GPIO_Init+0x158>)
 8000dcc:	f001 fc18 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	4823      	ldr	r0, [pc, #140]	; (8000e64 <MX_GPIO_Init+0x15c>)
 8000dd6:	f001 fc13 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <MX_GPIO_Init+0x158>)
 8000df2:	f001 f959 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4817      	ldr	r0, [pc, #92]	; (8000e68 <MX_GPIO_Init+0x160>)
 8000e0a:	f001 f94d 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8000e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_GPIO_Init+0x164>)
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_GPIO_Init+0x168>)
 8000e24:	f001 f940 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4809      	ldr	r0, [pc, #36]	; (8000e64 <MX_GPIO_Init+0x15c>)
 8000e40:	f001 f932 	bl	80020a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2028      	movs	r0, #40	; 0x28
 8000e4a:	f000 fd65 	bl	8001918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e4e:	2028      	movs	r0, #40	; 0x28
 8000e50:	f000 fd7e 	bl	8001950 <HAL_NVIC_EnableIRQ>

}
 8000e54:	bf00      	nop
 8000e56:	3730      	adds	r7, #48	; 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	10110000 	.word	0x10110000
 8000e70:	40021400 	.word	0x40021400

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e78:	f000 fc32 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7c:	f000 f810 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e80:	f7ff ff42 	bl	8000d08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e84:	f000 fa3e 	bl	8001304 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e88:	f000 fa12 	bl	80012b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e8c:	f000 fa64 	bl	8001358 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	osKernelInitialize(); //TOS Tiny kernel initialize
 8000e90:	f00a fad2 	bl	800b438 <osKernelInitialize>
	applicationEntry();
 8000e94:	f7ff fc34 	bl	8000700 <applicationEntry>
	osKernelStart(); //Start TOS Tiny
 8000e98:	f00a fac3 	bl	800b422 <osKernelStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <main+0x28>
	...

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	; 0x50
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	2230      	movs	r2, #48	; 0x30
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f00a fb43 	bl	800b53a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <SystemClock_Config+0xcc>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4a27      	ldr	r2, [pc, #156]	; (8000f6c <SystemClock_Config+0xcc>)
 8000ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <SystemClock_Config+0xcc>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <SystemClock_Config+0xd0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <SystemClock_Config+0xd0>)
 8000eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <SystemClock_Config+0xd0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f00:	2301      	movs	r3, #1
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f04:	2310      	movs	r3, #16
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f10:	2308      	movs	r3, #8
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f14:	23a8      	movs	r3, #168	; 0xa8
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f20:	f107 0320 	add.w	r3, r7, #32
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fbbb 	bl	80026a0 <HAL_RCC_OscConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f30:	f000 f832 	bl	8000f98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f34:	230f      	movs	r3, #15
 8000f36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2105      	movs	r1, #5
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fe14 	bl	8002b80 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f5e:	f000 f81b 	bl	8000f98 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	; 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000

08000f74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f86:	f000 fbcd 	bl	8001724 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010000 	.word	0x40010000

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	2019      	movs	r0, #25
 800100e:	f000 fc83 	bl	8001918 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001012:	2019      	movs	r0, #25
 8001014:	f000 fc9c 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <HAL_InitTick+0xa4>)
 800101e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001020:	4a1e      	ldr	r2, [pc, #120]	; (800109c <HAL_InitTick+0xa4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6453      	str	r3, [r2, #68]	; 0x44
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <HAL_InitTick+0xa4>)
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001034:	f107 0210 	add.w	r2, r7, #16
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f001 ff6a 	bl	8002f18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001044:	f001 ff54 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8001048:	4603      	mov	r3, r0
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001050:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <HAL_InitTick+0xa8>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	0c9b      	lsrs	r3, r3, #18
 8001058:	3b01      	subs	r3, #1
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_InitTick+0xac>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <HAL_InitTick+0xb0>)
 8001060:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_InitTick+0xac>)
 8001064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001068:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800106a:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <HAL_InitTick+0xac>)
 800106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_InitTick+0xac>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_InitTick+0xac>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <HAL_InitTick+0xac>)
 800107e:	f001 ff7d 	bl	8002f7c <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d104      	bne.n	8001092 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001088:	4806      	ldr	r0, [pc, #24]	; (80010a4 <HAL_InitTick+0xac>)
 800108a:	f001 ffac 	bl	8002fe6 <HAL_TIM_Base_Start_IT>
 800108e:	4603      	mov	r3, r0
 8001090:	e000      	b.n	8001094 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3730      	adds	r7, #48	; 0x30
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	431bde83 	.word	0x431bde83
 80010a4:	20003050 	.word	0x20003050
 80010a8:	40010000 	.word	0x40010000

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	iDebugPrint(DBG_LEV_ERROR, "System HardFault!\r\n");
 80010c0:	4902      	ldr	r1, [pc, #8]	; (80010cc <HardFault_Handler+0x10>)
 80010c2:	2005      	movs	r0, #5
 80010c4:	f004 f87a 	bl	80051bc <iDebugPrint>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <HardFault_Handler+0xc>
 80010ca:	bf00      	nop
 80010cc:	0800c994 	.word	0x0800c994

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f000 fb0f 	bl	8001724 <HAL_IncTick>
  if(tos_knl_is_running())
 8001106:	f008 f833 	bl	8009170 <tos_knl_is_running>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d005      	beq.n	800111c <SysTick_Handler+0x1e>
  {
      tos_knl_irq_enter();
 8001110:	f007 ff30 	bl	8008f74 <tos_knl_irq_enter>
      tos_tick_handler();
 8001114:	f008 feca 	bl	8009eac <tos_tick_handler>
      tos_knl_irq_leave();
 8001118:	f007 ff4a 	bl	8008fb0 <tos_knl_irq_leave>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001126:	f001 ff82 	bl	800302e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20003050 	.word	0x20003050

08001134 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <USART1_IRQHandler+0x10>)
 800113a:	f002 fb75 	bl	8003828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200030d0 	.word	0x200030d0

08001148 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <USART2_IRQHandler+0x10>)
 800114e:	f002 fb6b 	bl	8003828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20003150 	.word	0x20003150

0800115c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <USART3_IRQHandler+0x10>)
 8001162:	f002 fb61 	bl	8003828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20003090 	.word	0x20003090

08001170 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <USART6_IRQHandler+0x10>)
 8001176:	f002 fb57 	bl	8003828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20003110 	.word	0x20003110

08001184 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	IComUartRxCallbackIrq(huart);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f003 fb79 	bl	8004884 <IComUartRxCallbackIrq>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
	IComUartErrorCallbackIrq(huart);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f003 faea 	bl	800477c <IComUartErrorCallbackIrq>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	IComDriverXferDoneCallbackIrq(huart);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f003 faaf 	bl	800471c <IComDriverXferDoneCallbackIrq>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <DMA1_Stream3_IRQHandler+0x10>)
 80011ce:	f000 fd03 	bl	8001bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20003220 	.word	0x20003220

080011dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <DMA1_Stream6_IRQHandler+0x10>)
 80011e2:	f000 fcf9 	bl	8001bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20003340 	.word	0x20003340

080011f0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <DMA2_Stream6_IRQHandler+0x10>)
 80011f6:	f000 fcef 	bl	8001bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200032e0 	.word	0x200032e0

08001204 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <DMA2_Stream7_IRQHandler+0x10>)
 800120a:	f000 fce5 	bl	8001bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20003280 	.word	0x20003280

08001218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <_sbrk+0x5c>)
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <_sbrk+0x60>)
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <_sbrk+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <_sbrk+0x64>)
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <_sbrk+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <_sbrk+0x64>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	429a      	cmp	r2, r3
 8001246:	d207      	bcs.n	8001258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001248:	f00a f942 	bl	800b4d0 <__errno>
 800124c:	4602      	mov	r2, r0
 800124e:	230c      	movs	r3, #12
 8001250:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	e009      	b.n	800126c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <_sbrk+0x64>)
 8001268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20020000 	.word	0x20020000
 8001278:	00000400 	.word	0x00000400
 800127c:	200005cc 	.word	0x200005cc
 8001280:	2000e730 	.word	0x2000e730

08001284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <SystemInit+0x28>)
 800128a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <SystemInit+0x28>)
 8001290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SystemInit+0x28>)
 800129a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800129e:	609a      	str	r2, [r3, #8]
#endif
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <MX_USART1_UART_Init+0x50>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_USART1_UART_Init+0x4c>)
 80012e8:	f002 f886 	bl	80033f8 <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012f2:	f7ff fe51 	bl	8000f98 <Error_Handler>
  }

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200030d0 	.word	0x200030d0
 8001300:	40011000 	.word	0x40011000

08001304 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART2_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART2_UART_Init+0x4c>)
 800133c:	f002 f85c 	bl	80033f8 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f7ff fe27 	bl	8000f98 <Error_Handler>
  }

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20003150 	.word	0x20003150
 8001354:	40004400 	.word	0x40004400

08001358 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USART3_UART_Init+0x4c>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_USART3_UART_Init+0x50>)
 8001360:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_USART3_UART_Init+0x4c>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USART3_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USART3_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USART3_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USART3_UART_Init+0x4c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USART3_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USART3_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USART3_UART_Init+0x4c>)
 8001390:	f002 f832 	bl	80033f8 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800139a:	f7ff fdfd 	bl	8000f98 <Error_Handler>
  }

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20003090 	.word	0x20003090
 80013a8:	40004800 	.word	0x40004800

080013ac <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b090      	sub	sp, #64	; 0x40
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a75      	ldr	r2, [pc, #468]	; (80015a0 <HAL_UART_MspInit+0x1f4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d135      	bne.n	800143a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d2:	4b74      	ldr	r3, [pc, #464]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a73      	ldr	r2, [pc, #460]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	4b6d      	ldr	r3, [pc, #436]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a6c      	ldr	r2, [pc, #432]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b6a      	ldr	r3, [pc, #424]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001406:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001418:	2307      	movs	r3, #7
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001420:	4619      	mov	r1, r3
 8001422:	4861      	ldr	r0, [pc, #388]	; (80015a8 <HAL_UART_MspInit+0x1fc>)
 8001424:	f000 fe40 	bl	80020a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2025      	movs	r0, #37	; 0x25
 800142e:	f000 fa73 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001432:	2025      	movs	r0, #37	; 0x25
 8001434:	f000 fa8c 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001438:	e0ad      	b.n	8001596 <HAL_UART_MspInit+0x1ea>
  else if(uartHandle->Instance==USART2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a5b      	ldr	r2, [pc, #364]	; (80015ac <HAL_UART_MspInit+0x200>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d134      	bne.n	80014ae <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
 8001448:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 800144e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001452:	6413      	str	r3, [r2, #64]	; 0x40
 8001454:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	623b      	str	r3, [r7, #32]
 800145e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	4b4f      	ldr	r3, [pc, #316]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	4a4e      	ldr	r2, [pc, #312]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6313      	str	r3, [r2, #48]	; 0x30
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800147c:	230c      	movs	r3, #12
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800148c:	2307      	movs	r3, #7
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001494:	4619      	mov	r1, r3
 8001496:	4844      	ldr	r0, [pc, #272]	; (80015a8 <HAL_UART_MspInit+0x1fc>)
 8001498:	f000 fe06 	bl	80020a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	2026      	movs	r0, #38	; 0x26
 80014a2:	f000 fa39 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014a6:	2026      	movs	r0, #38	; 0x26
 80014a8:	f000 fa52 	bl	8001950 <HAL_NVIC_EnableIRQ>
}
 80014ac:	e073      	b.n	8001596 <HAL_UART_MspInit+0x1ea>
  else if(uartHandle->Instance==USART3)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a3f      	ldr	r2, [pc, #252]	; (80015b0 <HAL_UART_MspInit+0x204>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d135      	bne.n	8001524 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a38      	ldr	r2, [pc, #224]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80014c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4a31      	ldr	r2, [pc, #196]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	6313      	str	r3, [r2, #48]	; 0x30
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001502:	2307      	movs	r3, #7
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150a:	4619      	mov	r1, r3
 800150c:	4829      	ldr	r0, [pc, #164]	; (80015b4 <HAL_UART_MspInit+0x208>)
 800150e:	f000 fdcb 	bl	80020a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	2027      	movs	r0, #39	; 0x27
 8001518:	f000 f9fe 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800151c:	2027      	movs	r0, #39	; 0x27
 800151e:	f000 fa17 	bl	8001950 <HAL_NVIC_EnableIRQ>
}
 8001522:	e038      	b.n	8001596 <HAL_UART_MspInit+0x1ea>
  else if(uartHandle->Instance==USART6)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <HAL_UART_MspInit+0x20c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d133      	bne.n	8001596 <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 8001538:	f043 0320 	orr.w	r3, r3, #32
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_UART_MspInit+0x1f8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001566:	23c0      	movs	r3, #192	; 0xc0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156e:	2301      	movs	r3, #1
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001576:	2308      	movs	r3, #8
 8001578:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157e:	4619      	mov	r1, r3
 8001580:	480e      	ldr	r0, [pc, #56]	; (80015bc <HAL_UART_MspInit+0x210>)
 8001582:	f000 fd91 	bl	80020a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2047      	movs	r0, #71	; 0x47
 800158c:	f000 f9c4 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001590:	2047      	movs	r0, #71	; 0x47
 8001592:	f000 f9dd 	bl	8001950 <HAL_NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3740      	adds	r7, #64	; 0x40
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40011000 	.word	0x40011000
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40004800 	.word	0x40004800
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40011400 	.word	0x40011400
 80015bc:	40020800 	.word	0x40020800

080015c0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_UART_MspDeInit+0xac>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10e      	bne.n	80015f0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_UART_MspDeInit+0xb0>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a26      	ldr	r2, [pc, #152]	; (8001670 <HAL_UART_MspDeInit+0xb0>)
 80015d8:	f023 0310 	bic.w	r3, r3, #16
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80015de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80015e2:	4824      	ldr	r0, [pc, #144]	; (8001674 <HAL_UART_MspDeInit+0xb4>)
 80015e4:	f000 fefa 	bl	80023dc <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80015e8:	2025      	movs	r0, #37	; 0x25
 80015ea:	f000 f9bf 	bl	800196c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 80015ee:	e038      	b.n	8001662 <HAL_UART_MspDeInit+0xa2>
  else if(uartHandle->Instance==USART2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a20      	ldr	r2, [pc, #128]	; (8001678 <HAL_UART_MspDeInit+0xb8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10d      	bne.n	8001616 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_UART_MspDeInit+0xb0>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <HAL_UART_MspDeInit+0xb0>)
 8001600:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001606:	210c      	movs	r1, #12
 8001608:	481a      	ldr	r0, [pc, #104]	; (8001674 <HAL_UART_MspDeInit+0xb4>)
 800160a:	f000 fee7 	bl	80023dc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800160e:	2026      	movs	r0, #38	; 0x26
 8001610:	f000 f9ac 	bl	800196c <HAL_NVIC_DisableIRQ>
}
 8001614:	e025      	b.n	8001662 <HAL_UART_MspDeInit+0xa2>
  else if(uartHandle->Instance==USART3)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_UART_MspDeInit+0xbc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d10e      	bne.n	800163e <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <HAL_UART_MspDeInit+0xb0>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	4a12      	ldr	r2, [pc, #72]	; (8001670 <HAL_UART_MspDeInit+0xb0>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800162c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001630:	4813      	ldr	r0, [pc, #76]	; (8001680 <HAL_UART_MspDeInit+0xc0>)
 8001632:	f000 fed3 	bl	80023dc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001636:	2027      	movs	r0, #39	; 0x27
 8001638:	f000 f998 	bl	800196c <HAL_NVIC_DisableIRQ>
}
 800163c:	e011      	b.n	8001662 <HAL_UART_MspDeInit+0xa2>
  else if(uartHandle->Instance==USART6)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <HAL_UART_MspDeInit+0xc4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d10c      	bne.n	8001662 <HAL_UART_MspDeInit+0xa2>
    __HAL_RCC_USART6_CLK_DISABLE();
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_UART_MspDeInit+0xb0>)
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_UART_MspDeInit+0xb0>)
 800164e:	f023 0320 	bic.w	r3, r3, #32
 8001652:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8001654:	21c0      	movs	r1, #192	; 0xc0
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <HAL_UART_MspDeInit+0xc8>)
 8001658:	f000 fec0 	bl	80023dc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 800165c:	2047      	movs	r0, #71	; 0x47
 800165e:	f000 f985 	bl	800196c <HAL_NVIC_DisableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40011000 	.word	0x40011000
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000
 8001678:	40004400 	.word	0x40004400
 800167c:	40004800 	.word	0x40004800
 8001680:	40020400 	.word	0x40020400
 8001684:	40011400 	.word	0x40011400
 8001688:	40020800 	.word	0x40020800

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001690:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001692:	e003      	b.n	800169c <LoopCopyDataInit>

08001694 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001696:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001698:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800169a:	3104      	adds	r1, #4

0800169c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016a4:	d3f6      	bcc.n	8001694 <CopyDataInit>
  ldr  r2, =_sbss
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016a8:	e002      	b.n	80016b0 <LoopFillZerobss>

080016aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016ac:	f842 3b04 	str.w	r3, [r2], #4

080016b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016b4:	d3f9      	bcc.n	80016aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016b6:	f7ff fde5 	bl	8001284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ba:	f009 ff0f 	bl	800b4dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016be:	f7ff fbd9 	bl	8000e74 <main>
  bx  lr    
 80016c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016c8:	0800d070 	.word	0x0800d070
  ldr  r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016d0:	200005a0 	.word	0x200005a0
  ldr  r2, =_sbss
 80016d4:	200005a0 	.word	0x200005a0
  ldr  r3, = _ebss
 80016d8:	2000e72c 	.word	0x2000e72c

080016dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f8fa 	bl	8001902 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	2000      	movs	r0, #0
 8001710:	f7ff fc72 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fc48 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000210 	.word	0x20000210
 8001748:	20003190 	.word	0x20003190

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20003190 	.word	0x20003190

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db10      	blt.n	8001838 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4909      	ldr	r1, [pc, #36]	; (8001844 <__NVIC_DisableIRQ+0x40>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	3320      	adds	r3, #32
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001830:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001834:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff2a 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192a:	f7ff ff3f 	bl	80017ac <__NVIC_GetPriorityGrouping>
 800192e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	6978      	ldr	r0, [r7, #20]
 8001936:	f7ff ffb1 	bl	800189c <NVIC_EncodePriority>
 800193a:	4602      	mov	r2, r0
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff80 	bl	8001848 <__NVIC_SetPriority>
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff32 	bl	80017c8 <__NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff42 	bl	8001804 <__NVIC_DisableIRQ>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff feda 	bl	800174c <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e099      	b.n	8001ad8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c4:	e00f      	b.n	80019e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c6:	f7ff fec1 	bl	800174c <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d908      	bls.n	80019e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2220      	movs	r2, #32
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2203      	movs	r2, #3
 80019de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e078      	b.n	8001ad8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1e8      	bne.n	80019c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <HAL_DMA_Init+0x158>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d107      	bne.n	8001a50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f023 0307 	bic.w	r3, r3, #7
 8001a66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d117      	bne.n	8001aaa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00e      	beq.n	8001aaa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fa91 	bl	8001fb4 <DMA_CheckFifoParam>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2240      	movs	r2, #64	; 0x40
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e016      	b.n	8001ad8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fa48 	bl	8001f48 <DMA_CalcBaseAndBitshift>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac0:	223f      	movs	r2, #63	; 0x3f
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	f010803f 	.word	0xf010803f

08001ae4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_DMA_Start_IT+0x26>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e040      	b.n	8001b8c <HAL_DMA_Start_IT+0xa8>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d12f      	bne.n	8001b7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2202      	movs	r2, #2
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f9da 	bl	8001eec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3c:	223f      	movs	r2, #63	; 0x3f
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0216 	orr.w	r2, r2, #22
 8001b52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0208 	orr.w	r2, r2, #8
 8001b6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e005      	b.n	8001b8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b86:	2302      	movs	r3, #2
 8001b88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00c      	b.n	8001bcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2205      	movs	r2, #5
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001be4:	4b92      	ldr	r3, [pc, #584]	; (8001e30 <HAL_DMA_IRQHandler+0x258>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a92      	ldr	r2, [pc, #584]	; (8001e34 <HAL_DMA_IRQHandler+0x25c>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0a9b      	lsrs	r3, r3, #10
 8001bf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c02:	2208      	movs	r2, #8
 8001c04:	409a      	lsls	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d01a      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0204 	bic.w	r2, r2, #4
 8001c2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	2208      	movs	r2, #8
 8001c32:	409a      	lsls	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	2201      	movs	r2, #1
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d012      	beq.n	8001c7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00b      	beq.n	8001c7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c66:	2201      	movs	r2, #1
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f043 0202 	orr.w	r2, r3, #2
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	2204      	movs	r2, #4
 8001c80:	409a      	lsls	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d012      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00b      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	f043 0204 	orr.w	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d043      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d03c      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d018      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d108      	bne.n	8001d08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d024      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
 8001d06:	e01f      	b.n	8001d48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01b      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	4798      	blx	r3
 8001d18:	e016      	b.n	8001d48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0208 	bic.w	r2, r2, #8
 8001d36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 808e 	beq.w	8001e76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8086 	beq.w	8001e76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	2220      	movs	r2, #32
 8001d70:	409a      	lsls	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d136      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0216 	bic.w	r2, r2, #22
 8001d90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d103      	bne.n	8001db2 <HAL_DMA_IRQHandler+0x1da>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0208 	bic.w	r2, r2, #8
 8001dc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	223f      	movs	r2, #63	; 0x3f
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d07d      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
        }
        return;
 8001dee:	e078      	b.n	8001ee2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01c      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d108      	bne.n	8001e1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d030      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
 8001e1c:	e02b      	b.n	8001e76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d027      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
 8001e2e:	e022      	b.n	8001e76 <HAL_DMA_IRQHandler+0x29e>
 8001e30:	20000208 	.word	0x20000208
 8001e34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0210 	bic.w	r2, r2, #16
 8001e54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d032      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d022      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2205      	movs	r2, #5
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d307      	bcc.n	8001ebe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f2      	bne.n	8001ea2 <HAL_DMA_IRQHandler+0x2ca>
 8001ebc:	e000      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ebe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
 8001ee0:	e000      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ee2:	bf00      	nop
    }
  }
}
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop

08001eec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b40      	cmp	r3, #64	; 0x40
 8001f18:	d108      	bne.n	8001f2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f2a:	e007      	b.n	8001f3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	60da      	str	r2, [r3, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	3b10      	subs	r3, #16
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <DMA_CalcBaseAndBitshift+0x64>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f62:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <DMA_CalcBaseAndBitshift+0x68>)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d909      	bls.n	8001f8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f7e:	f023 0303 	bic.w	r3, r3, #3
 8001f82:	1d1a      	adds	r2, r3, #4
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	659a      	str	r2, [r3, #88]	; 0x58
 8001f88:	e007      	b.n	8001f9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f92:	f023 0303 	bic.w	r3, r3, #3
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	aaaaaaab 	.word	0xaaaaaaab
 8001fb0:	0800ce34 	.word	0x0800ce34

08001fb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d11f      	bne.n	800200e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d855      	bhi.n	8002080 <DMA_CheckFifoParam+0xcc>
 8001fd4:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <DMA_CheckFifoParam+0x28>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	08001fff 	.word	0x08001fff
 8001fe4:	08001fed 	.word	0x08001fed
 8001fe8:	08002081 	.word	0x08002081
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d045      	beq.n	8002084 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ffc:	e042      	b.n	8002084 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002006:	d13f      	bne.n	8002088 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800200c:	e03c      	b.n	8002088 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002016:	d121      	bne.n	800205c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d836      	bhi.n	800208c <DMA_CheckFifoParam+0xd8>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <DMA_CheckFifoParam+0x70>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002035 	.word	0x08002035
 8002028:	0800203b 	.word	0x0800203b
 800202c:	08002035 	.word	0x08002035
 8002030:	0800204d 	.word	0x0800204d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
      break;
 8002038:	e02f      	b.n	800209a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d024      	beq.n	8002090 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204a:	e021      	b.n	8002090 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002054:	d11e      	bne.n	8002094 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800205a:	e01b      	b.n	8002094 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d902      	bls.n	8002068 <DMA_CheckFifoParam+0xb4>
 8002062:	2b03      	cmp	r3, #3
 8002064:	d003      	beq.n	800206e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002066:	e018      	b.n	800209a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      break;
 800206c:	e015      	b.n	800209a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00e      	beq.n	8002098 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
      break;
 800207e:	e00b      	b.n	8002098 <DMA_CheckFifoParam+0xe4>
      break;
 8002080:	bf00      	nop
 8002082:	e00a      	b.n	800209a <DMA_CheckFifoParam+0xe6>
      break;
 8002084:	bf00      	nop
 8002086:	e008      	b.n	800209a <DMA_CheckFifoParam+0xe6>
      break;
 8002088:	bf00      	nop
 800208a:	e006      	b.n	800209a <DMA_CheckFifoParam+0xe6>
      break;
 800208c:	bf00      	nop
 800208e:	e004      	b.n	800209a <DMA_CheckFifoParam+0xe6>
      break;
 8002090:	bf00      	nop
 8002092:	e002      	b.n	800209a <DMA_CheckFifoParam+0xe6>
      break;   
 8002094:	bf00      	nop
 8002096:	e000      	b.n	800209a <DMA_CheckFifoParam+0xe6>
      break;
 8002098:	bf00      	nop
    }
  } 
  
  return status; 
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
 80020c2:	e16b      	b.n	800239c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c4:	2201      	movs	r2, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	429a      	cmp	r2, r3
 80020de:	f040 815a 	bne.w	8002396 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d00b      	beq.n	8002102 <HAL_GPIO_Init+0x5a>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d007      	beq.n	8002102 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f6:	2b11      	cmp	r3, #17
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b12      	cmp	r3, #18
 8002100:	d130      	bne.n	8002164 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0201 	and.w	r2, r3, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0xfc>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b12      	cmp	r3, #18
 80021a2:	d123      	bne.n	80021ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	08da      	lsrs	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3208      	adds	r2, #8
 80021ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	08da      	lsrs	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3208      	adds	r2, #8
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80b4 	beq.w	8002396 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b5f      	ldr	r3, [pc, #380]	; (80023b0 <HAL_GPIO_Init+0x308>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a5e      	ldr	r2, [pc, #376]	; (80023b0 <HAL_GPIO_Init+0x308>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b5c      	ldr	r3, [pc, #368]	; (80023b0 <HAL_GPIO_Init+0x308>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800224a:	4a5a      	ldr	r2, [pc, #360]	; (80023b4 <HAL_GPIO_Init+0x30c>)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_GPIO_Init+0x310>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d02b      	beq.n	80022ce <HAL_GPIO_Init+0x226>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a50      	ldr	r2, [pc, #320]	; (80023bc <HAL_GPIO_Init+0x314>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d025      	beq.n	80022ca <HAL_GPIO_Init+0x222>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4f      	ldr	r2, [pc, #316]	; (80023c0 <HAL_GPIO_Init+0x318>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01f      	beq.n	80022c6 <HAL_GPIO_Init+0x21e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4e      	ldr	r2, [pc, #312]	; (80023c4 <HAL_GPIO_Init+0x31c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d019      	beq.n	80022c2 <HAL_GPIO_Init+0x21a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_GPIO_Init+0x320>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_GPIO_Init+0x216>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4c      	ldr	r2, [pc, #304]	; (80023cc <HAL_GPIO_Init+0x324>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00d      	beq.n	80022ba <HAL_GPIO_Init+0x212>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4b      	ldr	r2, [pc, #300]	; (80023d0 <HAL_GPIO_Init+0x328>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <HAL_GPIO_Init+0x20e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4a      	ldr	r2, [pc, #296]	; (80023d4 <HAL_GPIO_Init+0x32c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_GPIO_Init+0x20a>
 80022ae:	2307      	movs	r3, #7
 80022b0:	e00e      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022b2:	2308      	movs	r3, #8
 80022b4:	e00c      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022b6:	2306      	movs	r3, #6
 80022b8:	e00a      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022ba:	2305      	movs	r3, #5
 80022bc:	e008      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022be:	2304      	movs	r3, #4
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x228>
 80022ce:	2300      	movs	r3, #0
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	4093      	lsls	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e0:	4934      	ldr	r1, [pc, #208]	; (80023b4 <HAL_GPIO_Init+0x30c>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ee:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_GPIO_Init+0x330>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002312:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <HAL_GPIO_Init+0x330>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002318:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_GPIO_Init+0x330>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233c:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <HAL_GPIO_Init+0x330>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_GPIO_Init+0x330>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002366:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <HAL_GPIO_Init+0x330>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_GPIO_Init+0x330>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002390:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <HAL_GPIO_Init+0x330>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	f67f ae90 	bls.w	80020c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	3724      	adds	r7, #36	; 0x24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40013800 	.word	0x40013800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40020400 	.word	0x40020400
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020c00 	.word	0x40020c00
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40021400 	.word	0x40021400
 80023d0:	40021800 	.word	0x40021800
 80023d4:	40021c00 	.word	0x40021c00
 80023d8:	40013c00 	.word	0x40013c00

080023dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e0cd      	b.n	8002594 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f8:	2201      	movs	r2, #1
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	429a      	cmp	r2, r3
 8002410:	f040 80bd 	bne.w	800258e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002414:	4a64      	ldr	r2, [pc, #400]	; (80025a8 <HAL_GPIO_DeInit+0x1cc>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	3302      	adds	r3, #2
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	220f      	movs	r2, #15
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a5c      	ldr	r2, [pc, #368]	; (80025ac <HAL_GPIO_DeInit+0x1d0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <HAL_GPIO_DeInit+0xba>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a5b      	ldr	r2, [pc, #364]	; (80025b0 <HAL_GPIO_DeInit+0x1d4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d025      	beq.n	8002492 <HAL_GPIO_DeInit+0xb6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a5a      	ldr	r2, [pc, #360]	; (80025b4 <HAL_GPIO_DeInit+0x1d8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <HAL_GPIO_DeInit+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a59      	ldr	r2, [pc, #356]	; (80025b8 <HAL_GPIO_DeInit+0x1dc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_DeInit+0xae>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_GPIO_DeInit+0x1e0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_DeInit+0xaa>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a57      	ldr	r2, [pc, #348]	; (80025c0 <HAL_GPIO_DeInit+0x1e4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_DeInit+0xa6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a56      	ldr	r2, [pc, #344]	; (80025c4 <HAL_GPIO_DeInit+0x1e8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_DeInit+0xa2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a55      	ldr	r2, [pc, #340]	; (80025c8 <HAL_GPIO_DeInit+0x1ec>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_DeInit+0x9e>
 8002476:	2307      	movs	r3, #7
 8002478:	e00e      	b.n	8002498 <HAL_GPIO_DeInit+0xbc>
 800247a:	2308      	movs	r3, #8
 800247c:	e00c      	b.n	8002498 <HAL_GPIO_DeInit+0xbc>
 800247e:	2306      	movs	r3, #6
 8002480:	e00a      	b.n	8002498 <HAL_GPIO_DeInit+0xbc>
 8002482:	2305      	movs	r3, #5
 8002484:	e008      	b.n	8002498 <HAL_GPIO_DeInit+0xbc>
 8002486:	2304      	movs	r3, #4
 8002488:	e006      	b.n	8002498 <HAL_GPIO_DeInit+0xbc>
 800248a:	2303      	movs	r3, #3
 800248c:	e004      	b.n	8002498 <HAL_GPIO_DeInit+0xbc>
 800248e:	2302      	movs	r3, #2
 8002490:	e002      	b.n	8002498 <HAL_GPIO_DeInit+0xbc>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_GPIO_DeInit+0xbc>
 8002496:	2300      	movs	r3, #0
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	f002 0203 	and.w	r2, r2, #3
 800249e:	0092      	lsls	r2, r2, #2
 80024a0:	4093      	lsls	r3, r2
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d132      	bne.n	800250e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80024a8:	4b48      	ldr	r3, [pc, #288]	; (80025cc <HAL_GPIO_DeInit+0x1f0>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	4946      	ldr	r1, [pc, #280]	; (80025cc <HAL_GPIO_DeInit+0x1f0>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80024b6:	4b45      	ldr	r3, [pc, #276]	; (80025cc <HAL_GPIO_DeInit+0x1f0>)
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	4943      	ldr	r1, [pc, #268]	; (80025cc <HAL_GPIO_DeInit+0x1f0>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_GPIO_DeInit+0x1f0>)
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	493f      	ldr	r1, [pc, #252]	; (80025cc <HAL_GPIO_DeInit+0x1f0>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_GPIO_DeInit+0x1f0>)
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	493c      	ldr	r1, [pc, #240]	; (80025cc <HAL_GPIO_DeInit+0x1f0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80024f0:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <HAL_GPIO_DeInit+0x1cc>)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	43da      	mvns	r2, r3
 8002500:	4829      	ldr	r0, [pc, #164]	; (80025a8 <HAL_GPIO_DeInit+0x1cc>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	400a      	ands	r2, r1
 8002508:	3302      	adds	r3, #2
 800250a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2103      	movs	r1, #3
 8002518:	fa01 f303 	lsl.w	r3, r1, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	401a      	ands	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	08d2      	lsrs	r2, r2, #3
 8002544:	4019      	ands	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2103      	movs	r1, #3
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	401a      	ands	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	2101      	movs	r1, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2103      	movs	r1, #3
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	401a      	ands	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b0f      	cmp	r3, #15
 8002598:	f67f af2e 	bls.w	80023f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40013800 	.word	0x40013800
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40021400 	.word	0x40021400
 80025c4:	40021800 	.word	0x40021800
 80025c8:	40021c00 	.word	0x40021c00
 80025cc:	40013c00 	.word	0x40013c00

080025d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e001      	b.n	80025f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800261c:	e003      	b.n	8002626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	401a      	ands	r2, r3
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	429a      	cmp	r2, r3
 800264a:	d104      	bne.n	8002656 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	041a      	lsls	r2, r3, #16
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002654:	e002      	b.n	800265c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_PWR_EnterSLEEPMode+0x34>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_PWR_EnterSLEEPMode+0x34>)
 800267a:	f023 0304 	bic.w	r3, r3, #4
 800267e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8002686:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002688:	e002      	b.n	8002690 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800268a:	bf40      	sev
    __WFE();
 800268c:	bf20      	wfe
    __WFE();
 800268e:	bf20      	wfe
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e25b      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d075      	beq.n	80027aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026be:	4ba3      	ldr	r3, [pc, #652]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d00c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ca:	4ba0      	ldr	r3, [pc, #640]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d112      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d6:	4b9d      	ldr	r3, [pc, #628]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e2:	d10b      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	4b99      	ldr	r3, [pc, #612]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d05b      	beq.n	80027a8 <HAL_RCC_OscConfig+0x108>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d157      	bne.n	80027a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e236      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d106      	bne.n	8002714 <HAL_RCC_OscConfig+0x74>
 8002706:	4b91      	ldr	r3, [pc, #580]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a90      	ldr	r2, [pc, #576]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x98>
 800271e:	4b8b      	ldr	r3, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a8a      	ldr	r2, [pc, #552]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b88      	ldr	r3, [pc, #544]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a87      	ldr	r2, [pc, #540]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002738:	4b84      	ldr	r3, [pc, #528]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a83      	ldr	r2, [pc, #524]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b81      	ldr	r3, [pc, #516]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a80      	ldr	r2, [pc, #512]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe fff8 	bl	800174c <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe fff4 	bl	800174c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1fb      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xc0>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe ffe4 	bl	800174c <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe ffe0 	bl	800174c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1e7      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b6c      	ldr	r3, [pc, #432]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0xe8>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c2:	4b62      	ldr	r3, [pc, #392]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ce:	4b5f      	ldr	r3, [pc, #380]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1bb      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b56      	ldr	r3, [pc, #344]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4952      	ldr	r1, [pc, #328]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e03a      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b4f      	ldr	r3, [pc, #316]	; (8002950 <HAL_RCC_OscConfig+0x2b0>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe ff99 	bl	800174c <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe ff95 	bl	800174c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e19c      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4940      	ldr	r1, [pc, #256]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x2b0>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe ff78 	bl	800174c <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe ff74 	bl	800174c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e17b      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d030      	beq.n	80028ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_RCC_OscConfig+0x2b4>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fe ff58 	bl	800174c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe ff54 	bl	800174c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e15b      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x200>
 80028be:	e015      	b.n	80028ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_OscConfig+0x2b4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7fe ff41 	bl	800174c <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ce:	f7fe ff3d 	bl	800174c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e144      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a0 	beq.w	8002a3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10f      	bne.n	800292a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a0e      	ldr	r2, [pc, #56]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_OscConfig+0x2b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d121      	bne.n	800297a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_RCC_OscConfig+0x2b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <HAL_RCC_OscConfig+0x2b8>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002942:	f7fe ff03 	bl	800174c <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	e011      	b.n	800296e <HAL_RCC_OscConfig+0x2ce>
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	42470000 	.word	0x42470000
 8002954:	42470e80 	.word	0x42470e80
 8002958:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe fef6 	bl	800174c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0fd      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296e:	4b81      	ldr	r3, [pc, #516]	; (8002b74 <HAL_RCC_OscConfig+0x4d4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x2f0>
 8002982:	4b7d      	ldr	r3, [pc, #500]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a7c      	ldr	r2, [pc, #496]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	e01c      	b.n	80029ca <HAL_RCC_OscConfig+0x32a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x312>
 8002998:	4b77      	ldr	r3, [pc, #476]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a76      	ldr	r2, [pc, #472]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	4b74      	ldr	r3, [pc, #464]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a73      	ldr	r2, [pc, #460]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x32a>
 80029b2:	4b71      	ldr	r3, [pc, #452]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a70      	ldr	r2, [pc, #448]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	4b6e      	ldr	r3, [pc, #440]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a6d      	ldr	r2, [pc, #436]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fe febb 	bl	800174c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe feb7 	bl	800174c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0bc      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x33a>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fe fea5 	bl	800174c <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fea1 	bl	800174c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0a6      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b52      	ldr	r3, [pc, #328]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a51      	ldr	r2, [pc, #324]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8092 	beq.w	8002b68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a44:	4b4c      	ldr	r3, [pc, #304]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d05c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d141      	bne.n	8002adc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <HAL_RCC_OscConfig+0x4dc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fe75 	bl	800174c <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe fe71 	bl	800174c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e078      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a78:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	019b      	lsls	r3, r3, #6
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	061b      	lsls	r3, r3, #24
 8002aa8:	4933      	ldr	r1, [pc, #204]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aae:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_RCC_OscConfig+0x4dc>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fe4a 	bl	800174c <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe fe46 	bl	800174c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e04d      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x41c>
 8002ada:	e045      	b.n	8002b68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_RCC_OscConfig+0x4dc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fe33 	bl	800174c <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fe2f 	bl	800174c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e036      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afc:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x44a>
 8002b08:	e02e      	b.n	8002b68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e029      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_RCC_OscConfig+0x4d8>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d11c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d115      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10d      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	42470060 	.word	0x42470060

08002b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0cc      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d90c      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0b8      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd4:	4b59      	ldr	r3, [pc, #356]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bec:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	494d      	ldr	r1, [pc, #308]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d044      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d119      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e07f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d003      	beq.n	8002c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e067      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5e:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4934      	ldr	r1, [pc, #208]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fe fd6c 	bl	800174c <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe fd68 	bl	800174c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e04f      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 020c 	and.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1eb      	bne.n	8002c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d20c      	bcs.n	8002cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e032      	b.n	8002d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4916      	ldr	r1, [pc, #88]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	490e      	ldr	r1, [pc, #56]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d06:	f000 f821 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	5cd3      	ldrb	r3, [r2, r3]
 8002d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCC_ClockConfig+0x1c8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe f966 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	0800ce1c 	.word	0x0800ce1c
 8002d44:	20000208 	.word	0x20000208
 8002d48:	2000020c 	.word	0x2000020c

08002d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d62:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d007      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x32>
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d008      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x38>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 808d 	bne.w	8002e92 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002d7a:	60bb      	str	r3, [r7, #8]
       break;
 8002d7c:	e08c      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7e:	4b4b      	ldr	r3, [pc, #300]	; (8002eac <HAL_RCC_GetSysClockFreq+0x160>)
 8002d80:	60bb      	str	r3, [r7, #8]
      break;
 8002d82:	e089      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d84:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8e:	4b45      	ldr	r3, [pc, #276]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d023      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9a:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	099b      	lsrs	r3, r3, #6
 8002da0:	f04f 0400 	mov.w	r4, #0
 8002da4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	ea03 0501 	and.w	r5, r3, r1
 8002db0:	ea04 0602 	and.w	r6, r4, r2
 8002db4:	4a3d      	ldr	r2, [pc, #244]	; (8002eac <HAL_RCC_GetSysClockFreq+0x160>)
 8002db6:	fb02 f106 	mul.w	r1, r2, r6
 8002dba:	2200      	movs	r2, #0
 8002dbc:	fb02 f205 	mul.w	r2, r2, r5
 8002dc0:	440a      	add	r2, r1
 8002dc2:	493a      	ldr	r1, [pc, #232]	; (8002eac <HAL_RCC_GetSysClockFreq+0x160>)
 8002dc4:	fba5 0101 	umull	r0, r1, r5, r1
 8002dc8:	1853      	adds	r3, r2, r1
 8002dca:	4619      	mov	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f04f 0400 	mov.w	r4, #0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4623      	mov	r3, r4
 8002dd6:	f7fd fac3 	bl	8000360 <__aeabi_uldivmod>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	460c      	mov	r4, r1
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e049      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	f04f 0400 	mov.w	r4, #0
 8002dec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	ea03 0501 	and.w	r5, r3, r1
 8002df8:	ea04 0602 	and.w	r6, r4, r2
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4632      	mov	r2, r6
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	f04f 0400 	mov.w	r4, #0
 8002e08:	0154      	lsls	r4, r2, #5
 8002e0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e0e:	014b      	lsls	r3, r1, #5
 8002e10:	4619      	mov	r1, r3
 8002e12:	4622      	mov	r2, r4
 8002e14:	1b49      	subs	r1, r1, r5
 8002e16:	eb62 0206 	sbc.w	r2, r2, r6
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	f04f 0400 	mov.w	r4, #0
 8002e22:	0194      	lsls	r4, r2, #6
 8002e24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e28:	018b      	lsls	r3, r1, #6
 8002e2a:	1a5b      	subs	r3, r3, r1
 8002e2c:	eb64 0402 	sbc.w	r4, r4, r2
 8002e30:	f04f 0100 	mov.w	r1, #0
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	00e2      	lsls	r2, r4, #3
 8002e3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e3e:	00d9      	lsls	r1, r3, #3
 8002e40:	460b      	mov	r3, r1
 8002e42:	4614      	mov	r4, r2
 8002e44:	195b      	adds	r3, r3, r5
 8002e46:	eb44 0406 	adc.w	r4, r4, r6
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	02a2      	lsls	r2, r4, #10
 8002e54:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e58:	0299      	lsls	r1, r3, #10
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4614      	mov	r4, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	4621      	mov	r1, r4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f04f 0400 	mov.w	r4, #0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4623      	mov	r3, r4
 8002e6c:	f7fd fa78 	bl	8000360 <__aeabi_uldivmod>
 8002e70:	4603      	mov	r3, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	3301      	adds	r3, #1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	60bb      	str	r3, [r7, #8]
      break;
 8002e90:	e002      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e94:	60bb      	str	r3, [r7, #8]
      break;
 8002e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e98:	68bb      	ldr	r3, [r7, #8]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	017d7840 	.word	0x017d7840

08002eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000208 	.word	0x20000208

08002ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4601      	mov	r1, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0a9b      	lsrs	r3, r3, #10
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4a03      	ldr	r2, [pc, #12]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	0800ce2c 	.word	0x0800ce2c

08002ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ef4:	f7ff ffdc 	bl	8002eb0 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4601      	mov	r1, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0b5b      	lsrs	r3, r3, #13
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4a03      	ldr	r2, [pc, #12]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f06:	5cd3      	ldrb	r3, [r2, r3]
 8002f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	0800ce2c 	.word	0x0800ce2c

08002f18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	220f      	movs	r2, #15
 8002f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0203 	and.w	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	08db      	lsrs	r3, r3, #3
 8002f52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <HAL_RCC_GetClockConfig+0x60>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40023c00 	.word	0x40023c00

08002f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e01d      	b.n	8002fca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f815 	bl	8002fd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f000 f968 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d007      	beq.n	8003020 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d122      	bne.n	800308a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d11b      	bne.n	800308a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f06f 0202 	mvn.w	r2, #2
 800305a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8ee 	bl	8003252 <HAL_TIM_IC_CaptureCallback>
 8003076:	e005      	b.n	8003084 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8e0 	bl	800323e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8f1 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b04      	cmp	r3, #4
 8003096:	d122      	bne.n	80030de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d11b      	bne.n	80030de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0204 	mvn.w	r2, #4
 80030ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f8c4 	bl	8003252 <HAL_TIM_IC_CaptureCallback>
 80030ca:	e005      	b.n	80030d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8b6 	bl	800323e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8c7 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d122      	bne.n	8003132 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d11b      	bne.n	8003132 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f06f 0208 	mvn.w	r2, #8
 8003102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2204      	movs	r2, #4
 8003108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f89a 	bl	8003252 <HAL_TIM_IC_CaptureCallback>
 800311e:	e005      	b.n	800312c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f88c 	bl	800323e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f89d 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b10      	cmp	r3, #16
 800313e:	d122      	bne.n	8003186 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b10      	cmp	r3, #16
 800314c:	d11b      	bne.n	8003186 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f06f 0210 	mvn.w	r2, #16
 8003156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2208      	movs	r2, #8
 800315c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f870 	bl	8003252 <HAL_TIM_IC_CaptureCallback>
 8003172:	e005      	b.n	8003180 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f862 	bl	800323e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f873 	bl	8003266 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10e      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f06f 0201 	mvn.w	r2, #1
 80031aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7fd fee1 	bl	8000f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031bc:	2b80      	cmp	r3, #128	; 0x80
 80031be:	d10e      	bne.n	80031de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d107      	bne.n	80031de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f903 	bl	80033e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d10e      	bne.n	800320a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d107      	bne.n	800320a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f838 	bl	800327a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b20      	cmp	r3, #32
 8003216:	d10e      	bne.n	8003236 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b20      	cmp	r3, #32
 8003224:	d107      	bne.n	8003236 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f06f 0220 	mvn.w	r2, #32
 800322e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f8cd 	bl	80033d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d00f      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3d      	ldr	r2, [pc, #244]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3c      	ldr	r2, [pc, #240]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d027      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d023      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d017      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <TIM_Base_SetConfig+0x128>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a27      	ldr	r2, [pc, #156]	; (80033bc <TIM_Base_SetConfig+0x12c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <TIM_Base_SetConfig+0x130>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <TIM_Base_SetConfig+0x134>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <TIM_Base_SetConfig+0x138>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a23      	ldr	r2, [pc, #140]	; (80033cc <TIM_Base_SetConfig+0x13c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0xf8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40010400 	.word	0x40010400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800
 80033c4:	40001800 	.word	0x40001800
 80033c8:	40001c00 	.word	0x40001c00
 80033cc:	40002000 	.word	0x40002000

080033d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e03f      	b.n	800348a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd ffc4 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fcff 	bl	8003e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e01e      	b.n	80034e2 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	; 0x24
 80034a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ba:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fe f87f 	bl	80015c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b088      	sub	sp, #32
 80034ee:	af02      	add	r7, sp, #8
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	4613      	mov	r3, r2
 80034f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	f040 8083 	bne.w	8003612 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_UART_Transmit+0x2e>
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e07b      	b.n	8003614 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_UART_Transmit+0x40>
 8003526:	2302      	movs	r3, #2
 8003528:	e074      	b.n	8003614 <HAL_UART_Transmit+0x12a>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2221      	movs	r2, #33	; 0x21
 800353c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003540:	f7fe f904 	bl	800174c <HAL_GetTick>
 8003544:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800355a:	e042      	b.n	80035e2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	d122      	bne.n	80035ba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	2180      	movs	r1, #128	; 0x80
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fadd 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e042      	b.n	8003614 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3302      	adds	r3, #2
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	e017      	b.n	80035e2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3301      	adds	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	e013      	b.n	80035e2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2200      	movs	r2, #0
 80035c2:	2180      	movs	r1, #128	; 0x80
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 faba 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e01f      	b.n	8003614 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	60ba      	str	r2, [r7, #8]
 80035da:	781a      	ldrb	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1b7      	bne.n	800355c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2200      	movs	r2, #0
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 faa1 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e006      	b.n	8003614 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d130      	bne.n	8003698 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_UART_Transmit_IT+0x26>
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e029      	b.n	800369a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_UART_Transmit_IT+0x38>
 8003650:	2302      	movs	r3, #2
 8003652:	e022      	b.n	800369a <HAL_UART_Transmit_IT+0x7e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	88fa      	ldrh	r2, [r7, #6]
 8003666:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	88fa      	ldrh	r2, [r7, #6]
 800366c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2221      	movs	r2, #33	; 0x21
 8003678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003692:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	4613      	mov	r3, r2
 80036b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d140      	bne.n	8003742 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_UART_Receive_IT+0x26>
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e039      	b.n	8003744 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_UART_Receive_IT+0x38>
 80036da:	2302      	movs	r3, #2
 80036dc:	e032      	b.n	8003744 <HAL_UART_Receive_IT+0x9e>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2222      	movs	r2, #34	; 0x22
 8003702:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0220 	orr.w	r2, r2, #32
 800373c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003742:	2302      	movs	r3, #2
  }
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	d153      	bne.n	8003812 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UART_Transmit_DMA+0x26>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e04c      	b.n	8003814 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UART_Transmit_DMA+0x38>
 8003784:	2302      	movs	r3, #2
 8003786:	e045      	b.n	8003814 <HAL_UART_Transmit_DMA+0xc4>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2221      	movs	r2, #33	; 0x21
 80037ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_UART_Transmit_DMA+0xcc>)
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_UART_Transmit_DMA+0xd0>)
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	4a17      	ldr	r2, [pc, #92]	; (8003824 <HAL_UART_Transmit_DMA+0xd4>)
 80037c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2200      	movs	r2, #0
 80037ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80037d0:	f107 0308 	add.w	r3, r7, #8
 80037d4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3304      	adds	r3, #4
 80037e4:	461a      	mov	r2, r3
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	f7fe f97c 	bl	8001ae4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800380c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e000      	b.n	8003814 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	08003a3d 	.word	0x08003a3d
 8003820:	08003a8f 	.word	0x08003a8f
 8003824:	08003aab 	.word	0x08003aab

08003828 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10d      	bne.n	800387a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_UART_IRQHandler+0x52>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa63 	bl	8003d3e <UART_Receive_IT>
      return;
 8003878:	e0d1      	b.n	8003a1e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80b0 	beq.w	80039e2 <HAL_UART_IRQHandler+0x1ba>
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <HAL_UART_IRQHandler+0x70>
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80a5 	beq.w	80039e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_UART_IRQHandler+0x90>
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	f043 0201 	orr.w	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_UART_IRQHandler+0xb0>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	f043 0202 	orr.w	r2, r3, #2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_UART_IRQHandler+0xd0>
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	f043 0204 	orr.w	r2, r3, #4
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00f      	beq.n	8003922 <HAL_UART_IRQHandler+0xfa>
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <HAL_UART_IRQHandler+0xee>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	f043 0208 	orr.w	r2, r3, #8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d078      	beq.n	8003a1c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_UART_IRQHandler+0x11c>
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f9fd 	bl	8003d3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <HAL_UART_IRQHandler+0x144>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d031      	beq.n	80039d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f946 	bl	8003bfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d123      	bne.n	80039c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <HAL_UART_IRQHandler+0x1fc>)
 800399e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe f8f5 	bl	8001b94 <HAL_DMA_Abort_IT>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d016      	beq.n	80039de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039ba:	4610      	mov	r0, r2
 80039bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039be:	e00e      	b.n	80039de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fd fbea 	bl	800119a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c6:	e00a      	b.n	80039de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fd fbe6 	bl	800119a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ce:	e006      	b.n	80039de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fd fbe2 	bl	800119a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80039dc:	e01e      	b.n	8003a1c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039de:	bf00      	nop
    return;
 80039e0:	e01c      	b.n	8003a1c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_UART_IRQHandler+0x1d6>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f933 	bl	8003c62 <UART_Transmit_IT>
    return;
 80039fc:	e00f      	b.n	8003a1e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1f6>
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f97b 	bl	8003d0e <UART_EndTransmit_IT>
    return;
 8003a18:	bf00      	nop
 8003a1a:	e000      	b.n	8003a1e <HAL_UART_IRQHandler+0x1f6>
    return;
 8003a1c:	bf00      	nop
  }
}
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	08003c3b 	.word	0x08003c3b

08003a28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d113      	bne.n	8003a80 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a6c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a7c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a7e:	e002      	b.n	8003a86 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7fd fb95 	bl	80011b0 <HAL_UART_TxCpltCallback>
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7ff ffc3 	bl	8003a28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b21      	cmp	r3, #33	; 0x21
 8003adc:	d108      	bne.n	8003af0 <UART_DMAError+0x46>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003aea:	68b8      	ldr	r0, [r7, #8]
 8003aec:	f000 f871 	bl	8003bd2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	bf0c      	ite	eq
 8003afe:	2301      	moveq	r3, #1
 8003b00:	2300      	movne	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b22      	cmp	r3, #34	; 0x22
 8003b10:	d108      	bne.n	8003b24 <UART_DMAError+0x7a>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b1e:	68b8      	ldr	r0, [r7, #8]
 8003b20:	f000 f86d 	bl	8003bfe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	f043 0210 	orr.w	r2, r3, #16
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b30:	68b8      	ldr	r0, [r7, #8]
 8003b32:	f7fd fb32 	bl	800119a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4e:	e02c      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d028      	beq.n	8003baa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b5e:	f7fd fdf5 	bl	800174c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d21d      	bcs.n	8003baa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e00f      	b.n	8003bca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d0c3      	beq.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003be8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c14:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7fd faa0 	bl	800119a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b21      	cmp	r3, #33	; 0x21
 8003c74:	d144      	bne.n	8003d00 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d11a      	bne.n	8003cb6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c94:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d105      	bne.n	8003caa <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	621a      	str	r2, [r3, #32]
 8003ca8:	e00e      	b.n	8003cc8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	621a      	str	r2, [r3, #32]
 8003cb4:	e008      	b.n	8003cc8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	1c59      	adds	r1, r3, #1
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6211      	str	r1, [r2, #32]
 8003cc0:	781a      	ldrb	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10f      	bne.n	8003cfc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fa3e 	bl	80011b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b22      	cmp	r3, #34	; 0x22
 8003d50:	d171      	bne.n	8003e36 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5a:	d123      	bne.n	8003da4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10e      	bne.n	8003d88 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	1c9a      	adds	r2, r3, #2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	629a      	str	r2, [r3, #40]	; 0x28
 8003d86:	e029      	b.n	8003ddc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	629a      	str	r2, [r3, #40]	; 0x28
 8003da2:	e01b      	b.n	8003ddc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6858      	ldr	r0, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	1c59      	adds	r1, r3, #1
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6291      	str	r1, [r2, #40]	; 0x28
 8003dbc:	b2c2      	uxtb	r2, r0
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	e00c      	b.n	8003ddc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	1c58      	adds	r0, r3, #1
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	6288      	str	r0, [r1, #40]	; 0x28
 8003dd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	4619      	mov	r1, r3
 8003dea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d120      	bne.n	8003e32 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0220 	bic.w	r2, r2, #32
 8003dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fd f9ab 	bl	8001184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e002      	b.n	8003e38 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
  }
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e82:	f023 030c 	bic.w	r3, r3, #12
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eae:	f040 818b 	bne.w	80041c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4ac1      	ldr	r2, [pc, #772]	; (80041bc <UART_SetConfig+0x37c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d005      	beq.n	8003ec8 <UART_SetConfig+0x88>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4abf      	ldr	r2, [pc, #764]	; (80041c0 <UART_SetConfig+0x380>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	f040 80bd 	bne.w	8004042 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ec8:	f7ff f812 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 8003ecc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	461d      	mov	r5, r3
 8003ed2:	f04f 0600 	mov.w	r6, #0
 8003ed6:	46a8      	mov	r8, r5
 8003ed8:	46b1      	mov	r9, r6
 8003eda:	eb18 0308 	adds.w	r3, r8, r8
 8003ede:	eb49 0409 	adc.w	r4, r9, r9
 8003ee2:	4698      	mov	r8, r3
 8003ee4:	46a1      	mov	r9, r4
 8003ee6:	eb18 0805 	adds.w	r8, r8, r5
 8003eea:	eb49 0906 	adc.w	r9, r9, r6
 8003eee:	f04f 0100 	mov.w	r1, #0
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003efa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003efe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f02:	4688      	mov	r8, r1
 8003f04:	4691      	mov	r9, r2
 8003f06:	eb18 0005 	adds.w	r0, r8, r5
 8003f0a:	eb49 0106 	adc.w	r1, r9, r6
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	461d      	mov	r5, r3
 8003f14:	f04f 0600 	mov.w	r6, #0
 8003f18:	196b      	adds	r3, r5, r5
 8003f1a:	eb46 0406 	adc.w	r4, r6, r6
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4623      	mov	r3, r4
 8003f22:	f7fc fa1d 	bl	8000360 <__aeabi_uldivmod>
 8003f26:	4603      	mov	r3, r0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4ba5      	ldr	r3, [pc, #660]	; (80041c4 <UART_SetConfig+0x384>)
 8003f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	461d      	mov	r5, r3
 8003f3c:	f04f 0600 	mov.w	r6, #0
 8003f40:	46a9      	mov	r9, r5
 8003f42:	46b2      	mov	sl, r6
 8003f44:	eb19 0309 	adds.w	r3, r9, r9
 8003f48:	eb4a 040a 	adc.w	r4, sl, sl
 8003f4c:	4699      	mov	r9, r3
 8003f4e:	46a2      	mov	sl, r4
 8003f50:	eb19 0905 	adds.w	r9, r9, r5
 8003f54:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f6c:	4689      	mov	r9, r1
 8003f6e:	4692      	mov	sl, r2
 8003f70:	eb19 0005 	adds.w	r0, r9, r5
 8003f74:	eb4a 0106 	adc.w	r1, sl, r6
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	461d      	mov	r5, r3
 8003f7e:	f04f 0600 	mov.w	r6, #0
 8003f82:	196b      	adds	r3, r5, r5
 8003f84:	eb46 0406 	adc.w	r4, r6, r6
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	f7fc f9e8 	bl	8000360 <__aeabi_uldivmod>
 8003f90:	4603      	mov	r3, r0
 8003f92:	460c      	mov	r4, r1
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b8b      	ldr	r3, [pc, #556]	; (80041c4 <UART_SetConfig+0x384>)
 8003f98:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	2164      	movs	r1, #100	; 0x64
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	3332      	adds	r3, #50	; 0x32
 8003faa:	4a86      	ldr	r2, [pc, #536]	; (80041c4 <UART_SetConfig+0x384>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fb8:	4498      	add	r8, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	461d      	mov	r5, r3
 8003fbe:	f04f 0600 	mov.w	r6, #0
 8003fc2:	46a9      	mov	r9, r5
 8003fc4:	46b2      	mov	sl, r6
 8003fc6:	eb19 0309 	adds.w	r3, r9, r9
 8003fca:	eb4a 040a 	adc.w	r4, sl, sl
 8003fce:	4699      	mov	r9, r3
 8003fd0:	46a2      	mov	sl, r4
 8003fd2:	eb19 0905 	adds.w	r9, r9, r5
 8003fd6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fee:	4689      	mov	r9, r1
 8003ff0:	4692      	mov	sl, r2
 8003ff2:	eb19 0005 	adds.w	r0, r9, r5
 8003ff6:	eb4a 0106 	adc.w	r1, sl, r6
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	461d      	mov	r5, r3
 8004000:	f04f 0600 	mov.w	r6, #0
 8004004:	196b      	adds	r3, r5, r5
 8004006:	eb46 0406 	adc.w	r4, r6, r6
 800400a:	461a      	mov	r2, r3
 800400c:	4623      	mov	r3, r4
 800400e:	f7fc f9a7 	bl	8000360 <__aeabi_uldivmod>
 8004012:	4603      	mov	r3, r0
 8004014:	460c      	mov	r4, r1
 8004016:	461a      	mov	r2, r3
 8004018:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <UART_SetConfig+0x384>)
 800401a:	fba3 1302 	umull	r1, r3, r3, r2
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2164      	movs	r1, #100	; 0x64
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	3332      	adds	r3, #50	; 0x32
 800402c:	4a65      	ldr	r2, [pc, #404]	; (80041c4 <UART_SetConfig+0x384>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	f003 0207 	and.w	r2, r3, #7
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4442      	add	r2, r8
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	e26f      	b.n	8004522 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004042:	f7fe ff41 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8004046:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	461d      	mov	r5, r3
 800404c:	f04f 0600 	mov.w	r6, #0
 8004050:	46a8      	mov	r8, r5
 8004052:	46b1      	mov	r9, r6
 8004054:	eb18 0308 	adds.w	r3, r8, r8
 8004058:	eb49 0409 	adc.w	r4, r9, r9
 800405c:	4698      	mov	r8, r3
 800405e:	46a1      	mov	r9, r4
 8004060:	eb18 0805 	adds.w	r8, r8, r5
 8004064:	eb49 0906 	adc.w	r9, r9, r6
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004074:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004078:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800407c:	4688      	mov	r8, r1
 800407e:	4691      	mov	r9, r2
 8004080:	eb18 0005 	adds.w	r0, r8, r5
 8004084:	eb49 0106 	adc.w	r1, r9, r6
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	461d      	mov	r5, r3
 800408e:	f04f 0600 	mov.w	r6, #0
 8004092:	196b      	adds	r3, r5, r5
 8004094:	eb46 0406 	adc.w	r4, r6, r6
 8004098:	461a      	mov	r2, r3
 800409a:	4623      	mov	r3, r4
 800409c:	f7fc f960 	bl	8000360 <__aeabi_uldivmod>
 80040a0:	4603      	mov	r3, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <UART_SetConfig+0x384>)
 80040a8:	fba3 2302 	umull	r2, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	461d      	mov	r5, r3
 80040b6:	f04f 0600 	mov.w	r6, #0
 80040ba:	46a9      	mov	r9, r5
 80040bc:	46b2      	mov	sl, r6
 80040be:	eb19 0309 	adds.w	r3, r9, r9
 80040c2:	eb4a 040a 	adc.w	r4, sl, sl
 80040c6:	4699      	mov	r9, r3
 80040c8:	46a2      	mov	sl, r4
 80040ca:	eb19 0905 	adds.w	r9, r9, r5
 80040ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040e6:	4689      	mov	r9, r1
 80040e8:	4692      	mov	sl, r2
 80040ea:	eb19 0005 	adds.w	r0, r9, r5
 80040ee:	eb4a 0106 	adc.w	r1, sl, r6
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	461d      	mov	r5, r3
 80040f8:	f04f 0600 	mov.w	r6, #0
 80040fc:	196b      	adds	r3, r5, r5
 80040fe:	eb46 0406 	adc.w	r4, r6, r6
 8004102:	461a      	mov	r2, r3
 8004104:	4623      	mov	r3, r4
 8004106:	f7fc f92b 	bl	8000360 <__aeabi_uldivmod>
 800410a:	4603      	mov	r3, r0
 800410c:	460c      	mov	r4, r1
 800410e:	461a      	mov	r2, r3
 8004110:	4b2c      	ldr	r3, [pc, #176]	; (80041c4 <UART_SetConfig+0x384>)
 8004112:	fba3 1302 	umull	r1, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2164      	movs	r1, #100	; 0x64
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a27      	ldr	r2, [pc, #156]	; (80041c4 <UART_SetConfig+0x384>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004132:	4498      	add	r8, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	461d      	mov	r5, r3
 8004138:	f04f 0600 	mov.w	r6, #0
 800413c:	46a9      	mov	r9, r5
 800413e:	46b2      	mov	sl, r6
 8004140:	eb19 0309 	adds.w	r3, r9, r9
 8004144:	eb4a 040a 	adc.w	r4, sl, sl
 8004148:	4699      	mov	r9, r3
 800414a:	46a2      	mov	sl, r4
 800414c:	eb19 0905 	adds.w	r9, r9, r5
 8004150:	eb4a 0a06 	adc.w	sl, sl, r6
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004160:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004164:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004168:	4689      	mov	r9, r1
 800416a:	4692      	mov	sl, r2
 800416c:	eb19 0005 	adds.w	r0, r9, r5
 8004170:	eb4a 0106 	adc.w	r1, sl, r6
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	461d      	mov	r5, r3
 800417a:	f04f 0600 	mov.w	r6, #0
 800417e:	196b      	adds	r3, r5, r5
 8004180:	eb46 0406 	adc.w	r4, r6, r6
 8004184:	461a      	mov	r2, r3
 8004186:	4623      	mov	r3, r4
 8004188:	f7fc f8ea 	bl	8000360 <__aeabi_uldivmod>
 800418c:	4603      	mov	r3, r0
 800418e:	460c      	mov	r4, r1
 8004190:	461a      	mov	r2, r3
 8004192:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <UART_SetConfig+0x384>)
 8004194:	fba3 1302 	umull	r1, r3, r3, r2
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	2164      	movs	r1, #100	; 0x64
 800419c:	fb01 f303 	mul.w	r3, r1, r3
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	3332      	adds	r3, #50	; 0x32
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <UART_SetConfig+0x384>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	f003 0207 	and.w	r2, r3, #7
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4442      	add	r2, r8
 80041b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041ba:	e1b2      	b.n	8004522 <UART_SetConfig+0x6e2>
 80041bc:	40011000 	.word	0x40011000
 80041c0:	40011400 	.word	0x40011400
 80041c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4ad7      	ldr	r2, [pc, #860]	; (800452c <UART_SetConfig+0x6ec>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d005      	beq.n	80041de <UART_SetConfig+0x39e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4ad6      	ldr	r2, [pc, #856]	; (8004530 <UART_SetConfig+0x6f0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	f040 80d1 	bne.w	8004380 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80041de:	f7fe fe87 	bl	8002ef0 <HAL_RCC_GetPCLK2Freq>
 80041e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	469a      	mov	sl, r3
 80041e8:	f04f 0b00 	mov.w	fp, #0
 80041ec:	46d0      	mov	r8, sl
 80041ee:	46d9      	mov	r9, fp
 80041f0:	eb18 0308 	adds.w	r3, r8, r8
 80041f4:	eb49 0409 	adc.w	r4, r9, r9
 80041f8:	4698      	mov	r8, r3
 80041fa:	46a1      	mov	r9, r4
 80041fc:	eb18 080a 	adds.w	r8, r8, sl
 8004200:	eb49 090b 	adc.w	r9, r9, fp
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004210:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004214:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004218:	4688      	mov	r8, r1
 800421a:	4691      	mov	r9, r2
 800421c:	eb1a 0508 	adds.w	r5, sl, r8
 8004220:	eb4b 0609 	adc.w	r6, fp, r9
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4619      	mov	r1, r3
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	f04f 0400 	mov.w	r4, #0
 8004236:	0094      	lsls	r4, r2, #2
 8004238:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800423c:	008b      	lsls	r3, r1, #2
 800423e:	461a      	mov	r2, r3
 8004240:	4623      	mov	r3, r4
 8004242:	4628      	mov	r0, r5
 8004244:	4631      	mov	r1, r6
 8004246:	f7fc f88b 	bl	8000360 <__aeabi_uldivmod>
 800424a:	4603      	mov	r3, r0
 800424c:	460c      	mov	r4, r1
 800424e:	461a      	mov	r2, r3
 8004250:	4bb8      	ldr	r3, [pc, #736]	; (8004534 <UART_SetConfig+0x6f4>)
 8004252:	fba3 2302 	umull	r2, r3, r3, r2
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	469b      	mov	fp, r3
 8004260:	f04f 0c00 	mov.w	ip, #0
 8004264:	46d9      	mov	r9, fp
 8004266:	46e2      	mov	sl, ip
 8004268:	eb19 0309 	adds.w	r3, r9, r9
 800426c:	eb4a 040a 	adc.w	r4, sl, sl
 8004270:	4699      	mov	r9, r3
 8004272:	46a2      	mov	sl, r4
 8004274:	eb19 090b 	adds.w	r9, r9, fp
 8004278:	eb4a 0a0c 	adc.w	sl, sl, ip
 800427c:	f04f 0100 	mov.w	r1, #0
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004288:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800428c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004290:	4689      	mov	r9, r1
 8004292:	4692      	mov	sl, r2
 8004294:	eb1b 0509 	adds.w	r5, fp, r9
 8004298:	eb4c 060a 	adc.w	r6, ip, sl
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4619      	mov	r1, r3
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	f04f 0400 	mov.w	r4, #0
 80042ae:	0094      	lsls	r4, r2, #2
 80042b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042b4:	008b      	lsls	r3, r1, #2
 80042b6:	461a      	mov	r2, r3
 80042b8:	4623      	mov	r3, r4
 80042ba:	4628      	mov	r0, r5
 80042bc:	4631      	mov	r1, r6
 80042be:	f7fc f84f 	bl	8000360 <__aeabi_uldivmod>
 80042c2:	4603      	mov	r3, r0
 80042c4:	460c      	mov	r4, r1
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b9a      	ldr	r3, [pc, #616]	; (8004534 <UART_SetConfig+0x6f4>)
 80042ca:	fba3 1302 	umull	r1, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2164      	movs	r1, #100	; 0x64
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	3332      	adds	r3, #50	; 0x32
 80042dc:	4a95      	ldr	r2, [pc, #596]	; (8004534 <UART_SetConfig+0x6f4>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e8:	4498      	add	r8, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	469b      	mov	fp, r3
 80042ee:	f04f 0c00 	mov.w	ip, #0
 80042f2:	46d9      	mov	r9, fp
 80042f4:	46e2      	mov	sl, ip
 80042f6:	eb19 0309 	adds.w	r3, r9, r9
 80042fa:	eb4a 040a 	adc.w	r4, sl, sl
 80042fe:	4699      	mov	r9, r3
 8004300:	46a2      	mov	sl, r4
 8004302:	eb19 090b 	adds.w	r9, r9, fp
 8004306:	eb4a 0a0c 	adc.w	sl, sl, ip
 800430a:	f04f 0100 	mov.w	r1, #0
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004316:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800431a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800431e:	4689      	mov	r9, r1
 8004320:	4692      	mov	sl, r2
 8004322:	eb1b 0509 	adds.w	r5, fp, r9
 8004326:	eb4c 060a 	adc.w	r6, ip, sl
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4619      	mov	r1, r3
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	f04f 0400 	mov.w	r4, #0
 800433c:	0094      	lsls	r4, r2, #2
 800433e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004342:	008b      	lsls	r3, r1, #2
 8004344:	461a      	mov	r2, r3
 8004346:	4623      	mov	r3, r4
 8004348:	4628      	mov	r0, r5
 800434a:	4631      	mov	r1, r6
 800434c:	f7fc f808 	bl	8000360 <__aeabi_uldivmod>
 8004350:	4603      	mov	r3, r0
 8004352:	460c      	mov	r4, r1
 8004354:	461a      	mov	r2, r3
 8004356:	4b77      	ldr	r3, [pc, #476]	; (8004534 <UART_SetConfig+0x6f4>)
 8004358:	fba3 1302 	umull	r1, r3, r3, r2
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	2164      	movs	r1, #100	; 0x64
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	3332      	adds	r3, #50	; 0x32
 800436a:	4a72      	ldr	r2, [pc, #456]	; (8004534 <UART_SetConfig+0x6f4>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	f003 020f 	and.w	r2, r3, #15
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4442      	add	r2, r8
 800437c:	609a      	str	r2, [r3, #8]
 800437e:	e0d0      	b.n	8004522 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004380:	f7fe fda2 	bl	8002ec8 <HAL_RCC_GetPCLK1Freq>
 8004384:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	469a      	mov	sl, r3
 800438a:	f04f 0b00 	mov.w	fp, #0
 800438e:	46d0      	mov	r8, sl
 8004390:	46d9      	mov	r9, fp
 8004392:	eb18 0308 	adds.w	r3, r8, r8
 8004396:	eb49 0409 	adc.w	r4, r9, r9
 800439a:	4698      	mov	r8, r3
 800439c:	46a1      	mov	r9, r4
 800439e:	eb18 080a 	adds.w	r8, r8, sl
 80043a2:	eb49 090b 	adc.w	r9, r9, fp
 80043a6:	f04f 0100 	mov.w	r1, #0
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043ba:	4688      	mov	r8, r1
 80043bc:	4691      	mov	r9, r2
 80043be:	eb1a 0508 	adds.w	r5, sl, r8
 80043c2:	eb4b 0609 	adc.w	r6, fp, r9
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4619      	mov	r1, r3
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	f04f 0400 	mov.w	r4, #0
 80043d8:	0094      	lsls	r4, r2, #2
 80043da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043de:	008b      	lsls	r3, r1, #2
 80043e0:	461a      	mov	r2, r3
 80043e2:	4623      	mov	r3, r4
 80043e4:	4628      	mov	r0, r5
 80043e6:	4631      	mov	r1, r6
 80043e8:	f7fb ffba 	bl	8000360 <__aeabi_uldivmod>
 80043ec:	4603      	mov	r3, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b50      	ldr	r3, [pc, #320]	; (8004534 <UART_SetConfig+0x6f4>)
 80043f4:	fba3 2302 	umull	r2, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	469b      	mov	fp, r3
 8004402:	f04f 0c00 	mov.w	ip, #0
 8004406:	46d9      	mov	r9, fp
 8004408:	46e2      	mov	sl, ip
 800440a:	eb19 0309 	adds.w	r3, r9, r9
 800440e:	eb4a 040a 	adc.w	r4, sl, sl
 8004412:	4699      	mov	r9, r3
 8004414:	46a2      	mov	sl, r4
 8004416:	eb19 090b 	adds.w	r9, r9, fp
 800441a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800442a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800442e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004432:	4689      	mov	r9, r1
 8004434:	4692      	mov	sl, r2
 8004436:	eb1b 0509 	adds.w	r5, fp, r9
 800443a:	eb4c 060a 	adc.w	r6, ip, sl
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4619      	mov	r1, r3
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	f04f 0400 	mov.w	r4, #0
 8004450:	0094      	lsls	r4, r2, #2
 8004452:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004456:	008b      	lsls	r3, r1, #2
 8004458:	461a      	mov	r2, r3
 800445a:	4623      	mov	r3, r4
 800445c:	4628      	mov	r0, r5
 800445e:	4631      	mov	r1, r6
 8004460:	f7fb ff7e 	bl	8000360 <__aeabi_uldivmod>
 8004464:	4603      	mov	r3, r0
 8004466:	460c      	mov	r4, r1
 8004468:	461a      	mov	r2, r3
 800446a:	4b32      	ldr	r3, [pc, #200]	; (8004534 <UART_SetConfig+0x6f4>)
 800446c:	fba3 1302 	umull	r1, r3, r3, r2
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	2164      	movs	r1, #100	; 0x64
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	3332      	adds	r3, #50	; 0x32
 800447e:	4a2d      	ldr	r2, [pc, #180]	; (8004534 <UART_SetConfig+0x6f4>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448a:	4498      	add	r8, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	469b      	mov	fp, r3
 8004490:	f04f 0c00 	mov.w	ip, #0
 8004494:	46d9      	mov	r9, fp
 8004496:	46e2      	mov	sl, ip
 8004498:	eb19 0309 	adds.w	r3, r9, r9
 800449c:	eb4a 040a 	adc.w	r4, sl, sl
 80044a0:	4699      	mov	r9, r3
 80044a2:	46a2      	mov	sl, r4
 80044a4:	eb19 090b 	adds.w	r9, r9, fp
 80044a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044ac:	f04f 0100 	mov.w	r1, #0
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044c0:	4689      	mov	r9, r1
 80044c2:	4692      	mov	sl, r2
 80044c4:	eb1b 0509 	adds.w	r5, fp, r9
 80044c8:	eb4c 060a 	adc.w	r6, ip, sl
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4619      	mov	r1, r3
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	f04f 0400 	mov.w	r4, #0
 80044de:	0094      	lsls	r4, r2, #2
 80044e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044e4:	008b      	lsls	r3, r1, #2
 80044e6:	461a      	mov	r2, r3
 80044e8:	4623      	mov	r3, r4
 80044ea:	4628      	mov	r0, r5
 80044ec:	4631      	mov	r1, r6
 80044ee:	f7fb ff37 	bl	8000360 <__aeabi_uldivmod>
 80044f2:	4603      	mov	r3, r0
 80044f4:	460c      	mov	r4, r1
 80044f6:	461a      	mov	r2, r3
 80044f8:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <UART_SetConfig+0x6f4>)
 80044fa:	fba3 1302 	umull	r1, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2164      	movs	r1, #100	; 0x64
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	; 0x32
 800450c:	4a09      	ldr	r2, [pc, #36]	; (8004534 <UART_SetConfig+0x6f4>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4442      	add	r2, r8
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	e7ff      	b.n	8004522 <UART_SetConfig+0x6e2>
 8004522:	bf00      	nop
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452c:	40011000 	.word	0x40011000
 8004530:	40011400 	.word	0x40011400
 8004534:	51eb851f 	.word	0x51eb851f

08004538 <ICharArrayPutOneFromIsr>:
	}
}


void ICharArrayPutOneFromIsr(charArrayBufferDef* const ibuffer, uint8 data)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	70fb      	strb	r3, [r7, #3]
	if(ibuffer != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d02c      	beq.n	80045a4 <ICharArrayPutOneFromIsr+0x6c>
	{
		OsAbsEnterCriticalSectionFromIsr();
 800454a:	f000 fedd 	bl	8005308 <OsAbsEnterCriticalSectionFromIsr>
		//Copy data to buffer
		*((uint8 *)((uint32)ibuffer->data + ibuffer->tail++)) = data;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	4618      	mov	r0, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	1c59      	adds	r1, r3, #1
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6051      	str	r1, [r2, #4]
 800455e:	4403      	add	r3, r0
 8004560:	461a      	mov	r2, r3
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	7013      	strb	r3, [r2, #0]

		if(ibuffer->tail >= ibuffer->length)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	429a      	cmp	r2, r3
 8004570:	d302      	bcc.n	8004578 <ICharArrayPutOneFromIsr+0x40>
		{
			ibuffer->tail = 0;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	605a      	str	r2, [r3, #4]
		}

		if(ibuffer->head == ibuffer->tail)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	429a      	cmp	r2, r3
 8004582:	d10d      	bne.n	80045a0 <ICharArrayPutOneFromIsr+0x68>
		{
			ibuffer->head++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	601a      	str	r2, [r3, #0]
			if(ibuffer->head >= ibuffer->length)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <ICharArrayPutOneFromIsr+0x68>
			{
				ibuffer->head = 0;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
			}
		}

		OsAbsExitCriticalSectionFromIsr();
 80045a0:	f000 feba 	bl	8005318 <OsAbsExitCriticalSectionFromIsr>
	}
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <ICharArrayHaveNext>:

BOOL ICharArrayHaveNext(charArrayBufferDef* const ibuffer)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	BOOL res = False;
 80045b4:	2300      	movs	r3, #0
 80045b6:	73fb      	strb	r3, [r7, #15]

	if(ibuffer != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <ICharArrayHaveNext+0x22>
	{
		if(ibuffer->head != ibuffer->tail)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d001      	beq.n	80045ce <ICharArrayHaveNext+0x22>
		{
			res = True;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
		}
	}

	return res;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <ICharArrayGetNextOne>:

BOOL ICharArrayGetNextOne(charArrayBufferDef* const ibuffer, uint8 * pData)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
	BOOL res = False;
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
	if(!pData)return res;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <ICharArrayGetNextOne+0x18>
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	e024      	b.n	800463e <ICharArrayGetNextOne+0x62>

	if(ibuffer != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d020      	beq.n	800463c <ICharArrayGetNextOne+0x60>
	{
		OsAbsEnterCriticalSection();
 80045fa:	f000 fe75 	bl	80052e8 <OsAbsEnterCriticalSection>
		if(ibuffer->head != ibuffer->tail)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d016      	beq.n	8004638 <ICharArrayGetNextOne+0x5c>
		{
			//Copy data to destination
			*pData = *(uint8 *)((uint32)ibuffer->data + ibuffer->head++);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	4618      	mov	r0, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	1c59      	adds	r1, r3, #1
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6011      	str	r1, [r2, #0]
 800461a:	4403      	add	r3, r0
 800461c:	781a      	ldrb	r2, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	701a      	strb	r2, [r3, #0]
			res = True;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]

			//Reset head pointer if reached to end
			if(ibuffer->head >= ibuffer->length)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <ICharArrayGetNextOne+0x5c>
			{
				ibuffer->head = 0;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
			}
		}

		OsAbsExitCriticalSection();
 8004638:	f000 fe5e 	bl	80052f8 <OsAbsExitCriticalSection>
	}

	return res;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <ICharArrayGetMany>:

uint32 ICharArrayGetMany(charArrayBufferDef* const ibuffer, const uint8 *dest, uint32 size)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
	uint32 dataRead = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]

	if (!size || !ibuffer)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <ICharArrayGetMany+0x1c>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <ICharArrayGetMany+0x20>
		return 0;
 8004662:	2300      	movs	r3, #0
 8004664:	e016      	b.n	8004694 <ICharArrayGetMany+0x4e>

	uint8 *pDest = (uint8*) dest;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	613b      	str	r3, [r7, #16]
	while (ICharArrayGetNextOne(ibuffer, pDest)) {
 800466a:	e009      	b.n	8004680 <ICharArrayGetMany+0x3a>
		dataRead += 1;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3301      	adds	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
		pDest += 1;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3301      	adds	r3, #1
 8004676:	613b      	str	r3, [r7, #16]

		if (dataRead >= size) {
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	429a      	cmp	r2, r3
 800467e:	d207      	bcs.n	8004690 <ICharArrayGetMany+0x4a>
	while (ICharArrayGetNextOne(ibuffer, pDest)) {
 8004680:	6939      	ldr	r1, [r7, #16]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff ffaa 	bl	80045dc <ICharArrayGetNextOne>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1ee      	bne.n	800466c <ICharArrayGetMany+0x26>
 800468e:	e000      	b.n	8004692 <ICharArrayGetMany+0x4c>
			break;
 8004690:	bf00      	nop
		}
	}

	return dataRead;
 8004692:	697b      	ldr	r3, [r7, #20]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <__NVIC_EnableIRQ>:
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	db0b      	blt.n	80046c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	f003 021f 	and.w	r2, r3, #31
 80046b4:	4907      	ldr	r1, [pc, #28]	; (80046d4 <__NVIC_EnableIRQ+0x38>)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2001      	movs	r0, #1
 80046be:	fa00 f202 	lsl.w	r2, r0, r2
 80046c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	e000e100 	.word	0xe000e100

080046d8 <__NVIC_DisableIRQ>:
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	db10      	blt.n	800470c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	f003 021f 	and.w	r2, r3, #31
 80046f0:	4909      	ldr	r1, [pc, #36]	; (8004718 <__NVIC_DisableIRQ+0x40>)
 80046f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2001      	movs	r0, #1
 80046fa:	fa00 f202 	lsl.w	r2, r0, r2
 80046fe:	3320      	adds	r3, #32
 8004700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004704:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004708:	f3bf 8f6f 	isb	sy
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	e000e100 	.word	0xe000e100

0800471c <IComDriverXferDoneCallbackIrq>:

static void UartStartReceive(const iComInnerObjectDef *com);
static void clearFlags(UART_HandleTypeDef *huart);
/*************************local methods********************************/
/*串口 发送完成回调*/
void IComDriverXferDoneCallbackIrq(UART_HandleTypeDef *huart) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	uint32 id;

	for (id = 0; id < totalObject_Item; id++) {
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	e019      	b.n	800475e <IComDriverXferDoneCallbackIrq+0x42>
		if (iComInnerObjects[id].comHandle == huart) {
 800472a:	4a12      	ldr	r2, [pc, #72]	; (8004774 <IComDriverXferDoneCallbackIrq+0x58>)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2154      	movs	r1, #84	; 0x54
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	4413      	add	r3, r2
 8004736:	333c      	adds	r3, #60	; 0x3c
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	429a      	cmp	r2, r3
 800473e:	d10b      	bne.n	8004758 <IComDriverXferDoneCallbackIrq+0x3c>
			tos_sem_post(&iComInnerObjects[id].semTxDone);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2254      	movs	r2, #84	; 0x54
 8004744:	fb02 f303 	mul.w	r3, r2, r3
 8004748:	3310      	adds	r3, #16
 800474a:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <IComDriverXferDoneCallbackIrq+0x58>)
 800474c:	4413      	add	r3, r2
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f004 fa5f 	bl	8008c14 <tos_sem_post>
			break;
 8004756:	e008      	b.n	800476a <IComDriverXferDoneCallbackIrq+0x4e>
	for (id = 0; id < totalObject_Item; id++) {
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <IComDriverXferDoneCallbackIrq+0x5c>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4293      	cmp	r3, r2
 8004768:	d3df      	bcc.n	800472a <IComDriverXferDoneCallbackIrq+0xe>
		}
	}
}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000214 	.word	0x20000214
 8004778:	200005d0 	.word	0x200005d0

0800477c <IComUartErrorCallbackIrq>:
void IComUartErrorCallbackIrq(UART_HandleTypeDef *huart) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	//Find instance first
	uint16 id;

	for (id = 0; id < totalObject_Item; id++) {
 8004784:	2300      	movs	r3, #0
 8004786:	83fb      	strh	r3, [r7, #30]
 8004788:	e06d      	b.n	8004866 <IComUartErrorCallbackIrq+0xea>
		if (iComInnerObjects[id].comHandle == huart) {
 800478a:	8bfb      	ldrh	r3, [r7, #30]
 800478c:	4a3b      	ldr	r2, [pc, #236]	; (800487c <IComUartErrorCallbackIrq+0x100>)
 800478e:	2154      	movs	r1, #84	; 0x54
 8004790:	fb01 f303 	mul.w	r3, r1, r3
 8004794:	4413      	add	r3, r2
 8004796:	333c      	adds	r3, #60	; 0x3c
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	d15f      	bne.n	8004860 <IComUartErrorCallbackIrq+0xe4>
			//Enabel receive
			if (huart->ErrorCode) {
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <IComUartErrorCallbackIrq+0x40>
				iComInnerObjects[id].errorCode = huart->ErrorCode;
 80047a8:	8bfb      	ldrh	r3, [r7, #30]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047ae:	4933      	ldr	r1, [pc, #204]	; (800487c <IComUartErrorCallbackIrq+0x100>)
 80047b0:	2054      	movs	r0, #84	; 0x54
 80047b2:	fb00 f303 	mul.w	r3, r0, r3
 80047b6:	440b      	add	r3, r1
 80047b8:	3308      	adds	r3, #8
 80047ba:	601a      	str	r2, [r3, #0]
			}

			if (__HAL_UART_GET_FLAG(huart, USART_SR_PE)) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10a      	bne.n	80047e0 <IComUartErrorCallbackIrq+0x64>
				//Parity Error
				__HAL_UART_CLEAR_PEFLAG(huart);
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	69bb      	ldr	r3, [r7, #24]
			}

			if (__HAL_UART_GET_FLAG(huart, USART_SR_FE)) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d10a      	bne.n	8004804 <IComUartErrorCallbackIrq+0x88>
				//Framing Error
				__HAL_UART_CLEAR_FEFLAG(huart);
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	697b      	ldr	r3, [r7, #20]
			}

			if (__HAL_UART_GET_FLAG(huart, USART_SR_NE)) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b04      	cmp	r3, #4
 8004810:	d10a      	bne.n	8004828 <IComUartErrorCallbackIrq+0xac>
				//Noise Error Flag
				__HAL_UART_CLEAR_NEFLAG(huart);
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
			}

			if (__HAL_UART_GET_FLAG(huart, USART_SR_ORE)) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b08      	cmp	r3, #8
 8004834:	d10a      	bne.n	800484c <IComUartErrorCallbackIrq+0xd0>
				//溢出中断
				__HAL_UART_CLEAR_OREFLAG(huart);
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	68fb      	ldr	r3, [r7, #12]
			}

			UartStartReceive(&iComInnerObjects[id]);
 800484c:	8bfb      	ldrh	r3, [r7, #30]
 800484e:	2254      	movs	r2, #84	; 0x54
 8004850:	fb02 f303 	mul.w	r3, r2, r3
 8004854:	4a09      	ldr	r2, [pc, #36]	; (800487c <IComUartErrorCallbackIrq+0x100>)
 8004856:	4413      	add	r3, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f000 f8b9 	bl	80049d0 <UartStartReceive>
			break;
 800485e:	e008      	b.n	8004872 <IComUartErrorCallbackIrq+0xf6>
	for (id = 0; id < totalObject_Item; id++) {
 8004860:	8bfb      	ldrh	r3, [r7, #30]
 8004862:	3301      	adds	r3, #1
 8004864:	83fb      	strh	r3, [r7, #30]
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <IComUartErrorCallbackIrq+0x104>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	8bfa      	ldrh	r2, [r7, #30]
 800486e:	429a      	cmp	r2, r3
 8004870:	d38b      	bcc.n	800478a <IComUartErrorCallbackIrq+0xe>
		}
	}
}
 8004872:	bf00      	nop
 8004874:	3720      	adds	r7, #32
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000214 	.word	0x20000214
 8004880:	200005d0 	.word	0x200005d0

08004884 <IComUartRxCallbackIrq>:

static uint32_t totalCount1;
static uint32_t totalCount2;
static uint32_t totalCount3;
void __inline__ IComUartRxCallbackIrq(UART_HandleTypeDef *huart) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a30      	ldr	r2, [pc, #192]	; (8004950 <IComUartRxCallbackIrq+0xcc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d111      	bne.n	80048b8 <IComUartRxCallbackIrq+0x34>
		totalCount1++;
 8004894:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <IComUartRxCallbackIrq+0xd0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <IComUartRxCallbackIrq+0xd0>)
 800489c:	6013      	str	r3, [r2, #0]
		ICharArrayPutOneFromIsr(&iComInnerObjects[2].buffer, *(uint8 *)(--huart->pRxBuffPtr));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	1e5a      	subs	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	4619      	mov	r1, r3
 80048b0:	4829      	ldr	r0, [pc, #164]	; (8004958 <IComUartRxCallbackIrq+0xd4>)
 80048b2:	f7ff fe41 	bl	8004538 <ICharArrayPutOneFromIsr>
 80048b6:	e02a      	b.n	800490e <IComUartRxCallbackIrq+0x8a>
	}
	else if(huart == &huart2){
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a28      	ldr	r2, [pc, #160]	; (800495c <IComUartRxCallbackIrq+0xd8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d111      	bne.n	80048e4 <IComUartRxCallbackIrq+0x60>
		totalCount2++;
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <IComUartRxCallbackIrq+0xdc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	4a26      	ldr	r2, [pc, #152]	; (8004960 <IComUartRxCallbackIrq+0xdc>)
 80048c8:	6013      	str	r3, [r2, #0]
		ICharArrayPutOneFromIsr(&iComInnerObjects[1].buffer, *(uint8 *)(--huart->pRxBuffPtr));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	1e5a      	subs	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	4821      	ldr	r0, [pc, #132]	; (8004964 <IComUartRxCallbackIrq+0xe0>)
 80048de:	f7ff fe2b 	bl	8004538 <ICharArrayPutOneFromIsr>
 80048e2:	e014      	b.n	800490e <IComUartRxCallbackIrq+0x8a>
	}
	else if(huart == &huart6){
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a20      	ldr	r2, [pc, #128]	; (8004968 <IComUartRxCallbackIrq+0xe4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d110      	bne.n	800490e <IComUartRxCallbackIrq+0x8a>
		totalCount3++;
 80048ec:	4b1f      	ldr	r3, [pc, #124]	; (800496c <IComUartRxCallbackIrq+0xe8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3301      	adds	r3, #1
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <IComUartRxCallbackIrq+0xe8>)
 80048f4:	6013      	str	r3, [r2, #0]
		ICharArrayPutOneFromIsr(&iComInnerObjects[3].buffer, *(uint8 *)(--huart->pRxBuffPtr));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	4619      	mov	r1, r3
 8004908:	4819      	ldr	r0, [pc, #100]	; (8004970 <IComUartRxCallbackIrq+0xec>)
 800490a:	f7ff fe15 	bl	8004538 <ICharArrayPutOneFromIsr>
	}

    huart->RxXferSize = 1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = 1;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	85da      	strh	r2, [r3, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2222      	movs	r2, #34	; 0x22
 8004924:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004946:	60da      	str	r2, [r3, #12]
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20003090 	.word	0x20003090
 8004954:	200005d4 	.word	0x200005d4
 8004958:	200002e0 	.word	0x200002e0
 800495c:	20003150 	.word	0x20003150
 8004960:	200005d8 	.word	0x200005d8
 8004964:	2000028c 	.word	0x2000028c
 8004968:	20003110 	.word	0x20003110
 800496c:	200005dc 	.word	0x200005dc
 8004970:	20000334 	.word	0x20000334

08004974 <FindIComObject>:

static iComInnerObjectDef* FindIComObject(const iComObjectDef *iCom) {
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	uint16 id;

	for (id = 0; id < totalObject_Item; id++) {
 800497c:	2300      	movs	r3, #0
 800497e:	81fb      	strh	r3, [r7, #14]
 8004980:	e015      	b.n	80049ae <FindIComObject+0x3a>
		if (iComInnerObjects[id].comId == iCom->com) {
 8004982:	89fb      	ldrh	r3, [r7, #14]
 8004984:	4a10      	ldr	r2, [pc, #64]	; (80049c8 <FindIComObject+0x54>)
 8004986:	2154      	movs	r1, #84	; 0x54
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	3301      	adds	r3, #1
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d106      	bne.n	80049a8 <FindIComObject+0x34>
			return &iComInnerObjects[id];
 800499a:	89fb      	ldrh	r3, [r7, #14]
 800499c:	2254      	movs	r2, #84	; 0x54
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <FindIComObject+0x54>)
 80049a4:	4413      	add	r3, r2
 80049a6:	e009      	b.n	80049bc <FindIComObject+0x48>
	for (id = 0; id < totalObject_Item; id++) {
 80049a8:	89fb      	ldrh	r3, [r7, #14]
 80049aa:	3301      	adds	r3, #1
 80049ac:	81fb      	strh	r3, [r7, #14]
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <FindIComObject+0x58>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	89fa      	ldrh	r2, [r7, #14]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3e3      	bcc.n	8004982 <FindIComObject+0xe>
		}
	}

	return NULL;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	20000214 	.word	0x20000214
 80049cc:	200005d0 	.word	0x200005d0

080049d0 <UartStartReceive>:

static void UartStartReceive(const iComInnerObjectDef *com) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	if (com) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <UartStartReceive+0x2a>
		HAL_UART_Receive_IT((UART_HandleTypeDef*) com->comHandle,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
				(uint8*) &com->rxByte, 1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3302      	adds	r3, #2
		HAL_UART_Receive_IT((UART_HandleTypeDef*) com->comHandle,
 80049e6:	2201      	movs	r2, #1
 80049e8:	4619      	mov	r1, r3
 80049ea:	f7fe fe5c 	bl	80036a6 <HAL_UART_Receive_IT>
		//选择中断源，抢占优先级，响应优先级
//		HAL_NVIC_SetPriority(com->irqHandleId, com->priority, 0);
		//使能中断
		NVIC_EnableIRQ(com->irqHandleId);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fe51 	bl	800469c <__NVIC_EnableIRQ>
	}
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <IComConstruct>:

/*************************Pulic methods********************************/

iComStatus IComConstruct(const iComObjectDef *iCom) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	iComStatus res = ICOM_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	77fb      	strb	r3, [r7, #31]
	uint16 id = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	83bb      	strh	r3, [r7, #28]
	uint32 bitrate = 0xffffffff;
 8004a14:	f04f 33ff 	mov.w	r3, #4294967295
 8004a18:	61bb      	str	r3, [r7, #24]

	totalObject_Item = ARRY_LEN(iComInnerObjects, iComInnerObjectDef);
 8004a1a:	4b82      	ldr	r3, [pc, #520]	; (8004c24 <IComConstruct+0x220>)
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	701a      	strb	r2, [r3, #0]

	if (iCom) {
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d022      	beq.n	8004a6c <IComConstruct+0x68>
		for (id = 0; id < ARRY_LEN(biterateMap, bitrateMapDef); id++) {
 8004a26:	2300      	movs	r3, #0
 8004a28:	83bb      	strh	r3, [r7, #28]
 8004a2a:	e011      	b.n	8004a50 <IComConstruct+0x4c>
			if (biterateMap[id].bitrateName == iCom->bitrate) {
 8004a2c:	8bbb      	ldrh	r3, [r7, #28]
 8004a2e:	4a7e      	ldr	r2, [pc, #504]	; (8004c28 <IComConstruct+0x224>)
 8004a30:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	789b      	ldrb	r3, [r3, #2]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d106      	bne.n	8004a4a <IComConstruct+0x46>
				//Found prescaler
				bitrate = biterateMap[id].bitrateValue;
 8004a3c:	8bbb      	ldrh	r3, [r7, #28]
 8004a3e:	4a7a      	ldr	r2, [pc, #488]	; (8004c28 <IComConstruct+0x224>)
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4413      	add	r3, r2
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	61bb      	str	r3, [r7, #24]
				break;
 8004a48:	e005      	b.n	8004a56 <IComConstruct+0x52>
		for (id = 0; id < ARRY_LEN(biterateMap, bitrateMapDef); id++) {
 8004a4a:	8bbb      	ldrh	r3, [r7, #28]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	83bb      	strh	r3, [r7, #28]
 8004a50:	8bbb      	ldrh	r3, [r7, #28]
 8004a52:	2b07      	cmp	r3, #7
 8004a54:	d9ea      	bls.n	8004a2c <IComConstruct+0x28>
			}
		}

		if (id >= ARRY_LEN(biterateMap, bitrateMapDef)) {
 8004a56:	8bbb      	ldrh	r3, [r7, #28]
 8004a58:	2b07      	cmp	r3, #7
 8004a5a:	d90b      	bls.n	8004a74 <IComConstruct+0x70>
			iDebugPrint(DBG_LEV_ERROR, "iCom bitrate not found: %d\r\n",
					iCom->bitrate);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	789b      	ldrb	r3, [r3, #2]
			iDebugPrint(DBG_LEV_ERROR, "iCom bitrate not found: %d\r\n",
 8004a60:	461a      	mov	r2, r3
 8004a62:	4972      	ldr	r1, [pc, #456]	; (8004c2c <IComConstruct+0x228>)
 8004a64:	2005      	movs	r0, #5
 8004a66:	f000 fba9 	bl	80051bc <iDebugPrint>
 8004a6a:	e003      	b.n	8004a74 <IComConstruct+0x70>
		}
	} else {
		iDebugPrint(DBG_LEV_ERROR, "iCom construct null error\r\n");
 8004a6c:	4970      	ldr	r1, [pc, #448]	; (8004c30 <IComConstruct+0x22c>)
 8004a6e:	2005      	movs	r0, #5
 8004a70:	f000 fba4 	bl	80051bc <iDebugPrint>
	}

	if (bitrate != 0xffffffff) {
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	f000 817e 	beq.w	8004d7a <IComConstruct+0x376>
		for (id = 0; id < totalObject_Item; id++) {
 8004a7e:	2300      	movs	r3, #0
 8004a80:	83bb      	strh	r3, [r7, #28]
 8004a82:	e163      	b.n	8004d4c <IComConstruct+0x348>
			if (iCom->com == iComInnerObjects[id].comId
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	781a      	ldrb	r2, [r3, #0]
 8004a88:	8bbb      	ldrh	r3, [r7, #28]
 8004a8a:	496a      	ldr	r1, [pc, #424]	; (8004c34 <IComConstruct+0x230>)
 8004a8c:	2054      	movs	r0, #84	; 0x54
 8004a8e:	fb00 f303 	mul.w	r3, r0, r3
 8004a92:	440b      	add	r3, r1
 8004a94:	3301      	adds	r3, #1
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	f040 8154 	bne.w	8004d46 <IComConstruct+0x342>
					&& iComInnerObjects[id].Inited != True) {
 8004a9e:	8bbb      	ldrh	r3, [r7, #28]
 8004aa0:	4a64      	ldr	r2, [pc, #400]	; (8004c34 <IComConstruct+0x230>)
 8004aa2:	2154      	movs	r1, #84	; 0x54
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	f000 814a 	beq.w	8004d46 <IComConstruct+0x342>
				iComInnerObjectDef *pObject = &iComInnerObjects[id];
 8004ab2:	8bbb      	ldrh	r3, [r7, #28]
 8004ab4:	2254      	movs	r2, #84	; 0x54
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	4a5e      	ldr	r2, [pc, #376]	; (8004c34 <IComConstruct+0x230>)
 8004abc:	4413      	add	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

				pObject->GotOneFrameFromIrqCallback = iCom->GotFrameFromIrq;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	651a      	str	r2, [r3, #80]	; 0x50

//				pObject->xferUseInterrupt =
//						iCom->xferMode == COM_XFER_INTERRUPT ? 1 : 0;
				pObject->xferUseMode = iCom->xferMode ;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	785a      	ldrb	r2, [r3, #1]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	711a      	strb	r2, [r3, #4]

				if (K_ERR_NONE != tos_sem_create(&pObject->semTxDone, 0)) {
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	3314      	adds	r3, #20
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f003 ffff 	bl	8008ada <tos_sem_create>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d006      	beq.n	8004af0 <IComConstruct+0xec>
					iDebugPrint(DBG_LEV_ERROR, "TxDone sem err\r\n");
 8004ae2:	4955      	ldr	r1, [pc, #340]	; (8004c38 <IComConstruct+0x234>)
 8004ae4:	2005      	movs	r0, #5
 8004ae6:	f000 fb69 	bl	80051bc <iDebugPrint>
					res = ICOM_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	77fb      	strb	r3, [r7, #31]
					goto ICOM_ERR_MUTEX;
 8004aee:	e145      	b.n	8004d7c <IComConstruct+0x378>
				}

				pObject->mutexTxLock = OsAbsMutexCreate();
 8004af0:	f000 fc1a 	bl	8005328 <OsAbsMutexCreate>
 8004af4:	4602      	mov	r2, r0
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	611a      	str	r2, [r3, #16]
				if (pObject->mutexTxLock == NULL) {
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d107      	bne.n	8004b12 <IComConstruct+0x10e>
					OsAbsMutexDestory(pObject->mutexTxLock);
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fc2a 	bl	8005360 <OsAbsMutexDestory>
					res = ICOM_MUTEX_CREATE_ERROR;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	77fb      	strb	r3, [r7, #31]
					goto ICOM_ERR_MUTEX;
 8004b10:	e134      	b.n	8004d7c <IComConstruct+0x378>
				}

				//Init buffer
				pObject->buffer.length = iCom->bufferLength;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	62da      	str	r2, [r3, #44]	; 0x2c
				pObject->buffer.data = OsAbsMalloc(pObject->buffer.length);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fbcb 	bl	80052ba <OsAbsMalloc>
 8004b24:	4602      	mov	r2, r0
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
				pObject->buffer.head = 0;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24
				pObject->buffer.tail = 0;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2200      	movs	r2, #0
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
				if (pObject->buffer.data == NULL) {
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <IComConstruct+0x146>
					iDebugPrint(DBG_LEV_WARN,
 8004b3e:	8bbb      	ldrh	r3, [r7, #28]
 8004b40:	461a      	mov	r2, r3
 8004b42:	493e      	ldr	r1, [pc, #248]	; (8004c3c <IComConstruct+0x238>)
 8004b44:	2004      	movs	r0, #4
 8004b46:	f000 fb39 	bl	80051bc <iDebugPrint>
							"iCom rx fifo null with com: %d\r\n", id);
				}

				pObject->priority = iCom->priority + USART_PRIORITY_BASE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	1d5a      	adds	r2, r3, #5
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	60da      	str	r2, [r3, #12]
				pObject->priority &= 0xffff;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	60da      	str	r2, [r3, #12]
				if(pObject->priority <= USART_PRIORITY_BASE){
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b05      	cmp	r3, #5
 8004b64:	d802      	bhi.n	8004b6c <IComConstruct+0x168>
					//优先级过高,使用默认优先级
					pObject->priority = USART_PRIORITY_BASE;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2205      	movs	r2, #5
 8004b6a:	60da      	str	r2, [r3, #12]
				}

				pObject->comHandle->Instance = pObject->uartInstance;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b74:	601a      	str	r2, [r3, #0]
				pObject->comHandle->Init.BaudRate = bitrate;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	605a      	str	r2, [r3, #4]
				pObject->comHandle->Init.WordLength = UART_WORDLENGTH_8B;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	2200      	movs	r2, #0
 8004b84:	609a      	str	r2, [r3, #8]
				pObject->comHandle->Init.StopBits = UART_STOPBITS_1;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60da      	str	r2, [r3, #12]
				pObject->comHandle->Init.Parity = UART_PARITY_NONE;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	2200      	movs	r2, #0
 8004b94:	611a      	str	r2, [r3, #16]
				pObject->comHandle->Init.Mode = UART_MODE_TX_RX;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	220c      	movs	r2, #12
 8004b9c:	615a      	str	r2, [r3, #20]
				pObject->comHandle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	619a      	str	r2, [r3, #24]
				pObject->comHandle->Init.OverSampling = UART_OVERSAMPLING_16;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	2200      	movs	r2, #0
 8004bac:	61da      	str	r2, [r3, #28]

				pObject->comHandle->pRxBuffPtr = &pObject->rxByte;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	3202      	adds	r2, #2
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28
				pObject->comHandle->RxXferSize =
						pObject->comHandle->RxXferCount = 1;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
				pObject->comHandle->RxXferSize =
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	859a      	strh	r2, [r3, #44]	; 0x2c
				pObject->comHandle->pTxBuffPtr = &pObject->txByte;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	3203      	adds	r2, #3
 8004bd2:	621a      	str	r2, [r3, #32]
				pObject->comHandle->TxXferSize =
						pObject->comHandle->TxXferCount = 1;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd8:	2101      	movs	r1, #1
 8004bda:	460a      	mov	r2, r1
 8004bdc:	84da      	strh	r2, [r3, #38]	; 0x26
				pObject->comHandle->TxXferSize =
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	460a      	mov	r2, r1
 8004be4:	849a      	strh	r2, [r3, #36]	; 0x24

				if (HAL_UART_Init(pObject->comHandle) == HAL_OK) {
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fc04 	bl	80033f8 <HAL_UART_Init>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 80a0 	bne.w	8004d38 <IComConstruct+0x334>
					res = ICOM_SUCCESS;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	77fb      	strb	r3, [r7, #31]

					if(pObject->xferUseMode == COM_XFER_INTERRUPT){
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	791b      	ldrb	r3, [r3, #4]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d11d      	bne.n	8004c40 <IComConstruct+0x23c>
						//选择中断源，抢占优先级，响应优先级
						HAL_NVIC_SetPriority(pObject->irqHandleId, pObject->priority, 0);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f993 0034 	ldrsb.w	r0, [r3, #52]	; 0x34
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	4619      	mov	r1, r3
 8004c12:	f7fc fe81 	bl	8001918 <HAL_NVIC_SetPriority>
						//使能中断
						NVIC_EnableIRQ(pObject->irqHandleId);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fd3d 	bl	800469c <__NVIC_EnableIRQ>
				} else {
					iDebugPrint(DBG_LEV_ERROR,
							"iCom HAL_init failed with com: %d\r\n", id);
				}

				break;
 8004c22:	e09b      	b.n	8004d5c <IComConstruct+0x358>
 8004c24:	200005d0 	.word	0x200005d0
 8004c28:	0800ce5c 	.word	0x0800ce5c
 8004c2c:	0800c9bc 	.word	0x0800c9bc
 8004c30:	0800c9dc 	.word	0x0800c9dc
 8004c34:	20000214 	.word	0x20000214
 8004c38:	0800c9f8 	.word	0x0800c9f8
 8004c3c:	0800ca0c 	.word	0x0800ca0c
					if(pObject->xferUseMode == COM_XFER_DMA){
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	791b      	ldrb	r3, [r3, #4]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	f040 8089 	bne.w	8004d5c <IComConstruct+0x358>
						__HAL_RCC_DMA2_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	4b4e      	ldr	r3, [pc, #312]	; (8004d88 <IComConstruct+0x384>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4a4d      	ldr	r2, [pc, #308]	; (8004d88 <IComConstruct+0x384>)
 8004c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c58:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5a:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <IComConstruct+0x384>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	693b      	ldr	r3, [r7, #16]
						__HAL_RCC_DMA1_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	4b47      	ldr	r3, [pc, #284]	; (8004d88 <IComConstruct+0x384>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	4a46      	ldr	r2, [pc, #280]	; (8004d88 <IComConstruct+0x384>)
 8004c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c74:	6313      	str	r3, [r2, #48]	; 0x30
 8004c76:	4b44      	ldr	r3, [pc, #272]	; (8004d88 <IComConstruct+0x384>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
						HAL_NVIC_SetPriority(pObject->dma_irqHandleId, pObject->priority, 0);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f993 004c 	ldrsb.w	r0, [r3, #76]	; 0x4c
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f7fc fe42 	bl	8001918 <HAL_NVIC_SetPriority>
						HAL_NVIC_EnableIRQ(pObject->dma_irqHandleId);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fc fe58 	bl	8001950 <HAL_NVIC_EnableIRQ>
						pObject->dma_usart_tx->Instance = pObject->dma_stream;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ca8:	601a      	str	r2, [r3, #0]
						pObject->dma_usart_tx->Init.Channel = pObject->dma_channel;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cb2:	605a      	str	r2, [r3, #4]
						pObject->dma_usart_tx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb8:	2240      	movs	r2, #64	; 0x40
 8004cba:	609a      	str	r2, [r3, #8]
						pObject->dma_usart_tx->Init.PeriphInc = DMA_PINC_DISABLE;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	60da      	str	r2, [r3, #12]
						pObject->dma_usart_tx->Init.MemInc = DMA_MINC_ENABLE;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ccc:	611a      	str	r2, [r3, #16]
						pObject->dma_usart_tx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	615a      	str	r2, [r3, #20]
						pObject->dma_usart_tx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cda:	2200      	movs	r2, #0
 8004cdc:	619a      	str	r2, [r3, #24]
						pObject->dma_usart_tx->Init.Mode = DMA_NORMAL;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61da      	str	r2, [r3, #28]
						pObject->dma_usart_tx->Init.Priority = pObject->priority == USART_PRIORITY_BASE ?
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	68db      	ldr	r3, [r3, #12]
								DMA_PRIORITY_VERY_HIGH : DMA_PRIORITY_MEDIUM;
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	d102      	bne.n	8004cf4 <IComConstruct+0x2f0>
 8004cee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004cf2:	e001      	b.n	8004cf8 <IComConstruct+0x2f4>
 8004cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
						pObject->dma_usart_tx->Init.Priority = pObject->priority == USART_PRIORITY_BASE ?
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfc:	621a      	str	r2, [r3, #32]
						pObject->dma_usart_tx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d02:	2200      	movs	r2, #0
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24
						if (HAL_DMA_Init(pObject->dma_usart_tx) != HAL_OK) {
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fc fe3c 	bl	8001988 <HAL_DMA_Init>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <IComConstruct+0x31e>
							iDebugPrint(DBG_LEV_WARN,
 8004d16:	8bbb      	ldrh	r3, [r7, #28]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	491c      	ldr	r1, [pc, #112]	; (8004d8c <IComConstruct+0x388>)
 8004d1c:	2004      	movs	r0, #4
 8004d1e:	f000 fa4d 	bl	80051bc <iDebugPrint>
							 pObject->comHandle->hdmatx = pObject->dma_usart_tx;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
							 pObject->dma_usart_tx->Parent = pObject->comHandle;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8004d36:	e011      	b.n	8004d5c <IComConstruct+0x358>
					iDebugPrint(DBG_LEV_ERROR,
 8004d38:	8bbb      	ldrh	r3, [r7, #28]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4914      	ldr	r1, [pc, #80]	; (8004d90 <IComConstruct+0x38c>)
 8004d3e:	2005      	movs	r0, #5
 8004d40:	f000 fa3c 	bl	80051bc <iDebugPrint>
				break;
 8004d44:	e00a      	b.n	8004d5c <IComConstruct+0x358>
		for (id = 0; id < totalObject_Item; id++) {
 8004d46:	8bbb      	ldrh	r3, [r7, #28]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	83bb      	strh	r3, [r7, #28]
 8004d4c:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <IComConstruct+0x390>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	8bba      	ldrh	r2, [r7, #28]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	f4ff ae95 	bcc.w	8004a84 <IComConstruct+0x80>
 8004d5a:	e000      	b.n	8004d5e <IComConstruct+0x35a>
				break;
 8004d5c:	bf00      	nop
			}
		}

		if (id >= totalObject_Item) {
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <IComConstruct+0x390>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	8bba      	ldrh	r2, [r7, #28]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d307      	bcc.n	8004d7a <IComConstruct+0x376>
			iDebugPrint(DBG_LEV_ERROR, "iCom port not found: %d\r\n",
					iCom->com);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
			iDebugPrint(DBG_LEV_ERROR, "iCom port not found: %d\r\n",
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4909      	ldr	r1, [pc, #36]	; (8004d98 <IComConstruct+0x394>)
 8004d72:	2005      	movs	r0, #5
 8004d74:	f000 fa22 	bl	80051bc <iDebugPrint>
 8004d78:	e000      	b.n	8004d7c <IComConstruct+0x378>
		}
	}
	//互斥量创建错误
	ICOM_ERR_MUTEX:
 8004d7a:	bf00      	nop

	return res;
 8004d7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	0800ca30 	.word	0x0800ca30
 8004d90:	0800ca50 	.word	0x0800ca50
 8004d94:	200005d0 	.word	0x200005d0
 8004d98:	0800ca74 	.word	0x0800ca74

08004d9c <IComDestory>:

iComStatus IComDestory(const iComObjectDef *iCom) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	if (iCom == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <IComDestory+0x12>
		return ICOM_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e01f      	b.n	8004dee <IComDestory+0x52>

	iComInnerObjectDef *com = FindIComObject(iCom);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fde0 	bl	8004974 <FindIComObject>
 8004db4:	60f8      	str	r0, [r7, #12]

	if (com == NULL) {
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <IComDestory+0x24>
		return ICOM_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e016      	b.n	8004dee <IComDestory+0x52>
	}

	NVIC_DisableIRQ(com->irqHandleId);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fc86 	bl	80046d8 <__NVIC_DisableIRQ>
	OsAbsFree(com->buffer.data);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fa7e 	bl	80052d2 <OsAbsFree>
	HAL_UART_DeInit(com->comHandle);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe fb59 	bl	8003492 <HAL_UART_DeInit>
	com->GotOneFrameFromIrqCallback = NULL;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	651a      	str	r2, [r3, #80]	; 0x50
	com->Inited = False;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]

	return ICOM_SUCCESS;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <IComStart>:

void IComStart(const iComObjectDef *iCom) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	if (iCom == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02b      	beq.n	8004e5e <IComStart+0x66>
		return;

	iComInnerObjectDef *com = FindIComObject(iCom);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fdb4 	bl	8004974 <FindIComObject>
 8004e0c:	60f8      	str	r0, [r7, #12]

	clearFlags(com->comHandle);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f915 	bl	8005042 <clearFlags>

	if (com) {
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d017      	beq.n	8004e4e <IComStart+0x56>
		HAL_UART_Receive_IT((UART_HandleTypeDef*) com->comHandle,
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
				(uint8*) &com->rxByte, 1);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3302      	adds	r3, #2
		HAL_UART_Receive_IT((UART_HandleTypeDef*) com->comHandle,
 8004e26:	2201      	movs	r2, #1
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f7fe fc3c 	bl	80036a6 <HAL_UART_Receive_IT>
		//选择中断源，抢占优先级，响应优先级
		HAL_NVIC_SetPriority(com->irqHandleId, com->priority, 0);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f993 0034 	ldrsb.w	r0, [r3, #52]	; 0x34
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f7fc fd6c 	bl	8001918 <HAL_NVIC_SetPriority>
		//使能中断
		NVIC_EnableIRQ(com->irqHandleId);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fc28 	bl	800469c <__NVIC_EnableIRQ>
 8004e4c:	e008      	b.n	8004e60 <IComStart+0x68>
	} else {
		iDebugPrint(DBG_LEV_ERROR,
				"iCom start null error in IComStart with com: %d\r\n",
				iCom->com);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	781b      	ldrb	r3, [r3, #0]
		iDebugPrint(DBG_LEV_ERROR,
 8004e52:	461a      	mov	r2, r3
 8004e54:	4904      	ldr	r1, [pc, #16]	; (8004e68 <IComStart+0x70>)
 8004e56:	2005      	movs	r0, #5
 8004e58:	f000 f9b0 	bl	80051bc <iDebugPrint>
 8004e5c:	e000      	b.n	8004e60 <IComStart+0x68>
		return;
 8004e5e:	bf00      	nop
	}
}
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	0800ca90 	.word	0x0800ca90

08004e6c <IComTransmit>:
		}
	}
}

iComStatus IComTransmit(const iComObjectDef *iCom, const uint8 *data,
		uint16 size) {
 8004e6c:	b590      	push	{r4, r7, lr}
 8004e6e:	b08b      	sub	sp, #44	; 0x2c
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
	iComStatus res = ICOM_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int tryCount = 3;
 8004e80:	2303      	movs	r3, #3
 8004e82:	623b      	str	r3, [r7, #32]
	uint32_t timeout = 10;
 8004e84:	230a      	movs	r3, #10
 8004e86:	61fb      	str	r3, [r7, #28]
	k_err_t err = K_ERR_NONE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	837b      	strh	r3, [r7, #26]
	timeout = 10 * size + 1000;
 8004e8c:	88fa      	ldrh	r2, [r7, #6]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004e9a:	61fb      	str	r3, [r7, #28]

	if (iCom != NULL) {
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 8083 	beq.w	8004faa <IComTransmit+0x13e>
		iComInnerObjectDef *com = FindIComObject(iCom);
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff fd65 	bl	8004974 <FindIComObject>
 8004eaa:	6178      	str	r0, [r7, #20]

		if (com) {
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d07b      	beq.n	8004faa <IComTransmit+0x13e>
			if (OS_ABS_ERR_NONE == OsAbsMutexTake(com->mutexTxLock, OsAbsMaxDelay)) {
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fa5f 	bl	800537e <OsAbsMutexTake>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d171      	bne.n	8004faa <IComTransmit+0x13e>
				if (com->xferUseMode == COM_XFER_DMA) {
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	791b      	ldrb	r3, [r3, #4]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d128      	bne.n	8004f20 <IComTransmit+0xb4>
					//DMA发送模式
					if (HAL_OK != HAL_UART_Transmit_DMA(com->comHandle, (uint8*) data, size)) {
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fc3a 	bl	8003750 <HAL_UART_Transmit_DMA>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <IComTransmit+0x7e>
						OsAbsSleep(timeout);
 8004ee2:	69f8      	ldr	r0, [r7, #28]
 8004ee4:	f000 fa82 	bl	80053ec <OsAbsSleep>
 8004ee8:	e002      	b.n	8004ef0 <IComTransmit+0x84>
					} else {
						res = ICOM_SUCCESS;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}

					//Wait tx complete
					err = tos_sem_pend(&com->semTxDone, tos_millisec2tick(timeout));
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f103 0414 	add.w	r4, r3, #20
 8004ef6:	69f8      	ldr	r0, [r7, #28]
 8004ef8:	f005 f812 	bl	8009f20 <tos_millisec2tick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4620      	mov	r0, r4
 8004f02:	f003 fe95 	bl	8008c30 <tos_sem_pend>
 8004f06:	4603      	mov	r3, r0
 8004f08:	837b      	strh	r3, [r7, #26]
					if (K_ERR_NONE == err) {
 8004f0a:	8b7b      	ldrh	r3, [r7, #26]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d103      	bne.n	8004f18 <IComTransmit+0xac>
						res = ICOM_SUCCESS;
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f16:	e043      	b.n	8004fa0 <IComTransmit+0x134>
					}
					else {
						res = ICOM_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f1e:	e03f      	b.n	8004fa0 <IComTransmit+0x134>
					}
				} else
				if (com->xferUseMode == COM_XFER_INTERRUPT) {
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	791b      	ldrb	r3, [r3, #4]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d12a      	bne.n	8004f7e <IComTransmit+0x112>
					while (HAL_OK != HAL_UART_Transmit_IT(com->comHandle, (uint8*) data, size)
 8004f28:	e002      	b.n	8004f30 <IComTransmit+0xc4>
							&& tryCount-- > 0) {
						//如果之前使用了互斥量，这里不推荐使用TencentOS的等待函数，因为tos_task_delay等待函数会阻塞线程
						//如果使用了，等待超时时间尽可能的设小值
						//OsAbsDelay(timeout);
						OsAbsSleep(timeout);
 8004f2a:	69f8      	ldr	r0, [r7, #28]
 8004f2c:	f000 fa5e 	bl	80053ec <OsAbsSleep>
					while (HAL_OK != HAL_UART_Transmit_IT(com->comHandle, (uint8*) data, size)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f34:	88fa      	ldrh	r2, [r7, #6]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe fb6f 	bl	800361c <HAL_UART_Transmit_IT>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <IComTransmit+0xe2>
							&& tryCount-- > 0) {
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	1e5a      	subs	r2, r3, #1
 8004f48:	623a      	str	r2, [r7, #32]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	dced      	bgt.n	8004f2a <IComTransmit+0xbe>
					}

					//Wait tx complete
					err = tos_sem_pend(&com->semTxDone, tos_millisec2tick(timeout));
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f103 0414 	add.w	r4, r3, #20
 8004f54:	69f8      	ldr	r0, [r7, #28]
 8004f56:	f004 ffe3 	bl	8009f20 <tos_millisec2tick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f003 fe66 	bl	8008c30 <tos_sem_pend>
 8004f64:	4603      	mov	r3, r0
 8004f66:	837b      	strh	r3, [r7, #26]
					if (K_ERR_NONE == err) {
 8004f68:	8b7b      	ldrh	r3, [r7, #26]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <IComTransmit+0x10a>
						res = ICOM_SUCCESS;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f74:	e014      	b.n	8004fa0 <IComTransmit+0x134>
					}
					else {
						res = ICOM_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f7c:	e010      	b.n	8004fa0 <IComTransmit+0x134>
					}
				} else {
					//普通发送模式，超时等待时间可能需要长一点
					if (HAL_OK!= HAL_UART_Transmit(com->comHandle, (uint8*) data, size, timeout)) {
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004f82:	88fa      	ldrh	r2, [r7, #6]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	f7fe faaf 	bl	80034ea <HAL_UART_Transmit>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <IComTransmit+0x12e>
						res =ICOM_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f98:	e002      	b.n	8004fa0 <IComTransmit+0x134>
					} else {
						res = ICOM_SUCCESS;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}

				OsAbsMutexGive(com->mutexTxLock);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fa12 	bl	80053ce <OsAbsMutexGive>
			}
		}//end if(com)
	}

	return res;
 8004faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	372c      	adds	r7, #44	; 0x2c
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd90      	pop	{r4, r7, pc}

08004fb6 <IComGetData>:
			ICharArrayPutOne(&com->buffer, data);
		}
	}
}

uint32 IComGetData(const iComObjectDef *iCom, const uint8 *dest, uint32 size) {
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b088      	sub	sp, #32
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
	uint32 dataRead = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]

	if (size == 0)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <IComGetData+0x1a>
		return 0;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e011      	b.n	8004ff4 <IComGetData+0x3e>

	uint8 *pDest = (uint8*) dest;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	61bb      	str	r3, [r7, #24]

	if (iCom != NULL) {
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <IComGetData+0x3c>
		iComInnerObjectDef *com = FindIComObject(iCom);
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff fcca 	bl	8004974 <FindIComObject>
 8004fe0:	6178      	str	r0, [r7, #20]

		dataRead = ICharArrayGetMany(&com->buffer, pDest, size);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3324      	adds	r3, #36	; 0x24
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	69b9      	ldr	r1, [r7, #24]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fb2b 	bl	8004646 <ICharArrayGetMany>
 8004ff0:	61f8      	str	r0, [r7, #28]
	}

	return dataRead;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <IComIsEmpty>:

BOOL IComIsEmpty(const iComObjectDef *iCom) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	BOOL res = False;
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]
	if(!iCom)return res;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <IComIsEmpty+0x16>
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	e013      	b.n	800503a <IComIsEmpty+0x3e>

	iComInnerObjectDef *com = FindIComObject(iCom);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff fcae 	bl	8004974 <FindIComObject>
 8005018:	60b8      	str	r0, [r7, #8]
	if(!com)return res;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <IComIsEmpty+0x28>
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	e00a      	b.n	800503a <IComIsEmpty+0x3e>
	return !ICharArrayHaveNext(&com->buffer);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	3324      	adds	r3, #36	; 0x24
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fabf 	bl	80045ac <ICharArrayHaveNext>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <clearFlags>:

static void clearFlags(UART_HandleTypeDef *huart){
 8005042:	b480      	push	{r7}
 8005044:	b087      	sub	sp, #28
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
	if (__HAL_UART_GET_FLAG(huart, USART_SR_PE)) {
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d10a      	bne.n	800506e <clearFlags+0x2c>
		//Parity Error
		__HAL_UART_CLEAR_PEFLAG(huart);
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	697b      	ldr	r3, [r7, #20]
	}

	if (__HAL_UART_GET_FLAG(huart, USART_SR_FE)) {
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b02      	cmp	r3, #2
 800507a:	d10a      	bne.n	8005092 <clearFlags+0x50>
		//Framing Error
		__HAL_UART_CLEAR_FEFLAG(huart);
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	693b      	ldr	r3, [r7, #16]
	}

	if (__HAL_UART_GET_FLAG(huart, USART_SR_NE)) {
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b04      	cmp	r3, #4
 800509e:	d10a      	bne.n	80050b6 <clearFlags+0x74>
		//Noise Error Flag
		__HAL_UART_CLEAR_NEFLAG(huart);
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
	}

	if (__HAL_UART_GET_FLAG(huart, USART_SR_ORE)) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d10a      	bne.n	80050da <clearFlags+0x98>
		//溢出中断
		__HAL_UART_CLEAR_OREFLAG(huart);
 80050c4:	2300      	movs	r3, #0
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
	}
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <iComDistributeTask>:
			clearFlags(huart);
		}
	}
}

void iComDistributeTask(void *arg) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	while(1){
		OsAbsSleep(100);
 80050f0:	2064      	movs	r0, #100	; 0x64
 80050f2:	f000 f97b 	bl	80053ec <OsAbsSleep>

		if (1) {
			uint16 id;

			for (id = 0; id < totalObject_Item; id++) {
 80050f6:	2300      	movs	r3, #0
 80050f8:	81fb      	strh	r3, [r7, #14]
 80050fa:	e015      	b.n	8005128 <iComDistributeTask+0x40>
				//Callback
				if (iComInnerObjects[id].GotOneFrameFromIrqCallback != NULL) {
 80050fc:	89fb      	ldrh	r3, [r7, #14]
 80050fe:	4a0e      	ldr	r2, [pc, #56]	; (8005138 <iComDistributeTask+0x50>)
 8005100:	2154      	movs	r1, #84	; 0x54
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	4413      	add	r3, r2
 8005108:	3350      	adds	r3, #80	; 0x50
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <iComDistributeTask+0x3a>
					iComInnerObjects[id].GotOneFrameFromIrqCallback();
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	4a09      	ldr	r2, [pc, #36]	; (8005138 <iComDistributeTask+0x50>)
 8005114:	2154      	movs	r1, #84	; 0x54
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	3350      	adds	r3, #80	; 0x50
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4798      	blx	r3
			for (id = 0; id < totalObject_Item; id++) {
 8005122:	89fb      	ldrh	r3, [r7, #14]
 8005124:	3301      	adds	r3, #1
 8005126:	81fb      	strh	r3, [r7, #14]
 8005128:	4b04      	ldr	r3, [pc, #16]	; (800513c <iComDistributeTask+0x54>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	89fa      	ldrh	r2, [r7, #14]
 8005130:	429a      	cmp	r2, r3
 8005132:	d3e3      	bcc.n	80050fc <iComDistributeTask+0x14>
		OsAbsSleep(100);
 8005134:	e7dc      	b.n	80050f0 <iComDistributeTask+0x8>
 8005136:	bf00      	nop
 8005138:	20000214 	.word	0x20000214
 800513c:	200005d0 	.word	0x200005d0

08005140 <IComInit>:
		}
	}
}


void IComInit(){
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
	 osThreadCreate(osThread(iComDistributeTask), NULL);
 8005144:	2100      	movs	r1, #0
 8005146:	4802      	ldr	r0, [pc, #8]	; (8005150 <IComInit+0x10>)
 8005148:	f006 f981 	bl	800b44e <osThreadCreate>
}
 800514c:	bf00      	nop
 800514e:	bd80      	pop	{r7, pc}
 8005150:	0800ce3c 	.word	0x0800ce3c

08005154 <stdout_putf>:
 **Name:		 	fputc
 **Function:
 **Args:
 **Return:
 ******************************************************************************/
static void stdout_putf(void *unused, char c) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
#if PRINTF_ENABLE
	HAL_UART_Transmit(&huart1, (uint8_t *)&c, 1, 0xFFFF);
 8005160:	1cf9      	adds	r1, r7, #3
 8005162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005166:	2201      	movs	r2, #1
 8005168:	4803      	ldr	r0, [pc, #12]	; (8005178 <stdout_putf+0x24>)
 800516a:	f7fe f9be 	bl	80034ea <HAL_UART_Transmit>
#endif
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200030d0 	.word	0x200030d0

0800517c <iDebugInit>:

void iDebugInit(void) {
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
#if PRINTF_ENABLE
	txMutex = OsAbsMutexCreate();
 8005180:	f000 f8d2 	bl	8005328 <OsAbsMutexCreate>
 8005184:	4602      	mov	r2, r0
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <iDebugInit+0x34>)
 8005188:	601a      	str	r2, [r3, #0]
	if (txMutex == NULL) {
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <iDebugInit+0x34>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d105      	bne.n	800519e <iDebugInit+0x22>
		OsAbsMutexGive(txMutex);
 8005192:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <iDebugInit+0x34>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f919 	bl	80053ce <OsAbsMutexGive>
		return;
 800519c:	e006      	b.n	80051ac <iDebugInit+0x30>
	}

	//init printf interface
	init_printf(NULL, stdout_putf);
 800519e:	4905      	ldr	r1, [pc, #20]	; (80051b4 <iDebugInit+0x38>)
 80051a0:	2000      	movs	r0, #0
 80051a2:	f000 fdfd 	bl	8005da0 <init_printf>
	initialized = True;
 80051a6:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <iDebugInit+0x3c>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
#endif
}
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	200005e0 	.word	0x200005e0
 80051b4:	08005155 	.word	0x08005155
 80051b8:	200005e4 	.word	0x200005e4

080051bc <iDebugPrint>:

void iDebugPrint(iDebugLevelEnum level, const char *fmt, ...) {
 80051bc:	b40e      	push	{r1, r2, r3}
 80051be:	b580      	push	{r7, lr}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	4603      	mov	r3, r0
 80051c6:	71fb      	strb	r3, [r7, #7]
#if PRINTF_ENABLE
	if (OS_ABS_ERR_NONE != OsAbsMutexTake(txMutex, OsAbsMaxDelay)) {
 80051c8:	4b0f      	ldr	r3, [pc, #60]	; (8005208 <iDebugPrint+0x4c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f04f 31ff 	mov.w	r1, #4294967295
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f8d4 	bl	800537e <OsAbsMutexTake>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10e      	bne.n	80051fa <iDebugPrint+0x3e>
		return;
	}

	va_list var_arg;
	va_start(var_arg, fmt);
 80051dc:	f107 0320 	add.w	r3, r7, #32
 80051e0:	60fb      	str	r3, [r7, #12]
	iDebugPrintCore(level, fmt, var_arg);
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	69f9      	ldr	r1, [r7, #28]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 f80f 	bl	800520c <iDebugPrintCore>
	va_end(var_arg);

	OsAbsMutexGive(txMutex);
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <iDebugPrint+0x4c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f8eb 	bl	80053ce <OsAbsMutexGive>
 80051f8:	e000      	b.n	80051fc <iDebugPrint+0x40>
		return;
 80051fa:	bf00      	nop
#endif
}
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005204:	b003      	add	sp, #12
 8005206:	4770      	bx	lr
 8005208:	200005e0 	.word	0x200005e0

0800520c <iDebugPrintCore>:

static void iDebugPrintCore(iDebugLevelEnum level, const char *fmt,
		va_list var_arg) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	73fb      	strb	r3, [r7, #15]
#if PRINTF_ENABLE
	if (True != initialized) {
 800521a:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <iDebugPrintCore+0x84>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d132      	bne.n	8005288 <iDebugPrintCore+0x7c>
		return;
	}

	if (level >= LOG_LEVEL && level > DBG_LEV_NO) {
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d030      	beq.n	800528a <iDebugPrintCore+0x7e>
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d02d      	beq.n	800528a <iDebugPrintCore+0x7e>
		switch (level) {
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	3b01      	subs	r3, #1
 8005232:	2b04      	cmp	r3, #4
 8005234:	d820      	bhi.n	8005278 <iDebugPrintCore+0x6c>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <iDebugPrintCore+0x30>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005251 	.word	0x08005251
 8005240:	08005259 	.word	0x08005259
 8005244:	08005261 	.word	0x08005261
 8005248:	08005269 	.word	0x08005269
 800524c:	08005271 	.word	0x08005271
		case DBG_LEV_VERBOSE: {
			tfp_printf("V:");
 8005250:	4810      	ldr	r0, [pc, #64]	; (8005294 <iDebugPrintCore+0x88>)
 8005252:	f000 fdbb 	bl	8005dcc <tfp_printf>
		}
			break;
 8005256:	e010      	b.n	800527a <iDebugPrintCore+0x6e>

		case DBG_LEV_DEBUG: {
			tfp_printf("D:");
 8005258:	480f      	ldr	r0, [pc, #60]	; (8005298 <iDebugPrintCore+0x8c>)
 800525a:	f000 fdb7 	bl	8005dcc <tfp_printf>
		}
			break;
 800525e:	e00c      	b.n	800527a <iDebugPrintCore+0x6e>

		case DBG_LEV_INFO: {
			tfp_printf("I:");
 8005260:	480e      	ldr	r0, [pc, #56]	; (800529c <iDebugPrintCore+0x90>)
 8005262:	f000 fdb3 	bl	8005dcc <tfp_printf>
		}
			break;
 8005266:	e008      	b.n	800527a <iDebugPrintCore+0x6e>

		case DBG_LEV_WARN: {
			tfp_printf("W:");
 8005268:	480d      	ldr	r0, [pc, #52]	; (80052a0 <iDebugPrintCore+0x94>)
 800526a:	f000 fdaf 	bl	8005dcc <tfp_printf>
		}
			break;
 800526e:	e004      	b.n	800527a <iDebugPrintCore+0x6e>

		case DBG_LEV_ERROR: {
			tfp_printf("E:");
 8005270:	480c      	ldr	r0, [pc, #48]	; (80052a4 <iDebugPrintCore+0x98>)
 8005272:	f000 fdab 	bl	8005dcc <tfp_printf>
		}
			break;
 8005276:	e000      	b.n	800527a <iDebugPrintCore+0x6e>

		default:
			break;
 8005278:	bf00      	nop
		}
		//Print the message
		tfp_format(NULL, stdout_putf, (char*) fmt, var_arg);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	490a      	ldr	r1, [pc, #40]	; (80052a8 <iDebugPrintCore+0x9c>)
 8005280:	2000      	movs	r0, #0
 8005282:	f000 fbb6 	bl	80059f2 <tfp_format>
 8005286:	e000      	b.n	800528a <iDebugPrintCore+0x7e>
		return;
 8005288:	bf00      	nop
	}

#endif
}
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	200005e4 	.word	0x200005e4
 8005294:	0800caf4 	.word	0x0800caf4
 8005298:	0800caf8 	.word	0x0800caf8
 800529c:	0800cafc 	.word	0x0800cafc
 80052a0:	0800cb00 	.word	0x0800cb00
 80052a4:	0800cb04 	.word	0x0800cb04
 80052a8:	08005155 	.word	0x08005155

080052ac <OsAbsTickGet>:

void OsAbsDelay(uint32 delay) {
	HAL_Delay(delay);
}

uint32 OsAbsTickGet(void) {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80052b0:	f7fc fa4c 	bl	800174c <HAL_GetTick>
 80052b4:	4603      	mov	r3, r0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	bd80      	pop	{r7, pc}

080052ba <OsAbsMalloc>:
					tickNow - tickPre : (0xffffffff - tickPre) + tickNow + 1;

	return timeElapsed;
}

void* OsAbsMalloc(uint32 size) {
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
	return tos_mmheap_alloc(size);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f002 f93e 	bl	8007544 <tos_mmheap_alloc>
 80052c8:	4603      	mov	r3, r0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <OsAbsFree>:

void OsAbsFree(void *pv) {
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
	tos_mmheap_free(pv);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f002 f94d 	bl	800757a <tos_mmheap_free>
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <OsAbsEnterCriticalSection>:
void OsAbsTaskResumeScheduler(void) {
	tos_knl_sched_unlock();
}

#ifdef __GNUC__
void OsAbsEnterCriticalSection(void) {
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80052ec:	b672      	cpsid	i
	__disable_irq(); //关总中断
}
 80052ee:	bf00      	nop
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <OsAbsExitCriticalSection>:

void OsAbsExitCriticalSection(void) {
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80052fc:	b662      	cpsie	i
	__enable_irq(); //开总中断
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <OsAbsEnterCriticalSectionFromIsr>:

void OsAbsEnterCriticalSectionFromIsr(void){
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800530c:	b672      	cpsid	i
	__disable_irq();//关总中断
}
 800530e:	bf00      	nop
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <OsAbsExitCriticalSectionFromIsr>:

void OsAbsExitCriticalSectionFromIsr(void){
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800531c:	b662      	cpsie	i
	__enable_irq(); //开总中断
}
 800531e:	bf00      	nop
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <OsAbsMutexCreate>:
		return;

	tos_sem_destroy(semaphore);
}

OsAbsMutex OsAbsMutexCreate(void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
	k_mutex_t *mutex = OsAbsMalloc(sizeof(k_mutex_t));
 800532e:	2020      	movs	r0, #32
 8005330:	f7ff ffc3 	bl	80052ba <OsAbsMalloc>
 8005334:	6078      	str	r0, [r7, #4]
	if (mutex == NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <OsAbsMutexCreate+0x18>
		return NULL;
 800533c:	2300      	movs	r3, #0
 800533e:	e00b      	b.n	8005358 <OsAbsMutexCreate+0x30>
	if (K_ERR_NONE == tos_mutex_create(mutex)) {
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f002 fa9d 	bl	8007880 <tos_mutex_create>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <OsAbsMutexCreate+0x28>
		return mutex;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	e003      	b.n	8005358 <OsAbsMutexCreate+0x30>
	}

	OsAbsFree(mutex);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff ffbe 	bl	80052d2 <OsAbsFree>
	return NULL;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <OsAbsMutexDestory>:

void OsAbsMutexDestory(OsAbsMutex mutex) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	if (mutex == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <OsAbsMutexDestory+0x16>
		return;

	tos_mutex_destroy(mutex);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f002 fac0 	bl	80078f4 <tos_mutex_destroy>
 8005374:	e000      	b.n	8005378 <OsAbsMutexDestory+0x18>
		return;
 8005376:	bf00      	nop
}
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <OsAbsMutexTake>:

uint32 OsAbsMutexTake(OsAbsMutex mutex, uint32 timeout) {
 800537e:	b590      	push	{r4, r7, lr}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
	k_err_t error;
	if (timeout != OsAbsMaxDelay && timeout != 0) {
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d00f      	beq.n	80053b0 <OsAbsMutexTake+0x32>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <OsAbsMutexTake+0x32>
		error = tos_mutex_pend_timed(mutex, tos_millisec2tick(timeout));
 8005396:	6838      	ldr	r0, [r7, #0]
 8005398:	f004 fdc2 	bl	8009f20 <tos_millisec2tick>
 800539c:	4603      	mov	r3, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	461a      	mov	r2, r3
 80053a2:	4623      	mov	r3, r4
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f002 faf3 	bl	8007990 <tos_mutex_pend_timed>
 80053aa:	4603      	mov	r3, r0
 80053ac:	81fb      	strh	r3, [r7, #14]
 80053ae:	e004      	b.n	80053ba <OsAbsMutexTake+0x3c>
	} else {
		error = tos_mutex_pend(mutex);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f002 fb8d 	bl	8007ad0 <tos_mutex_pend>
 80053b6:	4603      	mov	r3, r0
 80053b8:	81fb      	strh	r3, [r7, #14]
	}

	if (K_ERR_NONE == error) {
 80053ba:	89fb      	ldrh	r3, [r7, #14]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <OsAbsMutexTake+0x46>
		return OS_ABS_ERR_NONE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e000      	b.n	80053c6 <OsAbsMutexTake+0x48>
	}
	return error;
 80053c4:	89fb      	ldrh	r3, [r7, #14]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd90      	pop	{r4, r7, pc}

080053ce <OsAbsMutexGive>:

void OsAbsMutexGive(OsAbsMutex mutex) {
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
	k_err_t error;
	error = tos_mutex_post(mutex);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f002 fb8a 	bl	8007af0 <tos_mutex_post>
 80053dc:	4603      	mov	r3, r0
 80053de:	81fb      	strh	r3, [r7, #14]
	if (K_ERR_NONE == error) {
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	2b00      	cmp	r3, #0
		return;
	}
	return;
 80053e4:	bf00      	nop
}
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <OsAbsSleep>:

void OsAbsSleep(uint32 time) {
 80053ec:	b590      	push	{r4, r7, lr}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	tos_task_delay(tos_millisec2tick(time));
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f004 fd93 	bl	8009f20 <tos_millisec2tick>
 80053fa:	4603      	mov	r3, r0
 80053fc:	460c      	mov	r4, r1
 80053fe:	4618      	mov	r0, r3
 8005400:	4621      	mov	r1, r4
 8005402:	f004 fb0f 	bl	8009a24 <tos_task_delay>
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bd90      	pop	{r4, r7, pc}
	...

08005410 <tPoolInit>:
}


/*Init tPool interface*/
tpStatusDef tPoolInit(tPoolConfigDef *config)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
	if(config == NULL)return TP_ERROR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <tPoolInit+0x12>
 800541e:	2302      	movs	r3, #2
 8005420:	e021      	b.n	8005466 <tPoolInit+0x56>
	if(config->Malloc == NULL)return TP_ERROR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <tPoolInit+0x1e>
 800542a:	2302      	movs	r3, #2
 800542c:	e01b      	b.n	8005466 <tPoolInit+0x56>
	if(config->Free == NULL)return TP_ERROR;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <tPoolInit+0x2a>
 8005436:	2302      	movs	r3, #2
 8005438:	e015      	b.n	8005466 <tPoolInit+0x56>
	if(config->getSysTick == NULL)return TP_ERROR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <tPoolInit+0x36>
 8005442:	2302      	movs	r3, #2
 8005444:	e00f      	b.n	8005466 <tPoolInit+0x56>

	tpConfig.Malloc = config->Malloc;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <tPoolInit+0x64>)
 800544c:	6013      	str	r3, [r2, #0]
	tpConfig.Free = config->Free;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	4a08      	ldr	r2, [pc, #32]	; (8005474 <tPoolInit+0x64>)
 8005454:	6053      	str	r3, [r2, #4]
	tpConfig.getSysTick = config->getSysTick;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	4a06      	ldr	r2, [pc, #24]	; (8005474 <tPoolInit+0x64>)
 800545c:	6093      	str	r3, [r2, #8]

	tpInterfaceInitialized = 1;
 800545e:	4b06      	ldr	r3, [pc, #24]	; (8005478 <tPoolInit+0x68>)
 8005460:	2201      	movs	r2, #1
 8005462:	701a      	strb	r2, [r3, #0]

	return TP_OK;
 8005464:	2301      	movs	r3, #1
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	200037a0 	.word	0x200037a0
 8005478:	200005e5 	.word	0x200005e5

0800547c <ulli2a>:


#ifdef PRINTF_LONG_LONG_SUPPORT
static void _TFP_GCC_NO_INLINE_ ulli2a(
    unsigned long long int num, struct param *p)
{
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b08b      	sub	sp, #44	; 0x2c
 8005480:	af00      	add	r7, sp, #0
 8005482:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
    int n = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned long long int d = 1;
 800548c:	f04f 0301 	mov.w	r3, #1
 8005490:	f04f 0400 	mov.w	r4, #0
 8005494:	e9c7 3406 	strd	r3, r4, [r7, #24]
    char *bf = p->bf;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	617b      	str	r3, [r7, #20]
    while (num / d >= p->base)
 800549e:	e013      	b.n	80054c8 <ulli2a+0x4c>
        d *= p->base;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f04f 0400 	mov.w	r4, #0
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	fb03 f102 	mul.w	r1, r3, r2
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	fb04 f202 	mul.w	r2, r4, r2
 80054b4:	440a      	add	r2, r1
 80054b6:	69b9      	ldr	r1, [r7, #24]
 80054b8:	fba1 3403 	umull	r3, r4, r1, r3
 80054bc:	4422      	add	r2, r4
 80054be:	4614      	mov	r4, r2
 80054c0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80054c4:	e9c7 3406 	strd	r3, r4, [r7, #24]
    while (num / d >= p->base)
 80054c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054d0:	f7fa ff46 	bl	8000360 <__aeabi_uldivmod>
 80054d4:	4603      	mov	r3, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	4619      	mov	r1, r3
 80054da:	4622      	mov	r2, r4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	42a2      	cmp	r2, r4
 80054e6:	bf08      	it	eq
 80054e8:	4299      	cmpeq	r1, r3
 80054ea:	d2d9      	bcs.n	80054a0 <ulli2a+0x24>
    while (d != 0) {
 80054ec:	e044      	b.n	8005578 <ulli2a+0xfc>
        int dgt = num / d;
 80054ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054f6:	f7fa ff33 	bl	8000360 <__aeabi_uldivmod>
 80054fa:	4603      	mov	r3, r0
 80054fc:	460c      	mov	r4, r1
 80054fe:	613b      	str	r3, [r7, #16]
        num %= d;
 8005500:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005508:	f7fa ff2a 	bl	8000360 <__aeabi_uldivmod>
 800550c:	461c      	mov	r4, r3
 800550e:	4613      	mov	r3, r2
 8005510:	e9c7 3402 	strd	r3, r4, [r7, #8]
        d /= p->base;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f04f 0400 	mov.w	r4, #0
 800551c:	461a      	mov	r2, r3
 800551e:	4623      	mov	r3, r4
 8005520:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005524:	f7fa ff1c 	bl	8000360 <__aeabi_uldivmod>
 8005528:	4603      	mov	r3, r0
 800552a:	460c      	mov	r4, r1
 800552c:	e9c7 3406 	strd	r3, r4, [r7, #24]
        if (n || dgt > 0 || d == 0) {
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <ulli2a+0xc8>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	dc03      	bgt.n	8005544 <ulli2a+0xc8>
 800553c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005540:	4323      	orrs	r3, r4
 8005542:	d119      	bne.n	8005578 <ulli2a+0xfc>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2b09      	cmp	r3, #9
 8005548:	dd0a      	ble.n	8005560 <ulli2a+0xe4>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <ulli2a+0xe0>
 8005558:	2337      	movs	r3, #55	; 0x37
 800555a:	e002      	b.n	8005562 <ulli2a+0xe6>
 800555c:	2357      	movs	r3, #87	; 0x57
 800555e:	e000      	b.n	8005562 <ulli2a+0xe6>
 8005560:	2330      	movs	r3, #48	; 0x30
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	b2d1      	uxtb	r1, r2
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	1c50      	adds	r0, r2, #1
 800556a:	6178      	str	r0, [r7, #20]
 800556c:	440b      	add	r3, r1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	7013      	strb	r3, [r2, #0]
            ++n;
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	3301      	adds	r3, #1
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
    while (d != 0) {
 8005578:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800557c:	4323      	orrs	r3, r4
 800557e:	d1b6      	bne.n	80054ee <ulli2a+0x72>
        }
    }
    *bf = 0;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	372c      	adds	r7, #44	; 0x2c
 800558a:	46bd      	mov	sp, r7
 800558c:	bd90      	pop	{r4, r7, pc}

0800558e <lli2a>:

static void lli2a(long long int num, struct param *p)
{
 800558e:	b590      	push	{r4, r7, lr}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
    if (num < 0) {
 800559a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f174 0300 	sbcs.w	r3, r4, #0
 80055a4:	da09      	bge.n	80055ba <lli2a+0x2c>
        num = -num;
 80055a6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80055aa:	425b      	negs	r3, r3
 80055ac:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 80055b0:	e9c7 3402 	strd	r3, r4, [r7, #8]
        p->sign = '-';
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	222d      	movs	r2, #45	; 0x2d
 80055b8:	721a      	strb	r2, [r3, #8]
    }
    ulli2a(num, p);
 80055ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	4621      	mov	r1, r4
 80055c4:	f7ff ff5a 	bl	800547c <ulli2a>
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd90      	pop	{r4, r7, pc}

080055d0 <uli2a>:
#endif

#ifdef PRINTF_LONG_SUPPORT
static void uli2a(unsigned long int num, struct param *p)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
    int n = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
    unsigned long int d = 1;
 80055de:	2301      	movs	r3, #1
 80055e0:	613b      	str	r3, [r7, #16]
    char *bf = p->bf;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	60fb      	str	r3, [r7, #12]
    while (num / d >= p->base)
 80055e8:	e005      	b.n	80055f6 <uli2a+0x26>
        d *= p->base;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	fb02 f303 	mul.w	r3, r2, r3
 80055f4:	613b      	str	r3, [r7, #16]
    while (num / d >= p->base)
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	429a      	cmp	r2, r3
 8005604:	d2f1      	bcs.n	80055ea <uli2a+0x1a>
    while (d != 0) {
 8005606:	e036      	b.n	8005676 <uli2a+0xa6>
        int dgt = num / d;
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	60bb      	str	r3, [r7, #8]
        num %= d;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	fbb3 f2f2 	udiv	r2, r3, r2
 800561a:	6939      	ldr	r1, [r7, #16]
 800561c:	fb01 f202 	mul.w	r2, r1, r2
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	607b      	str	r3, [r7, #4]
        d /= p->base;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	613b      	str	r3, [r7, #16]
        if (n || dgt > 0 || d == 0) {
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <uli2a+0x72>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	dc02      	bgt.n	8005642 <uli2a+0x72>
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d119      	bne.n	8005676 <uli2a+0xa6>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b09      	cmp	r3, #9
 8005646:	dd0a      	ble.n	800565e <uli2a+0x8e>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <uli2a+0x8a>
 8005656:	2337      	movs	r3, #55	; 0x37
 8005658:	e002      	b.n	8005660 <uli2a+0x90>
 800565a:	2357      	movs	r3, #87	; 0x57
 800565c:	e000      	b.n	8005660 <uli2a+0x90>
 800565e:	2330      	movs	r3, #48	; 0x30
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	b2d1      	uxtb	r1, r2
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	1c50      	adds	r0, r2, #1
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	440b      	add	r3, r1
 800566c:	b2db      	uxtb	r3, r3
 800566e:	7013      	strb	r3, [r2, #0]
            ++n;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	3301      	adds	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
    while (d != 0) {
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1c5      	bne.n	8005608 <uli2a+0x38>
        }
    }
    *bf = 0;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <li2a>:

static void li2a(long num, struct param *p)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
    if (num < 0) {
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	da05      	bge.n	80056aa <li2a+0x1c>
        num = -num;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	425b      	negs	r3, r3
 80056a2:	607b      	str	r3, [r7, #4]
        p->sign = '-';
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	222d      	movs	r2, #45	; 0x2d
 80056a8:	721a      	strb	r2, [r3, #8]
    }
    uli2a(num, p);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff ff8e 	bl	80055d0 <uli2a>
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <ui2a>:
#endif

static void ui2a(unsigned int num, struct param *p)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
    int n = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
    unsigned int d = 1;
 80056ca:	2301      	movs	r3, #1
 80056cc:	613b      	str	r3, [r7, #16]
    char *bf = p->bf;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	60fb      	str	r3, [r7, #12]
    while (num / d >= p->base)
 80056d4:	e005      	b.n	80056e2 <ui2a+0x26>
        d *= p->base;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	fb02 f303 	mul.w	r3, r2, r3
 80056e0:	613b      	str	r3, [r7, #16]
    while (num / d >= p->base)
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d2f1      	bcs.n	80056d6 <ui2a+0x1a>
    while (d != 0) {
 80056f2:	e036      	b.n	8005762 <ui2a+0xa6>
        int dgt = num / d;
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	60bb      	str	r3, [r7, #8]
        num %= d;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	fbb3 f2f2 	udiv	r2, r3, r2
 8005706:	6939      	ldr	r1, [r7, #16]
 8005708:	fb01 f202 	mul.w	r2, r1, r2
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	607b      	str	r3, [r7, #4]
        d /= p->base;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	613b      	str	r3, [r7, #16]
        if (n || dgt > 0 || d == 0) {
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d105      	bne.n	800572e <ui2a+0x72>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	dc02      	bgt.n	800572e <ui2a+0x72>
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d119      	bne.n	8005762 <ui2a+0xa6>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b09      	cmp	r3, #9
 8005732:	dd0a      	ble.n	800574a <ui2a+0x8e>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <ui2a+0x8a>
 8005742:	2337      	movs	r3, #55	; 0x37
 8005744:	e002      	b.n	800574c <ui2a+0x90>
 8005746:	2357      	movs	r3, #87	; 0x57
 8005748:	e000      	b.n	800574c <ui2a+0x90>
 800574a:	2330      	movs	r3, #48	; 0x30
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	b2d1      	uxtb	r1, r2
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	1c50      	adds	r0, r2, #1
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	440b      	add	r3, r1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	7013      	strb	r3, [r2, #0]
            ++n;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3301      	adds	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
    while (d != 0) {
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1c5      	bne.n	80056f4 <ui2a+0x38>
        }
    }
    *bf = 0;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <i2a>:

static void i2a(int num, struct param *p)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
    if (num < 0) {
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	da05      	bge.n	8005796 <i2a+0x1c>
        num = -num;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	425b      	negs	r3, r3
 800578e:	607b      	str	r3, [r7, #4]
        p->sign = '-';
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	222d      	movs	r2, #45	; 0x2d
 8005794:	721a      	strb	r2, [r3, #8]
    }
    ui2a(num, p);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff ff8e 	bl	80056bc <ui2a>
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <a2d>:

static int a2d(char ch)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
    if (ch >= '0' && ch <= '9')
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	2b2f      	cmp	r3, #47	; 0x2f
 80057b6:	d905      	bls.n	80057c4 <a2d+0x1c>
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	2b39      	cmp	r3, #57	; 0x39
 80057bc:	d802      	bhi.n	80057c4 <a2d+0x1c>
        return ch - '0';
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	3b30      	subs	r3, #48	; 0x30
 80057c2:	e013      	b.n	80057ec <a2d+0x44>
    else if (ch >= 'a' && ch <= 'f')
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	2b60      	cmp	r3, #96	; 0x60
 80057c8:	d905      	bls.n	80057d6 <a2d+0x2e>
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	2b66      	cmp	r3, #102	; 0x66
 80057ce:	d802      	bhi.n	80057d6 <a2d+0x2e>
        return ch - 'a' + 10;
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	3b57      	subs	r3, #87	; 0x57
 80057d4:	e00a      	b.n	80057ec <a2d+0x44>
    else if (ch >= 'A' && ch <= 'F')
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d905      	bls.n	80057e8 <a2d+0x40>
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	2b46      	cmp	r3, #70	; 0x46
 80057e0:	d802      	bhi.n	80057e8 <a2d+0x40>
        return ch - 'A' + 10;
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	3b37      	subs	r3, #55	; 0x37
 80057e6:	e001      	b.n	80057ec <a2d+0x44>
    else
        return -1;
 80057e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <a2u>:

static char a2u(char ch, const char **src, int base, unsigned int *nump)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
    const char *p = *src;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	61fb      	str	r3, [r7, #28]
    unsigned int num = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
    int digit;
    while ((digit = a2d(ch)) >= 0) {
 8005812:	e00f      	b.n	8005834 <a2u+0x3c>
        if (digit > base)
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	dc14      	bgt.n	8005846 <a2u+0x4e>
            break;
        num = num * base + digit;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	fb02 f203 	mul.w	r2, r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        ch = *p++;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	61fa      	str	r2, [r7, #28]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	73fb      	strb	r3, [r7, #15]
    while ((digit = a2d(ch)) >= 0) {
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ffb6 	bl	80057a8 <a2d>
 800583c:	6178      	str	r0, [r7, #20]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	dae7      	bge.n	8005814 <a2u+0x1c>
 8005844:	e000      	b.n	8005848 <a2u+0x50>
            break;
 8005846:	bf00      	nop
    }
    *src = p;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	601a      	str	r2, [r3, #0]
    *nump = num;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	601a      	str	r2, [r3, #0]
    return ch;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3720      	adds	r7, #32
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <putchw>:

static void putchw(void *putp, putcf putf, struct param *p)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b088      	sub	sp, #32
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
    char ch;
    int n = p->width;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	61fb      	str	r3, [r7, #28]
    char *bf = p->bf;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	61bb      	str	r3, [r7, #24]

    /* Number of filling characters */
    while (*bf++ && n > 0)
 8005876:	e002      	b.n	800587e <putchw+0x20>
        n--;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3b01      	subs	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
    while (*bf++ && n > 0)
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	61ba      	str	r2, [r7, #24]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <putchw+0x32>
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	2b00      	cmp	r3, #0
 800588e:	dcf3      	bgt.n	8005878 <putchw+0x1a>
    if (p->sign)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	7a1b      	ldrb	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <putchw+0x40>
        n--;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	3b01      	subs	r3, #1
 800589c:	61fb      	str	r3, [r7, #28]
    if (p->alt && p->base == 16)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <putchw+0x5e>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d103      	bne.n	80058bc <putchw+0x5e>
        n -= 2;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	3b02      	subs	r3, #2
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	e00d      	b.n	80058d8 <putchw+0x7a>
    else if (p->alt && p->base == 8)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d006      	beq.n	80058d8 <putchw+0x7a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d102      	bne.n	80058d8 <putchw+0x7a>
        n--;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	61fb      	str	r3, [r7, #28]

    /* Fill with space to align to the right, before alternate or sign */
    if (!p->lz && !p->align_left) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d110      	bne.n	8005908 <putchw+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <putchw+0xaa>
        while (n-- > 0)
 80058f4:	e003      	b.n	80058fe <putchw+0xa0>
            putf(putp, ' ');
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2120      	movs	r1, #32
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	4798      	blx	r3
        while (n-- > 0)
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	1e5a      	subs	r2, r3, #1
 8005902:	61fa      	str	r2, [r7, #28]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dcf6      	bgt.n	80058f6 <putchw+0x98>
    }

    /* print sign */
    if (p->sign)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	7a1b      	ldrb	r3, [r3, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <putchw+0xbe>
        putf(putp, p->sign);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	7a1a      	ldrb	r2, [r3, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4611      	mov	r1, r2
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	4798      	blx	r3

    /* Alternate */
    if (p->alt && p->base == 16) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d016      	beq.n	8005958 <putchw+0xfa>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b10      	cmp	r3, #16
 8005930:	d112      	bne.n	8005958 <putchw+0xfa>
        putf(putp, '0');
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2130      	movs	r1, #48	; 0x30
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	4798      	blx	r3
        putf(putp, (p->uc ? 'X' : 'x'));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <putchw+0xee>
 8005948:	2258      	movs	r2, #88	; 0x58
 800594a:	e000      	b.n	800594e <putchw+0xf0>
 800594c:	2278      	movs	r2, #120	; 0x78
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4611      	mov	r1, r2
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	4798      	blx	r3
 8005956:	e00e      	b.n	8005976 <putchw+0x118>
    } else if (p->alt && p->base == 8) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <putchw+0x118>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2b08      	cmp	r3, #8
 800596c:	d103      	bne.n	8005976 <putchw+0x118>
        putf(putp, '0');
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2130      	movs	r1, #48	; 0x30
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	4798      	blx	r3
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d009      	beq.n	8005998 <putchw+0x13a>
        while (n-- > 0)
 8005984:	e003      	b.n	800598e <putchw+0x130>
            putf(putp, '0');
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2130      	movs	r1, #48	; 0x30
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	4798      	blx	r3
        while (n-- > 0)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	1e5a      	subs	r2, r3, #1
 8005992:	61fa      	str	r2, [r7, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	dcf6      	bgt.n	8005986 <putchw+0x128>
    }

    /* Put actual buffer */
    bf = p->bf;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	61bb      	str	r3, [r7, #24]
    while ((ch = *bf++) != 0)
 800599e:	e004      	b.n	80059aa <putchw+0x14c>
        putf(putp, ch);
 80059a0:	7dfa      	ldrb	r2, [r7, #23]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	4611      	mov	r1, r2
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	4798      	blx	r3
    while ((ch = *bf++) != 0)
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	61ba      	str	r2, [r7, #24]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	75fb      	strb	r3, [r7, #23]
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f2      	bne.n	80059a0 <putchw+0x142>

    /* Fill with space to align to the left, after string */
    if (!p->lz && p->align_left) {
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d110      	bne.n	80059ea <putchw+0x18c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <putchw+0x18c>
        while (n-- > 0)
 80059d6:	e003      	b.n	80059e0 <putchw+0x182>
            putf(putp, ' ');
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2120      	movs	r1, #32
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	4798      	blx	r3
        while (n-- > 0)
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	1e5a      	subs	r2, r3, #1
 80059e4:	61fa      	str	r2, [r7, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dcf6      	bgt.n	80059d8 <putchw+0x17a>
    }
}
 80059ea:	bf00      	nop
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <tfp_format>:

void tfp_format(void *putp, putcf putf, const char *fmt, va_list va)
{
 80059f2:	b590      	push	{r4, r7, lr}
 80059f4:	b091      	sub	sp, #68	; 0x44
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	603b      	str	r3, [r7, #0]
    char bf[23];  /* long = 64b on some architectures */
#else
    char bf[12];  /* int = 32b on some architectures */
#endif
    char ch;
    p.bf = bf;
 8005a00:	f107 0310 	add.w	r3, r7, #16
 8005a04:	63bb      	str	r3, [r7, #56]	; 0x38

    while ((ch = *(fmt++)) != 0) {
 8005a06:	e1ba      	b.n	8005d7e <tfp_format+0x38c>
        if (ch != '%') {
 8005a08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a0c:	2b25      	cmp	r3, #37	; 0x25
 8005a0e:	d006      	beq.n	8005a1e <tfp_format+0x2c>
            putf(putp, ch);
 8005a10:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4611      	mov	r1, r2
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	4798      	blx	r3
 8005a1c:	e1af      	b.n	8005d7e <tfp_format+0x38c>
        } else {
#ifdef PRINTF_LONG_SUPPORT
            char lng = 0;  /* 1 for long, 2 for long long */
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
#endif
            /* Init parameter struct */
            p.lz = 0;
 8005a24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a28:	f36f 0300 	bfc	r3, #0, #1
 8005a2c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            p.alt = 0;
 8005a30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a34:	f36f 0341 	bfc	r3, #1, #1
 8005a38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            p.width = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
            p.align_left = 0;
 8005a40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a44:	f36f 03c3 	bfc	r3, #3, #1
 8005a48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            p.sign = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

            /* Flags */
            while ((ch = *(fmt++)) != 0) {
 8005a52:	e01e      	b.n	8005a92 <tfp_format+0xa0>
                switch (ch) {
 8005a54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a58:	2b2d      	cmp	r3, #45	; 0x2d
 8005a5a:	d005      	beq.n	8005a68 <tfp_format+0x76>
 8005a5c:	2b30      	cmp	r3, #48	; 0x30
 8005a5e:	d00a      	beq.n	8005a76 <tfp_format+0x84>
 8005a60:	2b23      	cmp	r3, #35	; 0x23
 8005a62:	d00f      	beq.n	8005a84 <tfp_format+0x92>
                    continue;
                case '#':
                    p.alt = 1;
                    continue;
                default:
                    break;
 8005a64:	bf00      	nop
                }
                break;
 8005a66:	e01e      	b.n	8005aa6 <tfp_format+0xb4>
                    p.align_left = 1;
 8005a68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a6c:	f043 0308 	orr.w	r3, r3, #8
 8005a70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    continue;
 8005a74:	e00d      	b.n	8005a92 <tfp_format+0xa0>
                    p.lz = 1;
 8005a76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    continue;
 8005a82:	e006      	b.n	8005a92 <tfp_format+0xa0>
                    p.alt = 1;
 8005a84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a88:	f043 0302 	orr.w	r3, r3, #2
 8005a8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    continue;
 8005a90:	bf00      	nop
            while ((ch = *(fmt++)) != 0) {
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005a9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1d6      	bne.n	8005a54 <tfp_format+0x62>
            }

            /* Width */
            if (ch >= '0' && ch <= '9') {
 8005aa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005aaa:	2b2f      	cmp	r3, #47	; 0x2f
 8005aac:	d90f      	bls.n	8005ace <tfp_format+0xdc>
 8005aae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ab2:	2b39      	cmp	r3, #57	; 0x39
 8005ab4:	d80b      	bhi.n	8005ace <tfp_format+0xdc>
                ch = a2u(ch, &fmt, 10, &(p.width));
 8005ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005aba:	3304      	adds	r3, #4
 8005abc:	1d39      	adds	r1, r7, #4
 8005abe:	f897 003f 	ldrb.w	r0, [r7, #63]	; 0x3f
 8005ac2:	220a      	movs	r2, #10
 8005ac4:	f7ff fe98 	bl	80057f8 <a2u>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            }

            /* We accept 'x.y' format but don't support it completely:
             * we ignore the 'y' digit => this ignores 0-fill
             * size and makes it == width (ie. 'x') */
            if (ch == '.') {
 8005ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ad4:	d113      	bne.n	8005afe <tfp_format+0x10c>
              p.lz = 1;  /* zero-padding */
 8005ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ada:	f043 0301 	orr.w	r3, r3, #1
 8005ade:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
              /* ignore actual 0-fill size: */
              do {
                ch = *(fmt++);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              } while ((ch >= '0') && (ch <= '9'));
 8005aee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005af2:	2b2f      	cmp	r3, #47	; 0x2f
 8005af4:	d903      	bls.n	8005afe <tfp_format+0x10c>
 8005af6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005afa:	2b39      	cmp	r3, #57	; 0x39
 8005afc:	d9f1      	bls.n	8005ae2 <tfp_format+0xf0>
            }

#ifdef PRINTF_SIZE_T_SUPPORT
# ifdef PRINTF_LONG_SUPPORT
            if (ch == 'z') {
 8005afe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b02:	2b7a      	cmp	r3, #122	; 0x7a
 8005b04:	d109      	bne.n	8005b1a <tfp_format+0x128>
                ch = *(fmt++);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                if (sizeof(size_t) == sizeof(unsigned long int))
                    lng = 1;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005b18:	e019      	b.n	8005b4e <tfp_format+0x15c>
            } else
# endif
#endif

#ifdef PRINTF_LONG_SUPPORT
            if (ch == 'l') {
 8005b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b1e:	2b6c      	cmp	r3, #108	; 0x6c
 8005b20:	d115      	bne.n	8005b4e <tfp_format+0x15c>
                ch = *(fmt++);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                lng = 1;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (ch == 'l') {
 8005b34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b38:	2b6c      	cmp	r3, #108	; 0x6c
 8005b3a:	d108      	bne.n	8005b4e <tfp_format+0x15c>
                  ch = *(fmt++);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                  lng = 2;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                }
#endif
            }
#endif
            switch (ch) {
 8005b4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b52:	2b69      	cmp	r3, #105	; 0x69
 8005b54:	d05a      	beq.n	8005c0c <tfp_format+0x21a>
 8005b56:	2b69      	cmp	r3, #105	; 0x69
 8005b58:	dc11      	bgt.n	8005b7e <tfp_format+0x18c>
 8005b5a:	2b58      	cmp	r3, #88	; 0x58
 8005b5c:	f000 8096 	beq.w	8005c8c <tfp_format+0x29a>
 8005b60:	2b58      	cmp	r3, #88	; 0x58
 8005b62:	dc06      	bgt.n	8005b72 <tfp_format+0x180>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8116 	beq.w	8005d96 <tfp_format+0x3a4>
 8005b6a:	2b25      	cmp	r3, #37	; 0x25
 8005b6c:	f000 8100 	beq.w	8005d70 <tfp_format+0x37e>
 8005b70:	e104      	b.n	8005d7c <tfp_format+0x38a>
 8005b72:	2b63      	cmp	r3, #99	; 0x63
 8005b74:	f000 80e2 	beq.w	8005d3c <tfp_format+0x34a>
 8005b78:	2b64      	cmp	r3, #100	; 0x64
 8005b7a:	d047      	beq.n	8005c0c <tfp_format+0x21a>
 8005b7c:	e0fe      	b.n	8005d7c <tfp_format+0x38a>
 8005b7e:	2b73      	cmp	r3, #115	; 0x73
 8005b80:	f000 80e6 	beq.w	8005d50 <tfp_format+0x35e>
 8005b84:	2b73      	cmp	r3, #115	; 0x73
 8005b86:	dc05      	bgt.n	8005b94 <tfp_format+0x1a2>
 8005b88:	2b6f      	cmp	r3, #111	; 0x6f
 8005b8a:	f000 80c3 	beq.w	8005d14 <tfp_format+0x322>
 8005b8e:	2b70      	cmp	r3, #112	; 0x70
 8005b90:	d073      	beq.n	8005c7a <tfp_format+0x288>
 8005b92:	e0f3      	b.n	8005d7c <tfp_format+0x38a>
 8005b94:	2b75      	cmp	r3, #117	; 0x75
 8005b96:	d002      	beq.n	8005b9e <tfp_format+0x1ac>
 8005b98:	2b78      	cmp	r3, #120	; 0x78
 8005b9a:	d077      	beq.n	8005c8c <tfp_format+0x29a>
 8005b9c:	e0ee      	b.n	8005d7c <tfp_format+0x38a>
            case 0:
                goto abort;
            case 'u':
                p.base = 10;
 8005b9e:	230a      	movs	r3, #10
 8005ba0:	637b      	str	r3, [r7, #52]	; 0x34
#ifdef PRINTF_LONG_SUPPORT
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
 8005ba2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d10f      	bne.n	8005bca <tfp_format+0x1d8>
                    ulli2a(va_arg(va, unsigned long long int), &p);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	3307      	adds	r3, #7
 8005bae:	f023 0307 	bic.w	r3, r3, #7
 8005bb2:	f103 0208 	add.w	r2, r3, #8
 8005bb6:	603a      	str	r2, [r7, #0]
 8005bb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bbc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	f7ff fc5a 	bl	800547c <ulli2a>
 8005bc8:	e018      	b.n	8005bfc <tfp_format+0x20a>
                else
#endif
                  if (1 == lng)
 8005bca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10a      	bne.n	8005be8 <tfp_format+0x1f6>
                    uli2a(va_arg(va, unsigned long int), &p);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	1d1a      	adds	r2, r3, #4
 8005bd6:	603a      	str	r2, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bde:	4611      	mov	r1, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff fcf5 	bl	80055d0 <uli2a>
 8005be6:	e009      	b.n	8005bfc <tfp_format+0x20a>
                else
#endif
                    ui2a(va_arg(va, unsigned int), &p);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	603a      	str	r2, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff fd60 	bl	80056bc <ui2a>
                putchw(putp, putf, &p);
 8005bfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c00:	461a      	mov	r2, r3
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff fe2a 	bl	800585e <putchw>
                break;
 8005c0a:	e0b8      	b.n	8005d7e <tfp_format+0x38c>
            case 'd':
            case 'i':
                p.base = 10;
 8005c0c:	230a      	movs	r3, #10
 8005c0e:	637b      	str	r3, [r7, #52]	; 0x34
#ifdef PRINTF_LONG_SUPPORT
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
 8005c10:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d10f      	bne.n	8005c38 <tfp_format+0x246>
                    lli2a(va_arg(va, long long int), &p);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	3307      	adds	r3, #7
 8005c1c:	f023 0307 	bic.w	r3, r3, #7
 8005c20:	f103 0208 	add.w	r2, r3, #8
 8005c24:	603a      	str	r2, [r7, #0]
 8005c26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c2e:	4618      	mov	r0, r3
 8005c30:	4621      	mov	r1, r4
 8005c32:	f7ff fcac 	bl	800558e <lli2a>
 8005c36:	e018      	b.n	8005c6a <tfp_format+0x278>
                else
#endif
                  if (1 == lng)
 8005c38:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10a      	bne.n	8005c56 <tfp_format+0x264>
                    li2a(va_arg(va, long int), &p);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	603a      	str	r2, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fd1d 	bl	800568e <li2a>
 8005c54:	e009      	b.n	8005c6a <tfp_format+0x278>
                else
#endif
                    i2a(va_arg(va, int), &p);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	1d1a      	adds	r2, r3, #4
 8005c5a:	603a      	str	r2, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fd88 	bl	800577a <i2a>
                putchw(putp, putf, &p);
 8005c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff fdf3 	bl	800585e <putchw>
                break;
 8005c78:	e081      	b.n	8005d7e <tfp_format+0x38c>
#ifdef SIZEOF_POINTER
            case 'p':
                p.alt = 1;
 8005c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c7e:	f043 0302 	orr.w	r3, r3, #2
 8005c82:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
# if defined(SIZEOF_INT) && SIZEOF_POINTER <= SIZEOF_INT
                lng = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                lng = 2;
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	637b      	str	r3, [r7, #52]	; 0x34
                p.uc = (ch == 'X')?1:0;
 8005c90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c94:	2b58      	cmp	r3, #88	; 0x58
 8005c96:	bf0c      	ite	eq
 8005c98:	2301      	moveq	r3, #1
 8005c9a:	2300      	movne	r3, #0
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ca2:	f362 0382 	bfi	r3, r2, #2, #1
 8005ca6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
#ifdef PRINTF_LONG_SUPPORT
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
 8005caa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d10f      	bne.n	8005cd2 <tfp_format+0x2e0>
                    ulli2a(va_arg(va, unsigned long long int), &p);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	3307      	adds	r3, #7
 8005cb6:	f023 0307 	bic.w	r3, r3, #7
 8005cba:	f103 0208 	add.w	r2, r3, #8
 8005cbe:	603a      	str	r2, [r7, #0]
 8005cc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005cc8:	4618      	mov	r0, r3
 8005cca:	4621      	mov	r1, r4
 8005ccc:	f7ff fbd6 	bl	800547c <ulli2a>
 8005cd0:	e018      	b.n	8005d04 <tfp_format+0x312>
                else
#endif
                  if (1 == lng)
 8005cd2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d10a      	bne.n	8005cf0 <tfp_format+0x2fe>
                    uli2a(va_arg(va, unsigned long int), &p);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	1d1a      	adds	r2, r3, #4
 8005cde:	603a      	str	r2, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fc71 	bl	80055d0 <uli2a>
 8005cee:	e009      	b.n	8005d04 <tfp_format+0x312>
                else
#endif
                    ui2a(va_arg(va, unsigned int), &p);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	1d1a      	adds	r2, r3, #4
 8005cf4:	603a      	str	r2, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fcdc 	bl	80056bc <ui2a>
                putchw(putp, putf, &p);
 8005d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f7ff fda6 	bl	800585e <putchw>
                break;
 8005d12:	e034      	b.n	8005d7e <tfp_format+0x38c>
            case 'o':
                p.base = 8;
 8005d14:	2308      	movs	r3, #8
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34
                ui2a(va_arg(va, unsigned int), &p);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	1d1a      	adds	r2, r3, #4
 8005d1c:	603a      	str	r2, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d24:	4611      	mov	r1, r2
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff fcc8 	bl	80056bc <ui2a>
                putchw(putp, putf, &p);
 8005d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d30:	461a      	mov	r2, r3
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff fd92 	bl	800585e <putchw>
                break;
 8005d3a:	e020      	b.n	8005d7e <tfp_format+0x38c>
            case 'c':
                putf(putp, (char)(va_arg(va, int)));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	603a      	str	r2, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	4798      	blx	r3
                break;
 8005d4e:	e016      	b.n	8005d7e <tfp_format+0x38c>
            case 's':
                p.bf = va_arg(va, char *);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	1d1a      	adds	r2, r3, #4
 8005d54:	603a      	str	r2, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	63bb      	str	r3, [r7, #56]	; 0x38
                putchw(putp, putf, &p);
 8005d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d5e:	461a      	mov	r2, r3
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7ff fd7b 	bl	800585e <putchw>
                p.bf = bf;
 8005d68:	f107 0310 	add.w	r3, r7, #16
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
                break;
 8005d6e:	e006      	b.n	8005d7e <tfp_format+0x38c>
            case '%':
                putf(putp, ch);
 8005d70:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4611      	mov	r1, r2
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	4798      	blx	r3
            default:
                break;
 8005d7c:	bf00      	nop
    while ((ch = *(fmt++)) != 0) {
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f47f ae3a 	bne.w	8005a08 <tfp_format+0x16>
            }
        }
    }
 abort:;
 8005d94:	e000      	b.n	8005d98 <tfp_format+0x3a6>
                goto abort;
 8005d96:	bf00      	nop
}
 8005d98:	bf00      	nop
 8005d9a:	3744      	adds	r7, #68	; 0x44
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd90      	pop	{r4, r7, pc}

08005da0 <init_printf>:
#if TINYPRINTF_DEFINE_TFP_PRINTF
static putcf stdout_putf;
static void *stdout_putp;

void init_printf(void *putp, putcf putf)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
    stdout_putf = putf;
 8005daa:	4a06      	ldr	r2, [pc, #24]	; (8005dc4 <init_printf+0x24>)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	6013      	str	r3, [r2, #0]
    stdout_putp = putp;
 8005db0:	4a05      	ldr	r2, [pc, #20]	; (8005dc8 <init_printf+0x28>)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6013      	str	r3, [r2, #0]
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	200005e8 	.word	0x200005e8
 8005dc8:	200005ec 	.word	0x200005ec

08005dcc <tfp_printf>:

void tfp_printf(char *fmt, ...)
{
 8005dcc:	b40f      	push	{r0, r1, r2, r3}
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
    va_list va;
    va_start(va, fmt);
 8005dd4:	f107 0314 	add.w	r3, r7, #20
 8005dd8:	607b      	str	r3, [r7, #4]
    tfp_format(stdout_putp, stdout_putf, fmt, va);
 8005dda:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <tfp_printf+0x2c>)
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <tfp_printf+0x30>)
 8005de0:	6819      	ldr	r1, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	f7ff fe04 	bl	80059f2 <tfp_format>
    va_end(va);
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005df4:	b004      	add	sp, #16
 8005df6:	4770      	bx	lr
 8005df8:	200005ec 	.word	0x200005ec
 8005dfc:	200005e8 	.word	0x200005e8

08005e00 <tos_cpu_clz>:
 *---------------------------------------------------------------------------*/

#include "tos_k.h"

__API__ uint32_t tos_cpu_clz(uint32_t val)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
        nbr_lead_zeros += 1;
    }

    return (nbr_lead_zeros);
#else
    return port_clz(val);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7fa f9ec 	bl	80001e6 <port_clz>
 8005e0e:	4603      	mov	r3, r0
#endif
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <tos_cpu_cpsr_save>:
{
    port_int_enable();
}

__API__ cpu_cpsr_t tos_cpu_cpsr_save(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
    return port_cpsr_save();
 8005e1c:	f7fa f9dc 	bl	80001d8 <port_cpsr_save>
 8005e20:	4603      	mov	r3, r0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <tos_cpu_cpsr_restore>:

__API__ void tos_cpu_cpsr_restore(cpu_cpsr_t cpsr)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
    port_cpsr_restore(cpsr);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fa f9d6 	bl	80001e0 <port_cpsr_restore>
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <cpu_init>:

__KNL__ void cpu_init(void)
{
 8005e3c:	b598      	push	{r3, r4, r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
    k_cpu_cycle_per_tick = TOS_CFG_CPU_CLOCK / k_cpu_tick_per_second;
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <cpu_init+0x34>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f04f 0100 	mov.w	r1, #0
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <cpu_init+0x38>)
 8005e4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e50:	461a      	mov	r2, r3
 8005e52:	4623      	mov	r3, r4
 8005e54:	f7fa fa84 	bl	8000360 <__aeabi_uldivmod>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <cpu_init+0x3c>)
 8005e60:	601a      	str	r2, [r3, #0]
    cpu_systick_init(k_cpu_cycle_per_tick);
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <cpu_init+0x3c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f818 	bl	8005e9c <cpu_systick_init>

#if (TOS_CFG_CPU_HRTIMER_EN > 0)
    tos_cpu_hrtimer_init();
#endif
}
 8005e6c:	bf00      	nop
 8005e6e:	bd98      	pop	{r3, r4, r7, pc}
 8005e70:	20000208 	.word	0x20000208
 8005e74:	200003a0 	.word	0x200003a0
 8005e78:	20000690 	.word	0x20000690

08005e7c <cpu_sched_start>:
{
    port_cpu_reset();
}

__KNL__ void cpu_sched_start(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
    port_sched_start();
 8005e80:	f7fa f9b4 	bl	80001ec <port_sched_start>

08005e84 <cpu_context_switch>:
}

__KNL__ void cpu_context_switch(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
    port_context_switch();
 8005e88:	f7fa f9e0 	bl	800024c <port_context_switch>
}
 8005e8c:	bf00      	nop
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <cpu_irq_context_switch>:

__KNL__ void cpu_irq_context_switch(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
    port_irq_context_switch();
 8005e94:	f7fa f9df 	bl	8000256 <port_irq_context_switch>
}
 8005e98:	bf00      	nop
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <cpu_systick_init>:

__KNL__ void cpu_systick_init(k_cycle_t cycle_per_tick)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
    port_systick_priority_set(TOS_CFG_CPU_SYSTICK_PRIO);
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	f000 f8ee 	bl	8006086 <port_systick_priority_set>
    port_systick_config(cycle_per_tick);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f8e0 	bl	8006070 <port_systick_config>
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <cpu_sleep_mode_enter>:
#endif /* TOS_CFG_TICKLESS_EN */

#if TOS_CFG_PWR_MGR_EN > 0u

__KNL__ void cpu_sleep_mode_enter(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
    port_sleep_mode_enter();
 8005ebc:	f000 f8f0 	bl	80060a0 <port_sleep_mode_enter>
}
 8005ec0:	bf00      	nop
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <cpu_task_stk_init>:
__KNL__ k_stack_t *cpu_task_stk_init(void *entry,
                                              void *arg,
                                              void *exit,
                                              k_stack_t *stk_base,
                                              size_t stk_size)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
    cpu_data_t *sp;

    sp = (cpu_data_t *)&stk_base[stk_size];
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]
    sp = (cpu_data_t *)((cpu_addr_t)sp & 0xFFFFFFF8);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 0307 	bic.w	r3, r3, #7
 8005ee0:	617b      	str	r3, [r7, #20]
        *slot = 0xCC;
    }
#endif

    /* auto-saved on exception(pendSV) by hardware */
    *--sp = (cpu_data_t)0x01000000u;    /* xPSR     */
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	3b04      	subs	r3, #4
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005eee:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)entry;          /* entry    */
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3b04      	subs	r3, #4
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)exit;           /* R14 (LR) */
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	3b04      	subs	r3, #4
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x12121212u;    /* R12      */
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	3b04      	subs	r3, #4
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8005f14:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x03030303u;    /* R3       */
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	3b04      	subs	r3, #4
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8005f22:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x02020202u;    /* R2       */
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	3b04      	subs	r3, #4
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8005f30:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x01010101u;    /* R1       */
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	3b04      	subs	r3, #4
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8005f3e:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)arg;            /* R0: arg  */
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	3b04      	subs	r3, #4
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	601a      	str	r2, [r3, #0]
       2       : 1, return to PSP; 0, return to MSP
       1       : reserved, 0
       0       : reserved, 1
     */
#if defined (TOS_CFG_CPU_ARM_FPU_EN) && (TOS_CFG_CPU_ARM_FPU_EN == 1U)
    *--sp = (cpu_data_t)0xFFFFFFFDL;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3b04      	subs	r3, #4
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f06f 0202 	mvn.w	r2, #2
 8005f58:	601a      	str	r2, [r3, #0]
#endif

    *--sp = (cpu_data_t)0x11111111u;    /* R11      */
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	3b04      	subs	r3, #4
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8005f66:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x10101010u;    /* R10      */
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	3b04      	subs	r3, #4
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8005f74:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x09090909u;    /* R9       */
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	3b04      	subs	r3, #4
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8005f82:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x08080808u;    /* R8       */
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	3b04      	subs	r3, #4
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8005f90:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x07070707u;    /* R7       */
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	3b04      	subs	r3, #4
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8005f9e:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x06060606u;    /* R6       */
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	3b04      	subs	r3, #4
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8005fac:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x05050505u;    /* R5       */
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	3b04      	subs	r3, #4
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8005fba:	601a      	str	r2, [r3, #0]
    *--sp = (cpu_data_t)0x04040404u;    /* R4       */
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	3b04      	subs	r3, #4
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8005fc8:	601a      	str	r2, [r3, #0]

    return (k_stack_t *)sp;
 8005fca:	697b      	ldr	r3, [r7, #20]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <__NVIC_SetPriority>:
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	6039      	str	r1, [r7, #0]
 8005fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	db0a      	blt.n	8006002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	490c      	ldr	r1, [pc, #48]	; (8006024 <__NVIC_SetPriority+0x4c>)
 8005ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff6:	0112      	lsls	r2, r2, #4
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006000:	e00a      	b.n	8006018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	b2da      	uxtb	r2, r3
 8006006:	4908      	ldr	r1, [pc, #32]	; (8006028 <__NVIC_SetPriority+0x50>)
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	3b04      	subs	r3, #4
 8006010:	0112      	lsls	r2, r2, #4
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	440b      	add	r3, r1
 8006016:	761a      	strb	r2, [r3, #24]
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	e000e100 	.word	0xe000e100
 8006028:	e000ed00 	.word	0xe000ed00

0800602c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3b01      	subs	r3, #1
 8006038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800603c:	d301      	bcc.n	8006042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800603e:	2301      	movs	r3, #1
 8006040:	e00f      	b.n	8006062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006042:	4a0a      	ldr	r2, [pc, #40]	; (800606c <SysTick_Config+0x40>)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3b01      	subs	r3, #1
 8006048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800604a:	210f      	movs	r1, #15
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	f7ff ffc2 	bl	8005fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <SysTick_Config+0x40>)
 8006056:	2200      	movs	r2, #0
 8006058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800605a:	4b04      	ldr	r3, [pc, #16]	; (800606c <SysTick_Config+0x40>)
 800605c:	2207      	movs	r2, #7
 800605e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	e000e010 	.word	0xe000e010

08006070 <port_systick_config>:
{
    NVIC_SystemReset();
}

__PORT__ void port_systick_config(uint32_t cycle_per_tick)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
    (void)SysTick_Config(cycle_per_tick);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff ffd7 	bl	800602c <SysTick_Config>
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <port_systick_priority_set>:

__PORT__ void port_systick_priority_set(uint32_t prio)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(SysTick_IRQn, prio);
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	f7ff ffa0 	bl	8005fd8 <__NVIC_SetPriority>
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <port_sleep_mode_enter>:
#endif

#if TOS_CFG_PWR_MGR_EN > 0u

__PORT__ void port_sleep_mode_enter(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
#if 1
    HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80060a4:	2101      	movs	r1, #1
 80060a6:	2001      	movs	r0, #1
 80060a8:	f7fc fade 	bl	8002668 <HAL_PWR_EnterSLEEPMode>
#else
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
#endif
}
 80060ac:	bf00      	nop
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <esp8266_echo_close>:
    }
    return -1;
}

static int esp8266_echo_close(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08c      	sub	sp, #48	; 0x30
 80060b4:	af00      	add	r7, sp, #0
    at_echo_t echo;

    tos_at_echo_create(&echo, NULL, 0, NULL);
 80060b6:	4638      	mov	r0, r7
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	f004 fc37 	bl	800a930 <tos_at_echo_create>
    tos_at_cmd_exec(&echo, 1000, "ATE0\r\n");
 80060c2:	463b      	mov	r3, r7
 80060c4:	4a08      	ldr	r2, [pc, #32]	; (80060e8 <esp8266_echo_close+0x38>)
 80060c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80060ca:	4618      	mov	r0, r3
 80060cc:	f004 fd10 	bl	800aaf0 <tos_at_cmd_exec>
    if (echo.status == AT_ECHO_STATUS_OK) {
 80060d0:	7c3b      	ldrb	r3, [r7, #16]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <esp8266_echo_close+0x2a>
        return 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e001      	b.n	80060de <esp8266_echo_close+0x2e>
    }
    return -1;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3730      	adds	r7, #48	; 0x30
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	0800cb18 	.word	0x0800cb18

080060ec <esp8266_net_mode_set>:

static int esp8266_net_mode_set(esp8266_net_mode_t mode)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b090      	sub	sp, #64	; 0x40
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	71fb      	strb	r3, [r7, #7]
    int try = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    char *cmd = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	63bb      	str	r3, [r7, #56]	; 0x38
    at_echo_t echo;

    switch (mode) {
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d006      	beq.n	8006112 <esp8266_net_mode_set+0x26>
 8006104:	2b02      	cmp	r3, #2
 8006106:	d007      	beq.n	8006118 <esp8266_net_mode_set+0x2c>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d108      	bne.n	800611e <esp8266_net_mode_set+0x32>
        case ESP8266_NET_MODE_STA:
            cmd = "AT+CWMODE=1\r\n";
 800610c:	4b17      	ldr	r3, [pc, #92]	; (800616c <esp8266_net_mode_set+0x80>)
 800610e:	63bb      	str	r3, [r7, #56]	; 0x38
            break;
 8006110:	e008      	b.n	8006124 <esp8266_net_mode_set+0x38>
        case ESP8266_NET_MODE_AP:
            cmd = "AT+CWMODE=2\r\n";
 8006112:	4b17      	ldr	r3, [pc, #92]	; (8006170 <esp8266_net_mode_set+0x84>)
 8006114:	63bb      	str	r3, [r7, #56]	; 0x38
            break;
 8006116:	e005      	b.n	8006124 <esp8266_net_mode_set+0x38>
        case ESP8266_NET_MODE_STA_AP:
            cmd = "AT+CWMODE=3\r\n";
 8006118:	4b16      	ldr	r3, [pc, #88]	; (8006174 <esp8266_net_mode_set+0x88>)
 800611a:	63bb      	str	r3, [r7, #56]	; 0x38
            break;
 800611c:	e002      	b.n	8006124 <esp8266_net_mode_set+0x38>
        default:
            return -1;
 800611e:	f04f 33ff 	mov.w	r3, #4294967295
 8006122:	e01e      	b.n	8006162 <esp8266_net_mode_set+0x76>
    }

    tos_at_echo_create(&echo, NULL, 0, "no change");
 8006124:	f107 0008 	add.w	r0, r7, #8
 8006128:	4b13      	ldr	r3, [pc, #76]	; (8006178 <esp8266_net_mode_set+0x8c>)
 800612a:	2200      	movs	r2, #0
 800612c:	2100      	movs	r1, #0
 800612e:	f004 fbff 	bl	800a930 <tos_at_echo_create>
    while (try++ < 10) {
 8006132:	e00f      	b.n	8006154 <esp8266_net_mode_set+0x68>
        tos_at_cmd_exec(&echo, 1000, cmd);
 8006134:	f107 0308 	add.w	r3, r7, #8
 8006138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800613a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800613e:	4618      	mov	r0, r3
 8006140:	f004 fcd6 	bl	800aaf0 <tos_at_cmd_exec>
        if (echo.status == AT_ECHO_STATUS_OK || echo.status == AT_ECHO_STATUS_EXPECT) {
 8006144:	7e3b      	ldrb	r3, [r7, #24]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d002      	beq.n	8006150 <esp8266_net_mode_set+0x64>
 800614a:	7e3b      	ldrb	r3, [r7, #24]
 800614c:	2b04      	cmp	r3, #4
 800614e:	d101      	bne.n	8006154 <esp8266_net_mode_set+0x68>
            return 0;
 8006150:	2300      	movs	r3, #0
 8006152:	e006      	b.n	8006162 <esp8266_net_mode_set+0x76>
    while (try++ < 10) {
 8006154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	63fa      	str	r2, [r7, #60]	; 0x3c
 800615a:	2b09      	cmp	r3, #9
 800615c:	ddea      	ble.n	8006134 <esp8266_net_mode_set+0x48>
        }
    }
    return -1;
 800615e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006162:	4618      	mov	r0, r3
 8006164:	3740      	adds	r7, #64	; 0x40
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	0800cb20 	.word	0x0800cb20
 8006170:	0800cb30 	.word	0x0800cb30
 8006174:	0800cb40 	.word	0x0800cb40
 8006178:	0800cb50 	.word	0x0800cb50

0800617c <esp8266_send_mode_set>:

static int esp8266_send_mode_set(esp8266_send_mode_t mode)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b090      	sub	sp, #64	; 0x40
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
    int try = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
    at_echo_t echo;

    tos_at_echo_create(&echo, NULL, 0, NULL);
 800618a:	f107 000c 	add.w	r0, r7, #12
 800618e:	2300      	movs	r3, #0
 8006190:	2200      	movs	r2, #0
 8006192:	2100      	movs	r1, #0
 8006194:	f004 fbcc 	bl	800a930 <tos_at_echo_create>
    while (try++ < 10) {
 8006198:	e024      	b.n	80061e4 <esp8266_send_mode_set+0x68>
        tos_at_cmd_exec(&echo, 1000, "AT+CIPMODE=%d\r\n", mode == ESP8266_SEND_MODE_NORMAL ? 0 : 1);
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	2b00      	cmp	r3, #0
 800619e:	bf14      	ite	ne
 80061a0:	2301      	movne	r3, #1
 80061a2:	2300      	moveq	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	f107 000c 	add.w	r0, r7, #12
 80061aa:	4a14      	ldr	r2, [pc, #80]	; (80061fc <esp8266_send_mode_set+0x80>)
 80061ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061b0:	f004 fc9e 	bl	800aaf0 <tos_at_cmd_exec>

        if (echo.status == AT_ECHO_STATUS_ERROR) {
 80061b4:	7f3b      	ldrb	r3, [r7, #28]
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d10f      	bne.n	80061da <esp8266_send_mode_set+0x5e>
        	tos_at_cmd_exec(&echo, 1000, "AT+CIPMUX=0\r\n");
 80061ba:	f107 030c 	add.w	r3, r7, #12
 80061be:	4a10      	ldr	r2, [pc, #64]	; (8006200 <esp8266_send_mode_set+0x84>)
 80061c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061c4:	4618      	mov	r0, r3
 80061c6:	f004 fc93 	bl	800aaf0 <tos_at_cmd_exec>
        	tos_at_cmd_exec(&echo, 1000, "AT+CIPSERVER=0\r\n");
 80061ca:	f107 030c 	add.w	r3, r7, #12
 80061ce:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <esp8266_send_mode_set+0x88>)
 80061d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061d4:	4618      	mov	r0, r3
 80061d6:	f004 fc8b 	bl	800aaf0 <tos_at_cmd_exec>
        }

        if (echo.status == AT_ECHO_STATUS_OK) {
 80061da:	7f3b      	ldrb	r3, [r7, #28]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <esp8266_send_mode_set+0x68>
            return 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e006      	b.n	80061f2 <esp8266_send_mode_set+0x76>
    while (try++ < 10) {
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061ea:	2b09      	cmp	r3, #9
 80061ec:	ddd5      	ble.n	800619a <esp8266_send_mode_set+0x1e>
        }
    }
    return -1;
 80061ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3740      	adds	r7, #64	; 0x40
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	0800cb5c 	.word	0x0800cb5c
 8006200:	0800cb6c 	.word	0x0800cb6c
 8006204:	0800cb7c 	.word	0x0800cb7c

08006208 <esp8266_multilink_set>:

static int esp8266_multilink_set(esp8266_multilink_state_t state)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b090      	sub	sp, #64	; 0x40
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	71fb      	strb	r3, [r7, #7]
    int try = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
    at_echo_t echo;

    tos_at_echo_create(&echo, NULL, 0, "link is builded");
 8006216:	f107 000c 	add.w	r0, r7, #12
 800621a:	4b13      	ldr	r3, [pc, #76]	; (8006268 <esp8266_multilink_set+0x60>)
 800621c:	2200      	movs	r2, #0
 800621e:	2100      	movs	r1, #0
 8006220:	f004 fb86 	bl	800a930 <tos_at_echo_create>
    while (try++ < 10) {
 8006224:	e014      	b.n	8006250 <esp8266_multilink_set+0x48>
        tos_at_cmd_exec(&echo, 500, "AT+CIPMUX=%d\r\n", state == ESP8266_MULTILINK_STATE_ENABLE ? 1 : 0);
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	2b00      	cmp	r3, #0
 800622a:	bf0c      	ite	eq
 800622c:	2301      	moveq	r3, #1
 800622e:	2300      	movne	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f107 000c 	add.w	r0, r7, #12
 8006236:	4a0d      	ldr	r2, [pc, #52]	; (800626c <esp8266_multilink_set+0x64>)
 8006238:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800623c:	f004 fc58 	bl	800aaf0 <tos_at_cmd_exec>
        if (echo.status == AT_ECHO_STATUS_OK || echo.status == AT_ECHO_STATUS_EXPECT) {
 8006240:	7f3b      	ldrb	r3, [r7, #28]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d002      	beq.n	800624c <esp8266_multilink_set+0x44>
 8006246:	7f3b      	ldrb	r3, [r7, #28]
 8006248:	2b04      	cmp	r3, #4
 800624a:	d101      	bne.n	8006250 <esp8266_multilink_set+0x48>
            return 0;
 800624c:	2300      	movs	r3, #0
 800624e:	e006      	b.n	800625e <esp8266_multilink_set+0x56>
    while (try++ < 10) {
 8006250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006256:	2b09      	cmp	r3, #9
 8006258:	dde5      	ble.n	8006226 <esp8266_multilink_set+0x1e>
        }
    }
    return -1;
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800625e:	4618      	mov	r0, r3
 8006260:	3740      	adds	r7, #64	; 0x40
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	0800cb90 	.word	0x0800cb90
 800626c:	0800cba0 	.word	0x0800cba0

08006270 <esp8266_join_ap>:

int esp8266_join_ap(const char *ssid, const char *pwd)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b092      	sub	sp, #72	; 0x48
 8006274:	af02      	add	r7, sp, #8
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
    int try = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	63fb      	str	r3, [r7, #60]	; 0x3c
    at_echo_t echo;

    tos_at_echo_create(&echo, NULL, 0, "OK");
 800627e:	f107 000c 	add.w	r0, r7, #12
 8006282:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <esp8266_join_ap+0x54>)
 8006284:	2200      	movs	r2, #0
 8006286:	2100      	movs	r1, #0
 8006288:	f004 fb52 	bl	800a930 <tos_at_echo_create>
    while (try++ < 10) {
 800628c:	e00e      	b.n	80062ac <esp8266_join_ap+0x3c>
        tos_at_cmd_exec_until(&echo, 15000, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, pwd);
 800628e:	f107 000c 	add.w	r0, r7, #12
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a0b      	ldr	r2, [pc, #44]	; (80062c8 <esp8266_join_ap+0x58>)
 800629a:	f643 2198 	movw	r1, #15000	; 0x3a98
 800629e:	f004 fc5f 	bl	800ab60 <tos_at_cmd_exec_until>
        if (echo.status == AT_ECHO_STATUS_EXPECT) {
 80062a2:	7f3b      	ldrb	r3, [r7, #28]
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d101      	bne.n	80062ac <esp8266_join_ap+0x3c>
            return 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e006      	b.n	80062ba <esp8266_join_ap+0x4a>
    while (try++ < 10) {
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062b2:	2b09      	cmp	r3, #9
 80062b4:	ddeb      	ble.n	800628e <esp8266_join_ap+0x1e>
        }
    }
    return -1;
 80062b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3740      	adds	r7, #64	; 0x40
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	0800cbb0 	.word	0x0800cbb0
 80062c8:	0800cbb4 	.word	0x0800cbb4

080062cc <esp8266_reconnect_init>:
/*
    if we have got wifi unconnected once before, and now we get connected
    to ap again, we should set echo close and single/multilink again
 */
static int esp8266_reconnect_init(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
    if (esp8266_echo_close() != 0) {
 80062d0:	f7ff feee 	bl	80060b0 <esp8266_echo_close>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d006      	beq.n	80062e8 <esp8266_reconnect_init+0x1c>
        printf("esp8266 echo close FAILED\n");
 80062da:	490b      	ldr	r1, [pc, #44]	; (8006308 <esp8266_reconnect_init+0x3c>)
 80062dc:	2001      	movs	r0, #1
 80062de:	f7fe ff6d 	bl	80051bc <iDebugPrint>
        return -1;
 80062e2:	f04f 33ff 	mov.w	r3, #4294967295
 80062e6:	e00d      	b.n	8006304 <esp8266_reconnect_init+0x38>
    }

#if TOS_CFG_MODULE_SINGLE_LINK_EN > 0u
    if (esp8266_multilink_set(ESP8266_MULTILINK_STATE_DISABLE) != 0) {
 80062e8:	2001      	movs	r0, #1
 80062ea:	f7ff ff8d 	bl	8006208 <esp8266_multilink_set>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d006      	beq.n	8006302 <esp8266_reconnect_init+0x36>
        printf("esp8266 multilink set FAILED\n");
 80062f4:	4905      	ldr	r1, [pc, #20]	; (800630c <esp8266_reconnect_init+0x40>)
 80062f6:	2001      	movs	r0, #1
 80062f8:	f7fe ff60 	bl	80051bc <iDebugPrint>
        return -1;
 80062fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006300:	e000      	b.n	8006304 <esp8266_reconnect_init+0x38>
        printf("esp8266 multilink set FAILED\n");
        return -1;
    }
#endif

    return 0;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	bd80      	pop	{r7, pc}
 8006308:	0800cbcc 	.word	0x0800cbcc
 800630c:	0800cbe8 	.word	0x0800cbe8

08006310 <esp8266_connect>:

static int esp8266_connect(const char *ip, const char *port, sal_proto_t proto)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b094      	sub	sp, #80	; 0x50
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	4613      	mov	r3, r2
 800631c:	71fb      	strb	r3, [r7, #7]
    int id;
    at_echo_t echo;

    esp8266_reconnect_init();
 800631e:	f7ff ffd5 	bl	80062cc <esp8266_reconnect_init>

    id = tos_at_channel_alloc(ip, port);
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f004 fdcb 	bl	800aec0 <tos_at_channel_alloc>
 800632a:	6478      	str	r0, [r7, #68]	; 0x44
    if (id == -1) {
 800632c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d102      	bne.n	800633a <esp8266_connect+0x2a>
        return -1;
 8006334:	f04f 33ff 	mov.w	r3, #4294967295
 8006338:	e023      	b.n	8006382 <esp8266_connect+0x72>
    }

    tos_at_echo_create(&echo, NULL, 0, "OK");
 800633a:	f107 0014 	add.w	r0, r7, #20
 800633e:	4b13      	ldr	r3, [pc, #76]	; (800638c <esp8266_connect+0x7c>)
 8006340:	2200      	movs	r2, #0
 8006342:	2100      	movs	r1, #0
 8006344:	f004 faf4 	bl	800a930 <tos_at_echo_create>
#if TOS_CFG_MODULE_SINGLE_LINK_EN > 0u
    tos_at_cmd_exec_until(&echo, 10000,
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <esp8266_connect+0x42>
 800634e:	4a10      	ldr	r2, [pc, #64]	; (8006390 <esp8266_connect+0x80>)
 8006350:	e000      	b.n	8006354 <esp8266_connect+0x44>
 8006352:	4a10      	ldr	r2, [pc, #64]	; (8006394 <esp8266_connect+0x84>)
 8006354:	f107 0014 	add.w	r0, r7, #20
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	4a0d      	ldr	r2, [pc, #52]	; (8006398 <esp8266_connect+0x88>)
 8006364:	f242 7110 	movw	r1, #10000	; 0x2710
 8006368:	f004 fbfa 	bl	800ab60 <tos_at_cmd_exec_until>
#else
    tos_at_cmd_exec_until(&echo, 10000,
                        "AT+CIPSTART=%d,\"%s\",\"%s\",%s\r\n",
                        id, proto == TOS_SAL_PROTO_UDP ? "UDP" : "TCP", ip, port);
#endif
    if (echo.status == AT_ECHO_STATUS_EXPECT) {
 800636c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006370:	2b04      	cmp	r3, #4
 8006372:	d101      	bne.n	8006378 <esp8266_connect+0x68>
        return id;
 8006374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006376:	e004      	b.n	8006382 <esp8266_connect+0x72>
    }

    tos_at_channel_free(id);
 8006378:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800637a:	f004 fddd 	bl	800af38 <tos_at_channel_free>

    return -1;
 800637e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006382:	4618      	mov	r0, r3
 8006384:	3748      	adds	r7, #72	; 0x48
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	0800cbb0 	.word	0x0800cbb0
 8006390:	0800cc08 	.word	0x0800cc08
 8006394:	0800cc0c 	.word	0x0800cc0c
 8006398:	0800cc10 	.word	0x0800cc10

0800639c <esp8266_recv_timeout>:

static int esp8266_recv_timeout(int id, void *buf, size_t len, uint32_t timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
    return tos_at_channel_read_timed(id, buf, len, timeout);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f004 fcab 	bl	800ad0c <tos_at_channel_read_timed>
 80063b6:	4603      	mov	r3, r0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <esp8266_recv>:

static int esp8266_recv(int id, void *buf, size_t len)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
    return esp8266_recv_timeout(id, buf, len, (uint32_t)4000);
 80063cc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff ffe1 	bl	800639c <esp8266_recv_timeout>
 80063da:	4603      	mov	r3, r0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <esp8266_is_link_broken>:

static int esp8266_is_link_broken(const char *echo_buffer)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
    if (strstr(echo_buffer, "CLOSED") ||
 80063ec:	490a      	ldr	r1, [pc, #40]	; (8006418 <esp8266_is_link_broken+0x34>)
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f005 f8ff 	bl	800b5f2 <strstr>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <esp8266_is_link_broken+0x24>
        strstr(echo_buffer, "link is not valid")) {
 80063fa:	4908      	ldr	r1, [pc, #32]	; (800641c <esp8266_is_link_broken+0x38>)
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f005 f8f8 	bl	800b5f2 <strstr>
 8006402:	4603      	mov	r3, r0
    if (strstr(echo_buffer, "CLOSED") ||
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <esp8266_is_link_broken+0x28>
        return 1;
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <esp8266_is_link_broken+0x2a>
    }

    return 0;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	0800cc2c 	.word	0x0800cc2c
 800641c:	0800cc34 	.word	0x0800cc34

08006420 <esp8266_send>:
    tos_at_global_lock_post();
    return len;
}
#else
static int esp8266_send(int id, const void *buf, size_t len)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b0a0      	sub	sp, #128	; 0x80
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
    at_echo_t echo;
    char echo_buffer[64];

    if (!tos_at_channel_is_working(id)) {
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f004 fdce 	bl	800afce <tos_at_channel_is_working>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <esp8266_send+0x1e>
        return -1;
 8006438:	f04f 33ff 	mov.w	r3, #4294967295
 800643c:	e054      	b.n	80064e8 <esp8266_send+0xc8>
    }

    if (tos_at_global_lock_pend() != 0) {
 800643e:	f003 ffdf 	bl	800a400 <tos_at_global_lock_pend>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <esp8266_send+0x2e>
        return -1;
 8006448:	f04f 33ff 	mov.w	r3, #4294967295
 800644c:	e04c      	b.n	80064e8 <esp8266_send+0xc8>
    }

    tos_at_echo_create(&echo, echo_buffer, sizeof(echo_buffer), ">");
 800644e:	f107 0110 	add.w	r1, r7, #16
 8006452:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006456:	4b26      	ldr	r3, [pc, #152]	; (80064f0 <esp8266_send+0xd0>)
 8006458:	2240      	movs	r2, #64	; 0x40
 800645a:	f004 fa69 	bl	800a930 <tos_at_echo_create>
#if TOS_CFG_MODULE_SINGLE_LINK_EN > 0u
    tos_at_cmd_exec(&echo, 1000,
 800645e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a23      	ldr	r2, [pc, #140]	; (80064f4 <esp8266_send+0xd4>)
 8006466:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800646a:	f004 fb41 	bl	800aaf0 <tos_at_cmd_exec>
#else
    tos_at_cmd_exec(&echo, 1000,
                        "AT+CIPSEND=%d,%d\r\n",
                        id, len);
#endif
    if (echo.status != AT_ECHO_STATUS_OK && echo.status != AT_ECHO_STATUS_EXPECT) {
 800646e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006472:	2b01      	cmp	r3, #1
 8006474:	d012      	beq.n	800649c <esp8266_send+0x7c>
 8006476:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800647a:	2b04      	cmp	r3, #4
 800647c:	d00e      	beq.n	800649c <esp8266_send+0x7c>
        if (esp8266_is_link_broken((const char *)echo.buffer)) {
 800647e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff ffaf 	bl	80063e4 <esp8266_is_link_broken>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <esp8266_send+0x72>
            tos_at_channel_set_broken(id);
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f004 fd84 	bl	800af9a <tos_at_channel_set_broken>
        }

        tos_at_global_lock_post();
 8006492:	f003 ffc5 	bl	800a420 <tos_at_global_lock_post>
        return -1;
 8006496:	f04f 33ff 	mov.w	r3, #4294967295
 800649a:	e025      	b.n	80064e8 <esp8266_send+0xc8>
    }

    tos_at_echo_create(&echo, echo_buffer, sizeof(echo_buffer), "SEND OK");
 800649c:	f107 0110 	add.w	r1, r7, #16
 80064a0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80064a4:	4b14      	ldr	r3, [pc, #80]	; (80064f8 <esp8266_send+0xd8>)
 80064a6:	2240      	movs	r2, #64	; 0x40
 80064a8:	f004 fa42 	bl	800a930 <tos_at_echo_create>

    /*
        ATTENTION: we should wait util "SEND OK" is echoed, otherwise the next
        time we execute at command, the esp8266 maybe in a "busy s ..." state.
     */
    tos_at_raw_data_send_until(&echo, 10000, (uint8_t *)buf, len);
 80064ac:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	f242 7110 	movw	r1, #10000	; 0x2710
 80064b8:	f004 fa92 	bl	800a9e0 <tos_at_raw_data_send_until>
    if (echo.status != AT_ECHO_STATUS_EXPECT) {
 80064bc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d00e      	beq.n	80064e2 <esp8266_send+0xc2>
        if (esp8266_is_link_broken((const char *)echo.buffer)) {
 80064c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff ff8c 	bl	80063e4 <esp8266_is_link_broken>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <esp8266_send+0xb8>
            tos_at_channel_set_broken(id);
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f004 fd61 	bl	800af9a <tos_at_channel_set_broken>
        }

        tos_at_global_lock_post();
 80064d8:	f003 ffa2 	bl	800a420 <tos_at_global_lock_post>
        return -1;
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	e002      	b.n	80064e8 <esp8266_send+0xc8>
    }

    tos_at_global_lock_post();
 80064e2:	f003 ff9d 	bl	800a420 <tos_at_global_lock_post>
    return len;
 80064e6:	687b      	ldr	r3, [r7, #4]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3780      	adds	r7, #128	; 0x80
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	0800cc48 	.word	0x0800cc48
 80064f4:	0800cc4c 	.word	0x0800cc4c
 80064f8:	0800cc5c 	.word	0x0800cc5c

080064fc <esp8266_sendto>:
#endif

static int esp8266_sendto(int id, char *ip, char *port, const void *buf, size_t len)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b0a2      	sub	sp, #136	; 0x88
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
    at_echo_t echo;
    char echo_buffer[64];

    if (!tos_at_channel_is_working(id)) {
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f004 fd5f 	bl	800afce <tos_at_channel_is_working>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <esp8266_sendto+0x20>
        return -1;
 8006516:	f04f 33ff 	mov.w	r3, #4294967295
 800651a:	e06b      	b.n	80065f4 <esp8266_sendto+0xf8>
    }

    if (tos_at_global_lock_pend() != 0) {
 800651c:	f003 ff70 	bl	800a400 <tos_at_global_lock_pend>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <esp8266_sendto+0x30>
        return -1;
 8006526:	f04f 33ff 	mov.w	r3, #4294967295
 800652a:	e063      	b.n	80065f4 <esp8266_sendto+0xf8>
    }

    tos_at_echo_create(&echo, echo_buffer, sizeof(echo_buffer), ">");
 800652c:	f107 0110 	add.w	r1, r7, #16
 8006530:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006534:	4b31      	ldr	r3, [pc, #196]	; (80065fc <esp8266_sendto+0x100>)
 8006536:	2240      	movs	r2, #64	; 0x40
 8006538:	f004 f9fa 	bl	800a930 <tos_at_echo_create>

    if (ip && port) {
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d010      	beq.n	8006564 <esp8266_sendto+0x68>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00d      	beq.n	8006564 <esp8266_sendto+0x68>
#if TOS_CFG_MODULE_SINGLE_LINK_EN > 0u
        tos_at_cmd_exec(&echo, 1000,
 8006548:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006558:	4a29      	ldr	r2, [pc, #164]	; (8006600 <esp8266_sendto+0x104>)
 800655a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800655e:	f004 fac7 	bl	800aaf0 <tos_at_cmd_exec>
 8006562:	e008      	b.n	8006576 <esp8266_sendto+0x7a>
        tos_at_cmd_exec(&echo, 1000,
                            "AT+CIPSEND=%d,%d,\"%s\",%s\r\n", id, len, ip, port);
#endif
    } else {
#if TOS_CFG_MODULE_SINGLE_LINK_EN > 0u
        tos_at_cmd_exec(&echo, 1000,
 8006564:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8006568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800656c:	4a25      	ldr	r2, [pc, #148]	; (8006604 <esp8266_sendto+0x108>)
 800656e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006572:	f004 fabd 	bl	800aaf0 <tos_at_cmd_exec>
        tos_at_cmd_exec(&echo, 1000,
                            "AT+CIPSEND=%d,%d\r\n", id, len);
#endif
    }

    if (echo.status != AT_ECHO_STATUS_OK && echo.status != AT_ECHO_STATUS_EXPECT) {
 8006576:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800657a:	2b01      	cmp	r3, #1
 800657c:	d012      	beq.n	80065a4 <esp8266_sendto+0xa8>
 800657e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006582:	2b04      	cmp	r3, #4
 8006584:	d00e      	beq.n	80065a4 <esp8266_sendto+0xa8>
        if (esp8266_is_link_broken((const char *)echo.buffer)) {
 8006586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff ff2b 	bl	80063e4 <esp8266_is_link_broken>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <esp8266_sendto+0x9e>
            tos_at_channel_set_broken(id);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f004 fd00 	bl	800af9a <tos_at_channel_set_broken>
        }

        tos_at_global_lock_post();
 800659a:	f003 ff41 	bl	800a420 <tos_at_global_lock_post>
        return -1;
 800659e:	f04f 33ff 	mov.w	r3, #4294967295
 80065a2:	e027      	b.n	80065f4 <esp8266_sendto+0xf8>
    }

    tos_at_echo_create(&echo, echo_buffer, sizeof(echo_buffer), "SEND OK");
 80065a4:	f107 0110 	add.w	r1, r7, #16
 80065a8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80065ac:	4b16      	ldr	r3, [pc, #88]	; (8006608 <esp8266_sendto+0x10c>)
 80065ae:	2240      	movs	r2, #64	; 0x40
 80065b0:	f004 f9be 	bl	800a930 <tos_at_echo_create>

    /*
        ATTENTION: we should wait util "SEND OK" is echoed, otherwise the next
        time we execute at command, the esp8266 maybe in a "busy s ..." state.
     */
    tos_at_raw_data_send_until(&echo, 10000, (uint8_t *)buf, len);
 80065b4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80065b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	f242 7110 	movw	r1, #10000	; 0x2710
 80065c2:	f004 fa0d 	bl	800a9e0 <tos_at_raw_data_send_until>
    if (echo.status != AT_ECHO_STATUS_EXPECT) {
 80065c6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d00e      	beq.n	80065ec <esp8266_sendto+0xf0>
        if (esp8266_is_link_broken((const char *)echo.buffer)) {
 80065ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff ff07 	bl	80063e4 <esp8266_is_link_broken>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <esp8266_sendto+0xe6>
            tos_at_channel_set_broken(id);
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f004 fcdc 	bl	800af9a <tos_at_channel_set_broken>
        }

        tos_at_global_lock_post();
 80065e2:	f003 ff1d 	bl	800a420 <tos_at_global_lock_post>
        return -1;
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ea:	e003      	b.n	80065f4 <esp8266_sendto+0xf8>
    }

    tos_at_global_lock_post();
 80065ec:	f003 ff18 	bl	800a420 <tos_at_global_lock_post>
    return len;
 80065f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3780      	adds	r7, #128	; 0x80
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	0800cc48 	.word	0x0800cc48
 8006600:	0800cc64 	.word	0x0800cc64
 8006604:	0800cc4c 	.word	0x0800cc4c
 8006608:	0800cc5c 	.word	0x0800cc5c

0800660c <esp8266_recvfrom_timeout>:

static int esp8266_recvfrom_timeout(int id, void *buf, size_t len, uint32_t timeout)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
    return tos_at_channel_read_timed(id, buf, len, timeout);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f004 fb73 	bl	800ad0c <tos_at_channel_read_timed>
 8006626:	4603      	mov	r3, r0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <esp8266_recvfrom>:

static int esp8266_recvfrom(int id, void *buf, size_t len)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
    return esp8266_recvfrom_timeout(id, buf, len, (uint32_t)4000);
 800663c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff ffe1 	bl	800660c <esp8266_recvfrom_timeout>
 800664a:	4603      	mov	r3, r0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <esp8266_transparent_mode_exit>:

static void esp8266_transparent_mode_exit(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
    tos_at_cmd_exec(NULL, 500, "+++");
 8006658:	4a03      	ldr	r2, [pc, #12]	; (8006668 <esp8266_transparent_mode_exit+0x14>)
 800665a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800665e:	2000      	movs	r0, #0
 8006660:	f004 fa46 	bl	800aaf0 <tos_at_cmd_exec>
}
 8006664:	bf00      	nop
 8006666:	bd80      	pop	{r7, pc}
 8006668:	0800cc7c 	.word	0x0800cc7c

0800666c <esp8266_close>:

static int esp8266_close(int id)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
#if TOS_CFG_SEND_MODE_NORMAL_EN > 0u
	esp8266_transparent_mode_exit();
#endif

#if TOS_CFG_MODULE_SINGLE_LINK_EN > 0u
    tos_at_cmd_exec(NULL, 1000, "AT+CIPCLOSE\r\n");
 8006674:	4a06      	ldr	r2, [pc, #24]	; (8006690 <esp8266_close+0x24>)
 8006676:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800667a:	2000      	movs	r0, #0
 800667c:	f004 fa38 	bl	800aaf0 <tos_at_cmd_exec>
#else
    tos_at_cmd_exec(NULL, 1000, "AT+CIPCLOSE=%d\r\n", id);
#endif
    tos_at_channel_free(id);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f004 fc59 	bl	800af38 <tos_at_channel_free>
    return 0;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	0800cc80 	.word	0x0800cc80

08006694 <esp8266_parse_domain>:

static int esp8266_parse_domain(const char *host_name, char *host_ip, size_t host_ip_len)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b0a2      	sub	sp, #136	; 0x88
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
    char *str;
    at_echo_t echo;
    char echo_buffer[64];

    esp8266_reconnect_init();
 80066a0:	f7ff fe14 	bl	80062cc <esp8266_reconnect_init>

    tos_at_echo_create(&echo, echo_buffer, sizeof(echo_buffer), NULL);
 80066a4:	f107 0114 	add.w	r1, r7, #20
 80066a8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80066ac:	2300      	movs	r3, #0
 80066ae:	2240      	movs	r2, #64	; 0x40
 80066b0:	f004 f93e 	bl	800a930 <tos_at_echo_create>
    tos_at_cmd_exec(&echo, 2000, "AT+CIPDOMAIN=\"%s\"\r\n", host_name);
 80066b4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a18      	ldr	r2, [pc, #96]	; (800671c <esp8266_parse_domain+0x88>)
 80066bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80066c0:	f004 fa16 	bl	800aaf0 <tos_at_cmd_exec>

    if (echo.status != AT_ECHO_STATUS_OK) {
 80066c4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d002      	beq.n	80066d2 <esp8266_parse_domain+0x3e>
        return -1;
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295
 80066d0:	e01f      	b.n	8006712 <esp8266_parse_domain+0x7e>
    }

    /*
    +CIPDOMAIN:183.232.231.172
     */
    str = strstr((const char *)echo.buffer, "+CIPDOMAIN:");
 80066d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d4:	4912      	ldr	r1, [pc, #72]	; (8006720 <esp8266_parse_domain+0x8c>)
 80066d6:	4618      	mov	r0, r3
 80066d8:	f004 ff8b 	bl	800b5f2 <strstr>
 80066dc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    if (!str) {
 80066e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <esp8266_parse_domain+0x5a>
        return -1;
 80066e8:	f04f 33ff 	mov.w	r3, #4294967295
 80066ec:	e011      	b.n	8006712 <esp8266_parse_domain+0x7e>
    }
    sscanf(str, "+CIPDOMAIN:%s", host_ip);
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	490c      	ldr	r1, [pc, #48]	; (8006724 <esp8266_parse_domain+0x90>)
 80066f2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80066f6:	f004 ff29 	bl	800b54c <siscanf>
    host_ip[host_ip_len - 1] = '\0';
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	4413      	add	r3, r2
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
    printf("GOT IP: %s\n", host_ip);
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	4907      	ldr	r1, [pc, #28]	; (8006728 <esp8266_parse_domain+0x94>)
 800670a:	2001      	movs	r0, #1
 800670c:	f7fe fd56 	bl	80051bc <iDebugPrint>
    return 0;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3788      	adds	r7, #136	; 0x88
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	0800cc90 	.word	0x0800cc90
 8006720:	0800cca4 	.word	0x0800cca4
 8006724:	0800ccb0 	.word	0x0800ccb0
 8006728:	0800ccc0 	.word	0x0800ccc0

0800672c <esp8266_init>:

static int esp8266_init(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
    printf("Init ESP8266 ...\n" );
 8006730:	491f      	ldr	r1, [pc, #124]	; (80067b0 <esp8266_init+0x84>)
 8006732:	2001      	movs	r0, #1
 8006734:	f7fe fd42 	bl	80051bc <iDebugPrint>

    esp8266_transparent_mode_exit();
 8006738:	f7ff ff8c 	bl	8006654 <esp8266_transparent_mode_exit>
//    if (esp8266_restore() != 0) {
//        printf("esp8266 restore FAILED\n");
//        return -1;
//    }

    if (esp8266_echo_close() != 0) {
 800673c:	f7ff fcb8 	bl	80060b0 <esp8266_echo_close>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d006      	beq.n	8006754 <esp8266_init+0x28>
        printf("esp8266 echo close FAILED\n");
 8006746:	491b      	ldr	r1, [pc, #108]	; (80067b4 <esp8266_init+0x88>)
 8006748:	2001      	movs	r0, #1
 800674a:	f7fe fd37 	bl	80051bc <iDebugPrint>
        return -1;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	e02b      	b.n	80067ac <esp8266_init+0x80>
    }

    if (esp8266_net_mode_set(ESP8266_NET_MODE_STA_AP) != 0) {
 8006754:	2002      	movs	r0, #2
 8006756:	f7ff fcc9 	bl	80060ec <esp8266_net_mode_set>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d006      	beq.n	800676e <esp8266_init+0x42>
        printf("esp8266 net mode set FAILED\n");
 8006760:	4915      	ldr	r1, [pc, #84]	; (80067b8 <esp8266_init+0x8c>)
 8006762:	2001      	movs	r0, #1
 8006764:	f7fe fd2a 	bl	80051bc <iDebugPrint>
        return -1;
 8006768:	f04f 33ff 	mov.w	r3, #4294967295
 800676c:	e01e      	b.n	80067ac <esp8266_init+0x80>
    if (esp8266_send_mode_set(ESP8266_SEND_MODE_TRANSPARENT) != 0) {
        printf("esp8266 send mode set FAILED\n");
        return -1;
    }
#else
    if (esp8266_send_mode_set(ESP8266_SEND_MODE_NORMAL) != 0) {
 800676e:	2000      	movs	r0, #0
 8006770:	f7ff fd04 	bl	800617c <esp8266_send_mode_set>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d006      	beq.n	8006788 <esp8266_init+0x5c>
        printf("esp8266 send mode set FAILED\n");
 800677a:	4910      	ldr	r1, [pc, #64]	; (80067bc <esp8266_init+0x90>)
 800677c:	2001      	movs	r0, #1
 800677e:	f7fe fd1d 	bl	80051bc <iDebugPrint>
        return -1;
 8006782:	f04f 33ff 	mov.w	r3, #4294967295
 8006786:	e011      	b.n	80067ac <esp8266_init+0x80>
    }
#endif

    //连接模式：单/多
#if TOS_CFG_MODULE_SINGLE_LINK_EN > 0u
    if (esp8266_multilink_set(ESP8266_MULTILINK_STATE_DISABLE) != 0) {
 8006788:	2001      	movs	r0, #1
 800678a:	f7ff fd3d 	bl	8006208 <esp8266_multilink_set>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d006      	beq.n	80067a2 <esp8266_init+0x76>
        printf("esp8266 multilink set FAILED\n");
 8006794:	490a      	ldr	r1, [pc, #40]	; (80067c0 <esp8266_init+0x94>)
 8006796:	2001      	movs	r0, #1
 8006798:	f7fe fd10 	bl	80051bc <iDebugPrint>
        return -1;
 800679c:	f04f 33ff 	mov.w	r3, #4294967295
 80067a0:	e004      	b.n	80067ac <esp8266_init+0x80>
        printf("esp8266 multilink set FAILED\n");
        return -1;
    }
#endif

    printf("Init ESP8266 Done\n" );
 80067a2:	4908      	ldr	r1, [pc, #32]	; (80067c4 <esp8266_init+0x98>)
 80067a4:	2001      	movs	r0, #1
 80067a6:	f7fe fd09 	bl	80051bc <iDebugPrint>
    return 0;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	0800cccc 	.word	0x0800cccc
 80067b4:	0800cbcc 	.word	0x0800cbcc
 80067b8:	0800cce0 	.word	0x0800cce0
 80067bc:	0800cd00 	.word	0x0800cd00
 80067c0:	0800cbe8 	.word	0x0800cbe8
 80067c4:	0800cd20 	.word	0x0800cd20

080067c8 <esp8266_incoming_data_process>:

#if 1
__STATIC__ void esp8266_incoming_data_process(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
    uint8_t data;
    int channel_id = 0, data_len = 0, read_len;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]
        channel_id = channel_id * 10 + (data - '0');
    }
#endif

    while (1) {
        if (tos_at_uart_read(&data, 1) != 1) {
 80067d6:	1cfb      	adds	r3, r7, #3
 80067d8:	2101      	movs	r1, #1
 80067da:	4618      	mov	r0, r3
 80067dc:	f003 fec4 	bl	800a568 <tos_at_uart_read>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d134      	bne.n	8006850 <esp8266_incoming_data_process+0x88>
            return;
        }
        if (data == ':') {
 80067e6:	78fb      	ldrb	r3, [r7, #3]
 80067e8:	2b3a      	cmp	r3, #58	; 0x3a
 80067ea:	d100      	bne.n	80067ee <esp8266_incoming_data_process+0x26>
            break;
 80067ec:	e00a      	b.n	8006804 <esp8266_incoming_data_process+0x3c>
        }
        data_len = data_len * 10 + (data - '0');
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	461a      	mov	r2, r3
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	3b30      	subs	r3, #48	; 0x30
 80067fe:	4413      	add	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
        if (tos_at_uart_read(&data, 1) != 1) {
 8006802:	e7e8      	b.n	80067d6 <esp8266_incoming_data_process+0xe>
    }

    do {
#define MIN(a, b)   ((a) < (b) ? (a) : (b))
        read_len = MIN(data_len, sizeof(buffer));
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b80      	cmp	r3, #128	; 0x80
 8006808:	bf28      	it	cs
 800680a:	2380      	movcs	r3, #128	; 0x80
 800680c:	607b      	str	r3, [r7, #4]
        if (tos_at_uart_read(buffer, read_len) != read_len) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4619      	mov	r1, r3
 8006812:	4813      	ldr	r0, [pc, #76]	; (8006860 <esp8266_incoming_data_process+0x98>)
 8006814:	f003 fea8 	bl	800a568 <tos_at_uart_read>
 8006818:	4602      	mov	r2, r0
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4293      	cmp	r3, r2
 800681e:	d119      	bne.n	8006854 <esp8266_incoming_data_process+0x8c>
            return;
        }

        if (tos_at_channel_write(channel_id, buffer, read_len) <= 0) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	461a      	mov	r2, r3
 8006824:	490e      	ldr	r1, [pc, #56]	; (8006860 <esp8266_incoming_data_process+0x98>)
 8006826:	68b8      	ldr	r0, [r7, #8]
 8006828:	f004 fada 	bl	800ade0 <tos_at_channel_write>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	dd12      	ble.n	8006858 <esp8266_incoming_data_process+0x90>
            return;
        }

        data_len -= read_len;
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	60fb      	str	r3, [r7, #12]
    } while (data_len > 0);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	dce1      	bgt.n	8006804 <esp8266_incoming_data_process+0x3c>

	if (rec_callbacker) {
 8006840:	4b08      	ldr	r3, [pc, #32]	; (8006864 <esp8266_incoming_data_process+0x9c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <esp8266_incoming_data_process+0x92>
		rec_callbacker();
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <esp8266_incoming_data_process+0x9c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4798      	blx	r3
 800684e:	e004      	b.n	800685a <esp8266_incoming_data_process+0x92>
            return;
 8006850:	bf00      	nop
 8006852:	e002      	b.n	800685a <esp8266_incoming_data_process+0x92>
            return;
 8006854:	bf00      	nop
 8006856:	e000      	b.n	800685a <esp8266_incoming_data_process+0x92>
            return;
 8006858:	bf00      	nop
	}
}
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200005f8 	.word	0x200005f8
 8006864:	200005f4 	.word	0x200005f4

08006868 <esp8266_sal_init>:
    .close              = esp8266_close,
    .parse_domain       = esp8266_parse_domain,
};

int esp8266_sal_init(hal_uart_port_t uart_port)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	71fb      	strb	r3, [r7, #7]
	if (sal_inited) {
 8006872:	4b18      	ldr	r3, [pc, #96]	; (80068d4 <esp8266_sal_init+0x6c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <esp8266_sal_init+0x22>
		//初始化模组
		if (tos_sal_module_init() != 0) {
 800687a:	f004 fd13 	bl	800b2a4 <tos_sal_module_init>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d022      	beq.n	80068ca <esp8266_sal_init+0x62>
			return -1;
 8006884:	f04f 33ff 	mov.w	r3, #4294967295
 8006888:	e020      	b.n	80068cc <esp8266_sal_init+0x64>
		}
	} else {
	    if (tos_at_init(uart_port, esp8266_at_event,
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	2201      	movs	r2, #1
 800688e:	4912      	ldr	r1, [pc, #72]	; (80068d8 <esp8266_sal_init+0x70>)
 8006890:	4618      	mov	r0, r3
 8006892:	f004 fc01 	bl	800b098 <tos_at_init>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <esp8266_sal_init+0x3a>
	                        sizeof(esp8266_at_event) / sizeof(esp8266_at_event[0])) != 0) {
	        return -1;
 800689c:	f04f 33ff 	mov.w	r3, #4294967295
 80068a0:	e014      	b.n	80068cc <esp8266_sal_init+0x64>
	    }

	    if (tos_sal_module_register(&sal_module_esp8266) != 0) {
 80068a2:	480e      	ldr	r0, [pc, #56]	; (80068dc <esp8266_sal_init+0x74>)
 80068a4:	f004 fce6 	bl	800b274 <tos_sal_module_register>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <esp8266_sal_init+0x4c>
	        return -1;
 80068ae:	f04f 33ff 	mov.w	r3, #4294967295
 80068b2:	e00b      	b.n	80068cc <esp8266_sal_init+0x64>
	    }

	    sal_inited = 1;
 80068b4:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <esp8266_sal_init+0x6c>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

	    if (tos_sal_module_init() != 0) {
 80068ba:	f004 fcf3 	bl	800b2a4 <tos_sal_module_init>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <esp8266_sal_init+0x62>
	        return -1;
 80068c4:	f04f 33ff 	mov.w	r3, #4294967295
 80068c8:	e000      	b.n	80068cc <esp8266_sal_init+0x64>
	    }
	}

    return 0;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	200005f0 	.word	0x200005f0
 80068d8:	20000364 	.word	0x20000364
 80068dc:	2000036c 	.word	0x2000036c

080068e0 <esp8266_rec_callback_regist>:
    tos_at_deinit();
    
    return 0;
}

int esp8266_rec_callback_regist(esp8266_rec_callbacker_def callbacker) {
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	if (rec_callbacker == NULL) {
 80068e8:	4b08      	ldr	r3, [pc, #32]	; (800690c <esp8266_rec_callback_regist+0x2c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <esp8266_rec_callback_regist+0x1a>
		rec_callbacker = callbacker;
 80068f0:	4a06      	ldr	r2, [pc, #24]	; (800690c <esp8266_rec_callback_regist+0x2c>)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6013      	str	r3, [r2, #0]
		return 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e001      	b.n	80068fe <esp8266_rec_callback_regist+0x1e>
	}
	return -1;
 80068fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	200005f4 	.word	0x200005f4

08006910 <knl_object_verify>:
__KNL__ k_err_t knl_idle_init(void);

#if TOS_CFG_OBJECT_VERIFY_EN > 0u

__KNL__ __STATIC_INLINE__ int knl_object_verify(knl_obj_t *knl_obj, knl_obj_type_t type)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	807b      	strh	r3, [r7, #2]
    return knl_obj->type == type;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	885b      	ldrh	r3, [r3, #2]
 8006920:	887a      	ldrh	r2, [r7, #2]
 8006922:	429a      	cmp	r2, r3
 8006924:	bf0c      	ite	eq
 8006926:	2301      	moveq	r3, #1
 8006928:	2300      	movne	r3, #0
 800692a:	b2db      	uxtb	r3, r3
}
 800692c:	4618      	mov	r0, r3
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <knl_object_init>:

__KNL__ __STATIC_INLINE__ void knl_object_init(knl_obj_t *knl_obj, knl_obj_type_t type)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	807b      	strh	r3, [r7, #2]
    knl_obj->type = type;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	887a      	ldrh	r2, [r7, #2]
 8006948:	805a      	strh	r2, [r3, #2]
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <knl_object_deinit>:

__KNL__ __STATIC_INLINE__ void knl_object_deinit(knl_obj_t *knl_obj)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
    knl_obj->type = KNL_OBJ_TYPE_NONE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	805a      	strh	r2, [r3, #2]
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <knl_object_alloc_reset>:

#endif

__KNL__ __STATIC_INLINE__ void knl_object_alloc_reset(knl_obj_t *knl_obj)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
    knl_obj->alloc_type = KNL_OBJ_ALLOC_TYPE_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <knl_object_alloc_set_static>:
{
    knl_obj->alloc_type = KNL_OBJ_ALLOC_TYPE_DYNAMIC;
}

__KNL__ __STATIC_INLINE__ void knl_object_alloc_set_static(knl_obj_t *knl_obj)
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
    knl_obj->alloc_type = KNL_OBJ_ALLOC_TYPE_STATIC;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	701a      	strb	r2, [r3, #0]
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <knl_object_alloc_is_static>:
{
    return knl_obj->alloc_type == KNL_OBJ_ALLOC_TYPE_DYNAMIC;
}

__KNL__ __STATIC_INLINE__ int knl_object_alloc_is_static(knl_obj_t *knl_obj)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
    return knl_obj->alloc_type == KNL_OBJ_ALLOC_TYPE_STATIC;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	bf0c      	ite	eq
 80069b4:	2301      	moveq	r3, #1
 80069b6:	2300      	movne	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <tos_chr_fifo_create>:
 *---------------------------------------------------------------------------*/

#include "tos_k.h"

__API__ k_err_t tos_chr_fifo_create(k_chr_fifo_t *chr_fifo, void *buffer, size_t size)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
    k_err_t err;

    TOS_PTR_SANITY_CHECK(chr_fifo);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bf0c      	ite	eq
 80069d8:	2301      	moveq	r3, #1
 80069da:	2300      	movne	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <tos_chr_fifo_create+0x22>
 80069e2:	f240 434c 	movw	r3, #1100	; 0x44c
 80069e6:	e023      	b.n	8006a30 <tos_chr_fifo_create+0x6a>
    TOS_PTR_SANITY_CHECK(buffer);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <tos_chr_fifo_create+0x38>
 80069f8:	f240 434c 	movw	r3, #1100	; 0x44c
 80069fc:	e018      	b.n	8006a30 <tos_chr_fifo_create+0x6a>

    err = tos_ring_q_create(&chr_fifo->ring_q, buffer, size, sizeof(uint8_t));
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1d18      	adds	r0, r3, #4
 8006a02:	2301      	movs	r3, #1
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	f001 fbdb 	bl	80081c2 <tos_ring_q_create>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	82fb      	strh	r3, [r7, #22]
    if (err != K_ERR_NONE) {
 8006a10:	8afb      	ldrh	r3, [r7, #22]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <tos_chr_fifo_create+0x54>
        return err;
 8006a16:	8afb      	ldrh	r3, [r7, #22]
 8006a18:	e00a      	b.n	8006a30 <tos_chr_fifo_create+0x6a>
    }

    TOS_OBJ_INIT(chr_fifo, KNL_OBJ_TYPE_CHAR_FIFO);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f64d 21d2 	movw	r1, #56018	; 0xdad2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff ff89 	bl	8006938 <knl_object_init>
    knl_object_alloc_set_static(&chr_fifo->knl_obj);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff ffae 	bl	800698a <knl_object_alloc_set_static>

    return K_ERR_NONE;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <tos_chr_fifo_destroy>:

__API__ k_err_t tos_chr_fifo_destroy(k_chr_fifo_t *chr_fifo)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
    k_err_t err;

    TOS_PTR_SANITY_CHECK(chr_fifo);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf0c      	ite	eq
 8006a46:	2301      	moveq	r3, #1
 8006a48:	2300      	movne	r3, #0
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <tos_chr_fifo_destroy+0x1e>
 8006a50:	f240 434c 	movw	r3, #1100	; 0x44c
 8006a54:	e02a      	b.n	8006aac <tos_chr_fifo_destroy+0x74>
    TOS_OBJ_VERIFY(chr_fifo, KNL_OBJ_TYPE_CHAR_FIFO);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f64d 21d2 	movw	r1, #56018	; 0xdad2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff ff57 	bl	8006910 <knl_object_verify>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <tos_chr_fifo_destroy+0x36>
 8006a68:	f240 434d 	movw	r3, #1101	; 0x44d
 8006a6c:	e01e      	b.n	8006aac <tos_chr_fifo_destroy+0x74>

    if (!knl_object_alloc_is_static(&chr_fifo->knl_obj)) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff ff97 	bl	80069a4 <knl_object_alloc_is_static>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d102      	bne.n	8006a82 <tos_chr_fifo_destroy+0x4a>
        return K_ERR_OBJ_INVALID_ALLOC_TYPE;
 8006a7c:	f240 434e 	movw	r3, #1102	; 0x44e
 8006a80:	e014      	b.n	8006aac <tos_chr_fifo_destroy+0x74>
    }

    err = tos_ring_q_destroy(&chr_fifo->ring_q);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3304      	adds	r3, #4
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 fbd9 	bl	800823e <tos_ring_q_destroy>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	81fb      	strh	r3, [r7, #14]
    if (err != K_ERR_NONE) {
 8006a90:	89fb      	ldrh	r3, [r7, #14]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <tos_chr_fifo_destroy+0x62>
        return err;
 8006a96:	89fb      	ldrh	r3, [r7, #14]
 8006a98:	e008      	b.n	8006aac <tos_chr_fifo_destroy+0x74>
    }

    TOS_OBJ_DEINIT(chr_fifo);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff ff5a 	bl	8006956 <knl_object_deinit>
    knl_object_alloc_reset(&chr_fifo->knl_obj);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff ff63 	bl	8006970 <knl_object_alloc_reset>

    return K_ERR_NONE;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <tos_chr_fifo_push>:

    return K_ERR_NONE;
}

__API__ k_err_t tos_chr_fifo_push(k_chr_fifo_t *chr_fifo, uint8_t data)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
    TOS_PTR_SANITY_CHECK(chr_fifo);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <tos_chr_fifo_push+0x22>
 8006ad0:	f240 434c 	movw	r3, #1100	; 0x44c
 8006ad4:	e013      	b.n	8006afe <tos_chr_fifo_push+0x4a>
    TOS_OBJ_VERIFY(chr_fifo, KNL_OBJ_TYPE_CHAR_FIFO);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f64d 21d2 	movw	r1, #56018	; 0xdad2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff ff17 	bl	8006910 <knl_object_verify>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <tos_chr_fifo_push+0x3a>
 8006ae8:	f240 434d 	movw	r3, #1101	; 0x44d
 8006aec:	e007      	b.n	8006afe <tos_chr_fifo_push+0x4a>

    return tos_ring_q_enqueue(&chr_fifo->ring_q, &data, sizeof(uint8_t));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3304      	adds	r3, #4
 8006af2:	1cf9      	adds	r1, r7, #3
 8006af4:	2201      	movs	r2, #1
 8006af6:	4618      	mov	r0, r3
 8006af8:	f001 fbe5 	bl	80082c6 <tos_ring_q_enqueue>
 8006afc:	4603      	mov	r3, r0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <tos_chr_fifo_push_stream>:

__API__ int tos_chr_fifo_push_stream(k_chr_fifo_t *chr_fifo, uint8_t *stream, size_t size)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b088      	sub	sp, #32
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	607a      	str	r2, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
    k_err_t err;
    int i = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61fb      	str	r3, [r7, #28]

    TOS_PTR_SANITY_CHECK_RC(chr_fifo, 0);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bf0c      	ite	eq
 8006b20:	2301      	moveq	r3, #1
 8006b22:	2300      	movne	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <tos_chr_fifo_push_stream+0x28>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e02c      	b.n	8006b88 <tos_chr_fifo_push_stream+0x82>
    TOS_OBJ_VERIFY_RC(chr_fifo, KNL_OBJ_TYPE_CHAR_FIFO, 0);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f64d 21d2 	movw	r1, #56018	; 0xdad2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff feeb 	bl	8006910 <knl_object_verify>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <tos_chr_fifo_push_stream+0x3e>
 8006b40:	2300      	movs	r3, #0
 8006b42:	e021      	b.n	8006b88 <tos_chr_fifo_push_stream+0x82>

    TOS_CPU_INT_DISABLE();
 8006b44:	f7ff f968 	bl	8005e18 <tos_cpu_cpsr_save>
 8006b48:	61b8      	str	r0, [r7, #24]

    while (i < size) {
 8006b4a:	e015      	b.n	8006b78 <tos_chr_fifo_push_stream+0x72>
        err = tos_ring_q_enqueue(&chr_fifo->ring_q, &stream[i], sizeof(uint8_t));
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	1d18      	adds	r0, r3, #4
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	4413      	add	r3, r2
 8006b56:	2201      	movs	r2, #1
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f001 fbb4 	bl	80082c6 <tos_ring_q_enqueue>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	82fb      	strh	r3, [r7, #22]
        if (err != K_ERR_NONE) {
 8006b62:	8afb      	ldrh	r3, [r7, #22]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d004      	beq.n	8006b72 <tos_chr_fifo_push_stream+0x6c>
            TOS_CPU_INT_ENABLE();
 8006b68:	69b8      	ldr	r0, [r7, #24]
 8006b6a:	f7ff f95c 	bl	8005e26 <tos_cpu_cpsr_restore>
            return i;
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	e00a      	b.n	8006b88 <tos_chr_fifo_push_stream+0x82>
        }
        ++i;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	3301      	adds	r3, #1
 8006b76:	61fb      	str	r3, [r7, #28]
    while (i < size) {
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d8e5      	bhi.n	8006b4c <tos_chr_fifo_push_stream+0x46>
    }

    TOS_CPU_INT_ENABLE();
 8006b80:	69b8      	ldr	r0, [r7, #24]
 8006b82:	f7ff f950 	bl	8005e26 <tos_cpu_cpsr_restore>
    return i;
 8006b86:	69fb      	ldr	r3, [r7, #28]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <tos_chr_fifo_pop>:

__API__ k_err_t tos_chr_fifo_pop(k_chr_fifo_t *chr_fifo, uint8_t *out)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
    TOS_PTR_SANITY_CHECK(chr_fifo);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	bf0c      	ite	eq
 8006ba0:	2301      	moveq	r3, #1
 8006ba2:	2300      	movne	r3, #0
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <tos_chr_fifo_pop+0x20>
 8006baa:	f240 434c 	movw	r3, #1100	; 0x44c
 8006bae:	e013      	b.n	8006bd8 <tos_chr_fifo_pop+0x48>
    TOS_OBJ_VERIFY(chr_fifo, KNL_OBJ_TYPE_CHAR_FIFO);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f64d 21d2 	movw	r1, #56018	; 0xdad2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff feaa 	bl	8006910 <knl_object_verify>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <tos_chr_fifo_pop+0x38>
 8006bc2:	f240 434d 	movw	r3, #1101	; 0x44d
 8006bc6:	e007      	b.n	8006bd8 <tos_chr_fifo_pop+0x48>

    return tos_ring_q_dequeue(&chr_fifo->ring_q, (void *)out, K_NULL);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	2200      	movs	r2, #0
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 fbc8 	bl	8008366 <tos_ring_q_dequeue>
 8006bd6:	4603      	mov	r3, r0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <tos_chr_fifo_pop_stream>:

__API__ int tos_chr_fifo_pop_stream(k_chr_fifo_t *chr_fifo, uint8_t *buffer, size_t size)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 8006bec:	2300      	movs	r3, #0
 8006bee:	61bb      	str	r3, [r7, #24]
    int i = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61fb      	str	r3, [r7, #28]
    uint8_t data;

    TOS_PTR_SANITY_CHECK_RC(chr_fifo, 0);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf0c      	ite	eq
 8006bfa:	2301      	moveq	r3, #1
 8006bfc:	2300      	movne	r3, #0
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <tos_chr_fifo_pop_stream+0x28>
 8006c04:	2300      	movs	r3, #0
 8006c06:	e02e      	b.n	8006c66 <tos_chr_fifo_pop_stream+0x86>
    TOS_OBJ_VERIFY_RC(chr_fifo, KNL_OBJ_TYPE_CHAR_FIFO, 0);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f64d 21d2 	movw	r1, #56018	; 0xdad2
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fe7e 	bl	8006910 <knl_object_verify>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <tos_chr_fifo_pop_stream+0x3e>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e023      	b.n	8006c66 <tos_chr_fifo_pop_stream+0x86>

    TOS_CPU_INT_DISABLE();
 8006c1e:	f7ff f8fb 	bl	8005e18 <tos_cpu_cpsr_save>
 8006c22:	61b8      	str	r0, [r7, #24]

    while (i < size) {
 8006c24:	e017      	b.n	8006c56 <tos_chr_fifo_pop_stream+0x76>
        if (tos_ring_q_dequeue(&chr_fifo->ring_q, &data, K_NULL) != K_ERR_NONE) {
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	f107 0117 	add.w	r1, r7, #23
 8006c2e:	2200      	movs	r2, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 fb98 	bl	8008366 <tos_ring_q_dequeue>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <tos_chr_fifo_pop_stream+0x66>
            TOS_CPU_INT_ENABLE();
 8006c3c:	69b8      	ldr	r0, [r7, #24]
 8006c3e:	f7ff f8f2 	bl	8005e26 <tos_cpu_cpsr_restore>
            return i;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	e00f      	b.n	8006c66 <tos_chr_fifo_pop_stream+0x86>
        }
        buffer[i++] = data;
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	61fa      	str	r2, [r7, #28]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4413      	add	r3, r2
 8006c52:	7dfa      	ldrb	r2, [r7, #23]
 8006c54:	701a      	strb	r2, [r3, #0]
    while (i < size) {
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d8e3      	bhi.n	8006c26 <tos_chr_fifo_pop_stream+0x46>
    }

    TOS_CPU_INT_ENABLE();
 8006c5e:	69b8      	ldr	r0, [r7, #24]
 8006c60:	f7ff f8e1 	bl	8005e26 <tos_cpu_cpsr_restore>
    return i;
 8006c64:	69fb      	ldr	r3, [r7, #28]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3720      	adds	r7, #32
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <generic_fls>:
    }
    return r;
}
#else
__STATIC__ int generic_fls(uint32_t x)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
    return 32 - tos_cpu_clz(x);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff f8c2 	bl	8005e00 <tos_cpu_clz>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f1c3 0320 	rsb	r3, r3, #32
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <__ffs>:
#endif

__STATIC__ int __ffs(uint32_t word)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
    return generic_fls(word & (~word + 1)) - 1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	425a      	negs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff ffe7 	bl	8006c6e <generic_fls>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	3b01      	subs	r3, #1
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <__fls>:

__STATIC__ int __fls(uint32_t word)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
    return generic_fls(word) - 1;
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff ffda 	bl	8006c6e <generic_fls>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	3b01      	subs	r3, #1
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <mapping_insert>:
/*
** TLSF utility functions. In most cases, these are direct translations of
** the documentation found in the white paper.
*/
__STATIC__ void mapping_insert(size_t size, int *fli, int *sli)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b086      	sub	sp, #24
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
    int fl, sl;

    if (size < K_MMHEAP_SMALL_BLOCK_SIZE) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd6:	d808      	bhi.n	8006cea <mapping_insert+0x24>
        /* Store small blocks in first list. */
        fl = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
        sl = (int)size / (K_MMHEAP_SMALL_BLOCK_SIZE / K_MMHEAP_SL_INDEX_COUNT);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	da00      	bge.n	8006ce4 <mapping_insert+0x1e>
 8006ce2:	3303      	adds	r3, #3
 8006ce4:	109b      	asrs	r3, r3, #2
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	e00e      	b.n	8006d08 <mapping_insert+0x42>
    } else {
        fl = __fls(size);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff ffde 	bl	8006cac <__fls>
 8006cf0:	6178      	str	r0, [r7, #20]
        sl = ((int)size >> (fl - K_MMHEAP_SL_INDEX_COUNT_LOG2)) ^ (1 << K_MMHEAP_SL_INDEX_COUNT_LOG2);
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	3b05      	subs	r3, #5
 8006cf8:	fa42 f303 	asr.w	r3, r2, r3
 8006cfc:	f083 0320 	eor.w	r3, r3, #32
 8006d00:	613b      	str	r3, [r7, #16]
        fl -= (K_MMHEAP_FL_INDEX_SHIFT - 1);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	3b06      	subs	r3, #6
 8006d06:	617b      	str	r3, [r7, #20]
    }
    *fli = fl;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	601a      	str	r2, [r3, #0]
    *sli = sl;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	601a      	str	r2, [r3, #0]
}
 8006d14:	bf00      	nop
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <mapping_search>:

/* This version rounds up to the next block size (for allocations) */
__STATIC__ void mapping_search(size_t size, int *fli, int *sli)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
    size_t round;

    if (size >= K_MMHEAP_SMALL_BLOCK_SIZE) {
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2c:	d90d      	bls.n	8006d4a <mapping_search+0x2e>
        round = (1 << (__fls(size) - K_MMHEAP_SL_INDEX_COUNT_LOG2)) - 1;
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff ffbc 	bl	8006cac <__fls>
 8006d34:	4603      	mov	r3, r0
 8006d36:	3b05      	subs	r3, #5
 8006d38:	2201      	movs	r2, #1
 8006d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	617b      	str	r3, [r7, #20]
        size += round;
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	4413      	add	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
    }
    mapping_insert(size, fli, sli);
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff ffb9 	bl	8006cc6 <mapping_insert>
}
 8006d54:	bf00      	nop
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <blk_size>:

__STATIC_INLINE__ size_t blk_size(const mmheap_blk_t *blk)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
    return blk->size & K_MMHEAP_BLOCK_SIZE_MASK;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f023 0303 	bic.w	r3, r3, #3
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <blk_set_size>:
{
	return blk_size(blk) == 0;
}

__STATIC_INLINE__ void blk_set_size(mmheap_blk_t *blk, size_t size)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
    blk->size = size | (blk->size & K_MMHEAP_BLOCK_STATE_MASK);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f003 0203 	and.w	r2, r3, #3
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	605a      	str	r2, [r3, #4]
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <blk_is_free>:

__STATIC_INLINE__ int blk_is_free(const mmheap_blk_t *blk)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
    return blk->size & K_MMHEAP_BLOCK_CURR_FREE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f003 0301 	and.w	r3, r3, #1
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <blk_set_free>:

__STATIC_INLINE__ void blk_set_free(mmheap_blk_t *blk)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
    blk->size |= K_MMHEAP_BLOCK_CURR_FREE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f043 0201 	orr.w	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	605a      	str	r2, [r3, #4]
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <blk_set_used>:

__STATIC_INLINE__ void blk_set_used(mmheap_blk_t *blk)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
    blk->size &= ~K_MMHEAP_BLOCK_CURR_FREE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f023 0201 	bic.w	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	605a      	str	r2, [r3, #4]
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <blk_is_prev_free>:

__STATIC_INLINE__ int blk_is_prev_free(const mmheap_blk_t *blk)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
    return blk->size & K_MMHEAP_BLOCK_PREV_FREE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f003 0302 	and.w	r3, r3, #2
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <blk_set_prev_free>:

__STATIC_INLINE__ void blk_set_prev_free(mmheap_blk_t *blk)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
    blk->size |= K_MMHEAP_BLOCK_PREV_FREE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f043 0202 	orr.w	r2, r3, #2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	605a      	str	r2, [r3, #4]
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <blk_set_prev_used>:

__STATIC__ void blk_set_prev_used(mmheap_blk_t *blk)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
    blk->size &= ~K_MMHEAP_BLOCK_PREV_FREE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f023 0202 	bic.w	r2, r3, #2
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	605a      	str	r2, [r3, #4]
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <blk_from_ptr>:

__STATIC_INLINE__ mmheap_blk_t *blk_from_ptr(const void *ptr)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
    return (mmheap_blk_t *)((cpu_addr_t)ptr - K_MMHEAP_BLK_START_OFFSET);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3b08      	subs	r3, #8
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <blk_to_ptr>:

__STATIC_INLINE__ void *blk_to_ptr(const mmheap_blk_t *blk)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
    return (void *)((cpu_addr_t)blk + K_MMHEAP_BLK_START_OFFSET);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3308      	adds	r3, #8
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <offset_to_blk>:

/* Return location of next block after block of given size. */
__STATIC_INLINE__ mmheap_blk_t *offset_to_blk(const void *ptr, int diff)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
    return (mmheap_blk_t *)((cpu_addr_t)ptr + diff);
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	4413      	add	r3, r2
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <blk_prev>:

/* Return location of previous block. */
__STATIC_INLINE__ mmheap_blk_t *blk_prev(const mmheap_blk_t *blk)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
    return blk->prev_phys_blk;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <blk_next>:

/* Return location of next existing block. */
__STATIC__ mmheap_blk_t *blk_next(const mmheap_blk_t *blk)
{
 8006eba:	b590      	push	{r4, r7, lr}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
    mmheap_blk_t *next_blk;

    next_blk = offset_to_blk(blk_to_ptr(blk), blk_size(blk) - K_MMHEAP_BLK_HEADER_OVERHEAD);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff ffd3 	bl	8006e6e <blk_to_ptr>
 8006ec8:	4604      	mov	r4, r0
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff ff46 	bl	8006d5c <blk_size>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	3b04      	subs	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f7ff ffd5 	bl	8006e86 <offset_to_blk>
 8006edc:	60f8      	str	r0, [r7, #12]
    return next_blk;
 8006ede:	68fb      	ldr	r3, [r7, #12]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd90      	pop	{r4, r7, pc}

08006ee8 <blk_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
__STATIC__ mmheap_blk_t *blk_link_next(mmheap_blk_t *blk)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
    mmheap_blk_t *next_blk;

    next_blk = blk_next(blk);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff ffe2 	bl	8006eba <blk_next>
 8006ef6:	60f8      	str	r0, [r7, #12]
    next_blk->prev_phys_blk = blk;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	601a      	str	r2, [r3, #0]
    return next_blk;
 8006efe:	68fb      	ldr	r3, [r7, #12]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <blk_mark_as_free>:

__STATIC__ void blk_mark_as_free(mmheap_blk_t *blk)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
    mmheap_blk_t *next_blk;

    /* Link the block to the next block, first. */
    next_blk = blk_link_next(blk);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff ffe9 	bl	8006ee8 <blk_link_next>
 8006f16:	60f8      	str	r0, [r7, #12]
    blk_set_prev_free(next_blk);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff ff7c 	bl	8006e16 <blk_set_prev_free>
    blk_set_free(blk);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff ff4b 	bl	8006dba <blk_set_free>
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <blk_mark_as_used>:

__STATIC__ void blk_mark_as_used(mmheap_blk_t *blk)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
    mmheap_blk_t *next_blk;

    next_blk = blk_next(blk);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff ffc0 	bl	8006eba <blk_next>
 8006f3a:	60f8      	str	r0, [r7, #12]
    blk_set_prev_used(next_blk);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff ff7a 	bl	8006e36 <blk_set_prev_used>
    blk_set_used(blk);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff ff49 	bl	8006dda <blk_set_used>
}
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <align_up>:

__STATIC_INLINE__ size_t align_up(size_t x, size_t align)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
    return (x + (align - 1)) & ~(align - 1);
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4413      	add	r3, r2
 8006f60:	1e5a      	subs	r2, r3, #1
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	425b      	negs	r3, r3
 8006f66:	4013      	ands	r3, r2
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <align_down>:

__STATIC_INLINE__ size_t align_down(size_t x, size_t align)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
    return x - (x & (align - 1));
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	425a      	negs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4013      	ands	r3, r2
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <insert_free_block>:
    return (void *)(((cpu_addr_t)ptr + (align -1)) & ~(align -1));
}

/* Insert a free block into the free block list. */
__STATIC__ void insert_free_block(mmheap_blk_t *blk, int fl, int sl)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
    mmheap_blk_t *curr;

    curr = k_mmheap_ctl.blocks[fl][sl];
 8006fa0:	491e      	ldr	r1, [pc, #120]	; (800701c <insert_free_block+0x88>)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	3320      	adds	r3, #32
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	617b      	str	r3, [r7, #20]
    blk->next_free = curr;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	609a      	str	r2, [r3, #8]
    blk->prev_free = &k_mmheap_ctl.block_null;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4a18      	ldr	r2, [pc, #96]	; (8007020 <insert_free_block+0x8c>)
 8006fbe:	60da      	str	r2, [r3, #12]
    curr->prev_free = blk;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	60da      	str	r2, [r3, #12]

	/*
	** Insert the new block at the head of the list, and mark the first-
	** and second-level bitmaps appropriately.
	*/
    k_mmheap_ctl.blocks[fl][sl] = blk;
 8006fc6:	4915      	ldr	r1, [pc, #84]	; (800701c <insert_free_block+0x88>)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4413      	add	r3, r2
 8006fd0:	3320      	adds	r3, #32
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	605a      	str	r2, [r3, #4]
    k_mmheap_ctl.fl_bitmap |= (1 << fl);
 8006fda:	4b10      	ldr	r3, [pc, #64]	; (800701c <insert_free_block+0x88>)
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	2101      	movs	r1, #1
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	4a0c      	ldr	r2, [pc, #48]	; (800701c <insert_free_block+0x88>)
 8006fea:	6213      	str	r3, [r2, #32]
    k_mmheap_ctl.sl_bitmap[fl] |= (1 << sl);
 8006fec:	4a0b      	ldr	r2, [pc, #44]	; (800701c <insert_free_block+0x88>)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8007000:	431a      	orrs	r2, r3
 8007002:	4906      	ldr	r1, [pc, #24]	; (800701c <insert_free_block+0x88>)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3308      	adds	r3, #8
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	605a      	str	r2, [r3, #4]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20003a08 	.word	0x20003a08
 8007020:	20003a18 	.word	0x20003a18

08007024 <remove_free_block>:

/* Remove a free block from the free list.*/
__STATIC__ void remove_free_block(mmheap_blk_t *blk, int fl, int sl)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
    mmheap_blk_t *prev_blk;
    mmheap_blk_t *next_blk;

    prev_blk = blk->prev_free;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	617b      	str	r3, [r7, #20]
    next_blk = blk->next_free;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	613b      	str	r3, [r7, #16]
    next_blk->prev_free = prev_blk;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	60da      	str	r2, [r3, #12]
    prev_blk->next_free = next_blk;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	609a      	str	r2, [r3, #8]

    /* If this block is the head of the free list, set new head. */
    if (k_mmheap_ctl.blocks[fl][sl] == blk) {
 8007048:	4921      	ldr	r1, [pc, #132]	; (80070d0 <remove_free_block+0xac>)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4413      	add	r3, r2
 8007052:	3320      	adds	r3, #32
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	429a      	cmp	r2, r3
 800705e:	d131      	bne.n	80070c4 <remove_free_block+0xa0>
        k_mmheap_ctl.blocks[fl][sl] = next_blk;
 8007060:	491b      	ldr	r1, [pc, #108]	; (80070d0 <remove_free_block+0xac>)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4413      	add	r3, r2
 800706a:	3320      	adds	r3, #32
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	440b      	add	r3, r1
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	605a      	str	r2, [r3, #4]

        /* If the new head is null, clear the bitmap. */
        if (next_blk == &k_mmheap_ctl.block_null) {
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	4a17      	ldr	r2, [pc, #92]	; (80070d4 <remove_free_block+0xb0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d123      	bne.n	80070c4 <remove_free_block+0xa0>
            k_mmheap_ctl.sl_bitmap[fl] &= ~(1 << sl);
 800707c:	4a14      	ldr	r2, [pc, #80]	; (80070d0 <remove_free_block+0xac>)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	3308      	adds	r3, #8
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2101      	movs	r1, #1
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	fa01 f202 	lsl.w	r2, r1, r2
 8007090:	43d2      	mvns	r2, r2
 8007092:	401a      	ands	r2, r3
 8007094:	490e      	ldr	r1, [pc, #56]	; (80070d0 <remove_free_block+0xac>)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	3308      	adds	r3, #8
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	605a      	str	r2, [r3, #4]

            /* If the second bitmap is now empty, clear the fl bitmap. */
            if (!k_mmheap_ctl.sl_bitmap[fl]) {
 80070a0:	4a0b      	ldr	r2, [pc, #44]	; (80070d0 <remove_free_block+0xac>)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	3308      	adds	r3, #8
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d109      	bne.n	80070c4 <remove_free_block+0xa0>
                k_mmheap_ctl.fl_bitmap &= ~(1 << fl);
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <remove_free_block+0xac>)
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	2101      	movs	r1, #1
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	fa01 f202 	lsl.w	r2, r1, r2
 80070bc:	43d2      	mvns	r2, r2
 80070be:	4013      	ands	r3, r2
 80070c0:	4a03      	ldr	r2, [pc, #12]	; (80070d0 <remove_free_block+0xac>)
 80070c2:	6213      	str	r3, [r2, #32]
            }
        }
    }
}
 80070c4:	bf00      	nop
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	20003a08 	.word	0x20003a08
 80070d4:	20003a18 	.word	0x20003a18

080070d8 <blk_remove>:

/* Remove a given block from the free list. */
__STATIC__ void blk_remove(mmheap_blk_t *blk)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
    int fl, sl;

    mapping_insert(blk_size(blk), &fl, &sl);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff fe3b 	bl	8006d5c <blk_size>
 80070e6:	f107 0208 	add.w	r2, r7, #8
 80070ea:	f107 030c 	add.w	r3, r7, #12
 80070ee:	4619      	mov	r1, r3
 80070f0:	f7ff fde9 	bl	8006cc6 <mapping_insert>
    remove_free_block(blk, fl, sl);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff92 	bl	8007024 <remove_free_block>
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <blk_insert>:

/* Insert a given block into the free list. */
__STATIC__ void blk_insert(mmheap_blk_t *blk)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
    int fl, sl;

    mapping_insert(blk_size(blk), &fl, &sl);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff fe23 	bl	8006d5c <blk_size>
 8007116:	f107 0208 	add.w	r2, r7, #8
 800711a:	f107 030c 	add.w	r3, r7, #12
 800711e:	4619      	mov	r1, r3
 8007120:	f7ff fdd1 	bl	8006cc6 <mapping_insert>
    insert_free_block(blk, fl, sl);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff ff32 	bl	8006f94 <insert_free_block>
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <blk_can_split>:

__STATIC__ int blk_can_split(mmheap_blk_t *blk, size_t size)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
    return blk_size(blk) >= sizeof(mmheap_blk_t) + size;
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff fe0a 	bl	8006d5c <blk_size>
 8007148:	4602      	mov	r2, r0
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	3310      	adds	r3, #16
 800714e:	429a      	cmp	r2, r3
 8007150:	bf2c      	ite	cs
 8007152:	2301      	movcs	r3, #1
 8007154:	2300      	movcc	r3, #0
 8007156:	b2db      	uxtb	r3, r3
}
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <blk_split>:

/* Split a block into two, the second of which is free. */
__STATIC__ mmheap_blk_t *blk_split(mmheap_blk_t *blk, size_t size)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
    mmheap_blk_t   *remaining;
    size_t          remain_size;

    /* Calculate the amount of space left in the remaining block. */
    remaining   = offset_to_blk(blk_to_ptr(blk), size - K_MMHEAP_BLK_HEADER_OVERHEAD);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff fe7f 	bl	8006e6e <blk_to_ptr>
 8007170:	4602      	mov	r2, r0
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	3b04      	subs	r3, #4
 8007176:	4619      	mov	r1, r3
 8007178:	4610      	mov	r0, r2
 800717a:	f7ff fe84 	bl	8006e86 <offset_to_blk>
 800717e:	60f8      	str	r0, [r7, #12]
    remain_size = blk_size(blk) - (size + K_MMHEAP_BLK_HEADER_OVERHEAD);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fdeb 	bl	8006d5c <blk_size>
 8007186:	4602      	mov	r2, r0
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	3b04      	subs	r3, #4
 800718e:	60bb      	str	r3, [r7, #8]

    blk_set_size(remaining, remain_size);
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7ff fdf0 	bl	8006d78 <blk_set_size>

    blk_set_size(blk, size);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff fdec 	bl	8006d78 <blk_set_size>
    blk_mark_as_free(remaining);
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f7ff feb1 	bl	8006f08 <blk_mark_as_free>

    return remaining;
 80071a6:	68fb      	ldr	r3, [r7, #12]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <blk_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
__STATIC__ mmheap_blk_t *blk_absorb(mmheap_blk_t *prev_blk, mmheap_blk_t *blk)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
    prev_blk->size += blk_size(blk) + K_MMHEAP_BLK_HEADER_OVERHEAD;
 80071ba:	6838      	ldr	r0, [r7, #0]
 80071bc:	f7ff fdce 	bl	8006d5c <blk_size>
 80071c0:	4603      	mov	r3, r0
 80071c2:	1d1a      	adds	r2, r3, #4
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	605a      	str	r2, [r3, #4]
    blk_link_next(prev_blk);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff fe8a 	bl	8006ee8 <blk_link_next>
    return prev_blk;
 80071d4:	687b      	ldr	r3, [r7, #4]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <blk_merge_prev>:

/* Merge a just-freed block with an adjacent previous free block. */
__STATIC__ mmheap_blk_t *blk_merge_prev(mmheap_blk_t *blk)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
    mmheap_blk_t *prev_blk;

    if (blk_is_prev_free(blk)) {
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff fe07 	bl	8006dfa <blk_is_prev_free>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <blk_merge_prev+0x2c>
        prev_blk = blk_prev(blk);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7ff fe55 	bl	8006ea2 <blk_prev>
 80071f8:	60f8      	str	r0, [r7, #12]
        blk_remove(prev_blk);
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f7ff ff6c 	bl	80070d8 <blk_remove>
        blk = blk_absorb(prev_blk, blk);
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff ffd4 	bl	80071b0 <blk_absorb>
 8007208:	6078      	str	r0, [r7, #4]
    }

    return blk;
 800720a:	687b      	ldr	r3, [r7, #4]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <blk_merge_next>:

/* Merge a just-freed block with an adjacent free block. */
__STATIC__ mmheap_blk_t *blk_merge_next(mmheap_blk_t *blk)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
    mmheap_blk_t *next_blk;

    next_blk = blk_next(blk);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff fe4c 	bl	8006eba <blk_next>
 8007222:	60f8      	str	r0, [r7, #12]
    if (blk_is_free(next_blk)) {
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff fdba 	bl	8006d9e <blk_is_free>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <blk_merge_next+0x2c>
        blk_remove(next_blk);
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff ff51 	bl	80070d8 <blk_remove>
        blk = blk_absorb(blk, next_blk);
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff ffb9 	bl	80071b0 <blk_absorb>
 800723e:	6078      	str	r0, [r7, #4]
    }

    return blk;
 8007240:	687b      	ldr	r3, [r7, #4]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <blk_trim_free>:

/* Trim any trailing block space off the end of a block, return to pool. */
__STATIC__ void blk_trim_free(mmheap_blk_t *blk, size_t size)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
    mmheap_blk_t *remaining_blk;

    if (blk_can_split(blk, size)) {
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff ff6e 	bl	8007138 <blk_can_split>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00d      	beq.n	800727e <blk_trim_free+0x34>
        remaining_blk = blk_split(blk, size);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff ff7b 	bl	8007160 <blk_split>
 800726a:	60f8      	str	r0, [r7, #12]
        blk_link_next(blk);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7ff fe3b 	bl	8006ee8 <blk_link_next>
        blk_set_prev_free(remaining_blk);
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff fdcf 	bl	8006e16 <blk_set_prev_free>
        blk_insert(remaining_blk);
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7ff ff45 	bl	8007108 <blk_insert>
    }
}
 800727e:	bf00      	nop
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <blk_search_suitable>:

    return remaining_blk;
}

__STATIC__ mmheap_blk_t *blk_search_suitable(int *fli, int *sli)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
    int fl, sl;
    uint32_t sl_map, fl_map;

    fl = *fli;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	617b      	str	r3, [r7, #20]
    sl = *sli;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]

	/*
	** First, search for a block in the list associated with the given
	** fl/sl index.
	*/
    sl_map = k_mmheap_ctl.sl_bitmap[fl] & (~0U << sl);
 800729e:	4a20      	ldr	r2, [pc, #128]	; (8007320 <blk_search_suitable+0x98>)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	3308      	adds	r3, #8
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	f04f 31ff 	mov.w	r1, #4294967295
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	fa01 f303 	lsl.w	r3, r1, r3
 80072b4:	4013      	ands	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]
    if (!sl_map) {
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d11c      	bne.n	80072f8 <blk_search_suitable+0x70>
        /* No block exists. Search in the next largest first-level list. */
        fl_map = k_mmheap_ctl.fl_bitmap & (~0U << (fl + 1));
 80072be:	4b18      	ldr	r3, [pc, #96]	; (8007320 <blk_search_suitable+0x98>)
 80072c0:	6a1a      	ldr	r2, [r3, #32]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	3301      	adds	r3, #1
 80072c6:	f04f 31ff 	mov.w	r1, #4294967295
 80072ca:	fa01 f303 	lsl.w	r3, r1, r3
 80072ce:	4013      	ands	r3, r2
 80072d0:	60bb      	str	r3, [r7, #8]
        if (!fl_map) {
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <blk_search_suitable+0x54>
            /* No free blocks available, memory has been exhausted. */
            return 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	e01d      	b.n	8007318 <blk_search_suitable+0x90>
        }

        fl = __ffs(fl_map);
 80072dc:	68b8      	ldr	r0, [r7, #8]
 80072de:	f7ff fcd4 	bl	8006c8a <__ffs>
 80072e2:	6178      	str	r0, [r7, #20]
        *fli = fl;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	601a      	str	r2, [r3, #0]
        sl_map = k_mmheap_ctl.sl_bitmap[fl];
 80072ea:	4a0d      	ldr	r2, [pc, #52]	; (8007320 <blk_search_suitable+0x98>)
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	3308      	adds	r3, #8
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	613b      	str	r3, [r7, #16]
    }
    sl = __ffs(sl_map);
 80072f8:	6938      	ldr	r0, [r7, #16]
 80072fa:	f7ff fcc6 	bl	8006c8a <__ffs>
 80072fe:	60f8      	str	r0, [r7, #12]
    *sli = sl;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	601a      	str	r2, [r3, #0]

    /* Return the first block in the free list. */
    return k_mmheap_ctl.blocks[fl][sl];
 8007306:	4906      	ldr	r1, [pc, #24]	; (8007320 <blk_search_suitable+0x98>)
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	3320      	adds	r3, #32
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	685b      	ldr	r3, [r3, #4]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	20003a08 	.word	0x20003a08

08007324 <blk_locate_free>:

__STATIC__ mmheap_blk_t *blk_locate_free(size_t size)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
    int fl = 0, sl = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	2300      	movs	r3, #0
 8007332:	60fb      	str	r3, [r7, #12]
    mmheap_blk_t *blk = K_NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]

    if (!size) {
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <blk_locate_free+0x1e>
        return K_NULL;
 800733e:	2300      	movs	r3, #0
 8007340:	e01d      	b.n	800737e <blk_locate_free+0x5a>
    }

    mapping_search(size, &fl, &sl);
 8007342:	f107 020c 	add.w	r2, r7, #12
 8007346:	f107 0310 	add.w	r3, r7, #16
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff fce5 	bl	8006d1c <mapping_search>
    ** mapping_search can futz with the size, so for excessively large sizes it can sometimes wind up
    ** with indices that are off the end of the block array.
    ** So, we protect against that here, since this is the only callsite of mapping_search.
    ** Note that we don't need to check sl, since it comes from a modulo operation that guarantees it's always in range.
    */
    if (fl < K_MMHEAP_FL_INDEX_COUNT) {
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b17      	cmp	r3, #23
 8007356:	dc08      	bgt.n	800736a <blk_locate_free+0x46>
        blk = blk_search_suitable(&fl, &sl);
 8007358:	f107 020c 	add.w	r2, r7, #12
 800735c:	f107 0310 	add.w	r3, r7, #16
 8007360:	4611      	mov	r1, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff ff90 	bl	8007288 <blk_search_suitable>
 8007368:	6178      	str	r0, [r7, #20]
    }

    if (blk) {
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <blk_locate_free+0x58>
        remove_free_block(blk, fl, sl);
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	4619      	mov	r1, r3
 8007376:	6978      	ldr	r0, [r7, #20]
 8007378:	f7ff fe54 	bl	8007024 <remove_free_block>
    }

    return blk;
 800737c:	697b      	ldr	r3, [r7, #20]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
__STATIC__ size_t adjust_request_size(size_t size, size_t align)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
    size_t adjust_size = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]

    if (!size) {
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <adjust_request_size+0x18>
        return 0;
 800739a:	2300      	movs	r3, #0
 800739c:	e00e      	b.n	80073bc <adjust_request_size+0x36>
    }

    adjust_size = align_up(size, align);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff fdd5 	bl	8006f50 <align_up>
 80073a6:	60f8      	str	r0, [r7, #12]
    if (adjust_size > K_MMHEAP_BLK_SIZE_MAX) {
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ae:	d901      	bls.n	80073b4 <adjust_request_size+0x2e>
        return 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e003      	b.n	80073bc <adjust_request_size+0x36>
    }

    /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
    return adjust_size > K_MMHEAP_BLK_SIZE_MIN ? adjust_size : K_MMHEAP_BLK_SIZE_MIN;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b0c      	cmp	r3, #12
 80073b8:	bf38      	it	cc
 80073ba:	230c      	movcc	r3, #12
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <blk_prepare_used>:

__STATIC__ void *blk_prepare_used(mmheap_blk_t *blk, size_t size)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
    if (!blk) {
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <blk_prepare_used+0x14>
        return K_NULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e00a      	b.n	80073ee <blk_prepare_used+0x2a>
    }
    blk_trim_free(blk, size);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff ff35 	bl	800724a <blk_trim_free>
    blk_mark_as_used(blk);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fda3 	bl	8006f2c <blk_mark_as_used>
    return blk_to_ptr(blk);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff fd41 	bl	8006e6e <blk_to_ptr>
 80073ec:	4603      	mov	r3, r0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <mmheap_pool_is_full>:

__STATIC_INLINE__ int mmheap_pool_is_full(void)
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
    return k_mmheap_ctl.pool_cnt == K_MMHEAP_POOL_MAX;
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <mmheap_pool_is_full+0x1c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b03      	cmp	r3, #3
 8007402:	bf0c      	ite	eq
 8007404:	2301      	moveq	r3, #1
 8007406:	2300      	movne	r3, #0
 8007408:	b2db      	uxtb	r3, r3
}
 800740a:	4618      	mov	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	20003a08 	.word	0x20003a08

08007418 <mmheap_pool_is_exist>:

__STATIC__ int mmheap_pool_is_exist(void *pool_start)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
    int i = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < k_mmheap_ctl.pool_cnt; ++i) {
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e00c      	b.n	8007444 <mmheap_pool_is_exist+0x2c>
        if (k_mmheap_ctl.pool_start[i] == pool_start) {
 800742a:	4a0c      	ldr	r2, [pc, #48]	; (800745c <mmheap_pool_is_exist+0x44>)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	429a      	cmp	r2, r3
 8007438:	d101      	bne.n	800743e <mmheap_pool_is_exist+0x26>
            return K_TRUE;
 800743a:	2301      	movs	r3, #1
 800743c:	e008      	b.n	8007450 <mmheap_pool_is_exist+0x38>
    for (i = 0; i < k_mmheap_ctl.pool_cnt; ++i) {
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	4b05      	ldr	r3, [pc, #20]	; (800745c <mmheap_pool_is_exist+0x44>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	429a      	cmp	r2, r3
 800744c:	dbed      	blt.n	800742a <mmheap_pool_is_exist+0x12>
        }
    }
    return K_FALSE;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	20003a08 	.word	0x20003a08

08007460 <mmheap_pool_record>:

__STATIC_INLINE__ void mmheap_pool_record(void *pool_start)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
    k_mmheap_ctl.pool_start[k_mmheap_ctl.pool_cnt++] = pool_start;
 8007468:	4b07      	ldr	r3, [pc, #28]	; (8007488 <mmheap_pool_record+0x28>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	4906      	ldr	r1, [pc, #24]	; (8007488 <mmheap_pool_record+0x28>)
 8007470:	600a      	str	r2, [r1, #0]
 8007472:	4a05      	ldr	r2, [pc, #20]	; (8007488 <mmheap_pool_record+0x28>)
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	605a      	str	r2, [r3, #4]
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	20003a08 	.word	0x20003a08

0800748c <mmheap_ctl_init>:
    }
    --k_mmheap_ctl.pool_cnt;
}

__STATIC__ void mmheap_ctl_init(void)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
    int i, j;

    k_mmheap_ctl.pool_cnt = 0u;
 8007492:	4b22      	ldr	r3, [pc, #136]	; (800751c <mmheap_ctl_init+0x90>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
    for (i = 0; i < K_MMHEAP_POOL_MAX; ++i) {
 8007498:	2300      	movs	r3, #0
 800749a:	607b      	str	r3, [r7, #4]
 800749c:	e008      	b.n	80074b0 <mmheap_ctl_init+0x24>
        k_mmheap_ctl.pool_start[i] = (void *)K_NULL;
 800749e:	4a1f      	ldr	r2, [pc, #124]	; (800751c <mmheap_ctl_init+0x90>)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	605a      	str	r2, [r3, #4]
    for (i = 0; i < K_MMHEAP_POOL_MAX; ++i) {
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3301      	adds	r3, #1
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	ddf3      	ble.n	800749e <mmheap_ctl_init+0x12>
    }

    k_mmheap_ctl.block_null.next_free = &k_mmheap_ctl.block_null;
 80074b6:	4b19      	ldr	r3, [pc, #100]	; (800751c <mmheap_ctl_init+0x90>)
 80074b8:	4a19      	ldr	r2, [pc, #100]	; (8007520 <mmheap_ctl_init+0x94>)
 80074ba:	619a      	str	r2, [r3, #24]
    k_mmheap_ctl.block_null.prev_free = &k_mmheap_ctl.block_null;
 80074bc:	4b17      	ldr	r3, [pc, #92]	; (800751c <mmheap_ctl_init+0x90>)
 80074be:	4a18      	ldr	r2, [pc, #96]	; (8007520 <mmheap_ctl_init+0x94>)
 80074c0:	61da      	str	r2, [r3, #28]

    k_mmheap_ctl.fl_bitmap = 0;
 80074c2:	4b16      	ldr	r3, [pc, #88]	; (800751c <mmheap_ctl_init+0x90>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	621a      	str	r2, [r3, #32]
    for (i = 0; i < K_MMHEAP_FL_INDEX_COUNT; ++i) {
 80074c8:	2300      	movs	r3, #0
 80074ca:	607b      	str	r3, [r7, #4]
 80074cc:	e01c      	b.n	8007508 <mmheap_ctl_init+0x7c>
        k_mmheap_ctl.sl_bitmap[i] = 0;
 80074ce:	4a13      	ldr	r2, [pc, #76]	; (800751c <mmheap_ctl_init+0x90>)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3308      	adds	r3, #8
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	2200      	movs	r2, #0
 80074da:	605a      	str	r2, [r3, #4]
        for (j = 0; j < K_MMHEAP_SL_INDEX_COUNT; ++j) {
 80074dc:	2300      	movs	r3, #0
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	e00c      	b.n	80074fc <mmheap_ctl_init+0x70>
            k_mmheap_ctl.blocks[i][j] = &k_mmheap_ctl.block_null;
 80074e2:	490e      	ldr	r1, [pc, #56]	; (800751c <mmheap_ctl_init+0x90>)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	4413      	add	r3, r2
 80074ec:	3320      	adds	r3, #32
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	4a0b      	ldr	r2, [pc, #44]	; (8007520 <mmheap_ctl_init+0x94>)
 80074f4:	605a      	str	r2, [r3, #4]
        for (j = 0; j < K_MMHEAP_SL_INDEX_COUNT; ++j) {
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	3301      	adds	r3, #1
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b1f      	cmp	r3, #31
 8007500:	ddef      	ble.n	80074e2 <mmheap_ctl_init+0x56>
    for (i = 0; i < K_MMHEAP_FL_INDEX_COUNT; ++i) {
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3301      	adds	r3, #1
 8007506:	607b      	str	r3, [r7, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b17      	cmp	r3, #23
 800750c:	dddf      	ble.n	80074ce <mmheap_ctl_init+0x42>
        }
    }
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20003a08 	.word	0x20003a08
 8007520:	20003a18 	.word	0x20003a18

08007524 <mmheap_init_with_pool>:
    mmheap_ctl_init();
    return K_ERR_NONE;
}

__KNL__ k_err_t mmheap_init_with_pool(void *pool_start, size_t pool_size)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
    mmheap_ctl_init();
 800752e:	f7ff ffad 	bl	800748c <mmheap_ctl_init>

    return tos_mmheap_pool_add(pool_start, pool_size);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f83e 	bl	80075b6 <tos_mmheap_pool_add>
 800753a:	4603      	mov	r3, r0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <tos_mmheap_alloc>:

__API__ void *tos_mmheap_alloc(size_t size)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
    size_t          adjust_size;
    mmheap_blk_t   *blk;

    adjust_size     = adjust_request_size(size, K_MMHEAP_ALIGN_SIZE);
 800754c:	2104      	movs	r1, #4
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff ff19 	bl	8007386 <adjust_request_size>
 8007554:	60f8      	str	r0, [r7, #12]
    blk             = blk_locate_free(adjust_size);
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff fee4 	bl	8007324 <blk_locate_free>
 800755c:	60b8      	str	r0, [r7, #8]
    if (!blk) {
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <tos_mmheap_alloc+0x24>
        return K_NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	e004      	b.n	8007572 <tos_mmheap_alloc+0x2e>
    }

    return blk_prepare_used(blk, adjust_size);
 8007568:	68f9      	ldr	r1, [r7, #12]
 800756a:	68b8      	ldr	r0, [r7, #8]
 800756c:	f7ff ff2a 	bl	80073c4 <blk_prepare_used>
 8007570:	4603      	mov	r3, r0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <tos_mmheap_free>:

    return blk_prepare_used(blk, adjust_size);
}

__API__ void tos_mmheap_free(void *ptr)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
    mmheap_blk_t *blk;

    if (!ptr) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d012      	beq.n	80075ae <tos_mmheap_free+0x34>
        return;
    }

    blk = blk_from_ptr(ptr);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fc64 	bl	8006e56 <blk_from_ptr>
 800758e:	60f8      	str	r0, [r7, #12]
    blk_mark_as_free(blk);
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff fcb9 	bl	8006f08 <blk_mark_as_free>
    blk = blk_merge_prev(blk);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff fe21 	bl	80071de <blk_merge_prev>
 800759c:	60f8      	str	r0, [r7, #12]
    blk = blk_merge_next(blk);
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff fe38 	bl	8007214 <blk_merge_next>
 80075a4:	60f8      	str	r0, [r7, #12]
    blk_insert(blk);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff fdae 	bl	8007108 <blk_insert>
 80075ac:	e000      	b.n	80075b0 <tos_mmheap_free+0x36>
        return;
 80075ae:	bf00      	nop
}
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <tos_mmheap_pool_add>:

    return p;
}

__API__ k_err_t tos_mmheap_pool_add(void *pool_start, size_t pool_size)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b086      	sub	sp, #24
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
    mmheap_blk_t   *curr_blk;
    mmheap_blk_t   *next_blk;
    size_t          size_aligned;

    if (mmheap_pool_is_full()) {
 80075c0:	f7ff ff1a 	bl	80073f8 <mmheap_pool_is_full>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <tos_mmheap_pool_add+0x1a>
        return K_ERR_MMHEAP_POOL_OVERFLOW;
 80075ca:	f240 3322 	movw	r3, #802	; 0x322
 80075ce:	e046      	b.n	800765e <tos_mmheap_pool_add+0xa8>
    }

    if (mmheap_pool_is_exist(pool_start)) {
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff ff21 	bl	8007418 <mmheap_pool_is_exist>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <tos_mmheap_pool_add+0x2c>
        return K_ERR_MMHEAP_POOL_ALREADY_EXIST;
 80075dc:	f240 3323 	movw	r3, #803	; 0x323
 80075e0:	e03d      	b.n	800765e <tos_mmheap_pool_add+0xa8>
    }

    size_aligned = align_down(pool_size - 2 * K_MMHEAP_BLK_HEADER_OVERHEAD, K_MMHEAP_ALIGN_SIZE);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	3b08      	subs	r3, #8
 80075e6:	2104      	movs	r1, #4
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff fcc3 	bl	8006f74 <align_down>
 80075ee:	6178      	str	r0, [r7, #20]

    if (((cpu_addr_t)pool_start % K_MMHEAP_ALIGN_SIZE) != 0u) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <tos_mmheap_pool_add+0x4a>
        return K_ERR_MMHEAP_INVALID_POOL_ADDR;
 80075fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80075fe:	e02e      	b.n	800765e <tos_mmheap_pool_add+0xa8>
    }

    if (size_aligned < K_MMHEAP_BLK_SIZE_MIN ||
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2b0b      	cmp	r3, #11
 8007604:	d903      	bls.n	800760e <tos_mmheap_pool_add+0x58>
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760c:	d902      	bls.n	8007614 <tos_mmheap_pool_add+0x5e>
        size_aligned > K_MMHEAP_BLK_SIZE_MAX) {
        return K_ERR_MMHEAP_INVALID_POOL_SIZE;
 800760e:	f240 3321 	movw	r3, #801	; 0x321
 8007612:	e024      	b.n	800765e <tos_mmheap_pool_add+0xa8>
    /*
     ** Create the main free block. Offset the start of the block slightly
     ** so that the prev_phys_block field falls outside of the pool -
     ** it will never be used.
     */
    curr_blk = offset_to_blk(pool_start, -K_MMHEAP_BLK_HEADER_OVERHEAD);
 8007614:	f06f 0103 	mvn.w	r1, #3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff fc34 	bl	8006e86 <offset_to_blk>
 800761e:	6138      	str	r0, [r7, #16]
    blk_set_size(curr_blk, size_aligned);
 8007620:	6979      	ldr	r1, [r7, #20]
 8007622:	6938      	ldr	r0, [r7, #16]
 8007624:	f7ff fba8 	bl	8006d78 <blk_set_size>
    blk_set_free(curr_blk);
 8007628:	6938      	ldr	r0, [r7, #16]
 800762a:	f7ff fbc6 	bl	8006dba <blk_set_free>
    blk_set_prev_used(curr_blk);
 800762e:	6938      	ldr	r0, [r7, #16]
 8007630:	f7ff fc01 	bl	8006e36 <blk_set_prev_used>
    blk_insert(curr_blk);
 8007634:	6938      	ldr	r0, [r7, #16]
 8007636:	f7ff fd67 	bl	8007108 <blk_insert>

    /* Split the block to create a zero-size sentinel block. */
    next_blk = blk_link_next(curr_blk);
 800763a:	6938      	ldr	r0, [r7, #16]
 800763c:	f7ff fc54 	bl	8006ee8 <blk_link_next>
 8007640:	60f8      	str	r0, [r7, #12]
    blk_set_size(next_blk, 0);
 8007642:	2100      	movs	r1, #0
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7ff fb97 	bl	8006d78 <blk_set_size>
    blk_set_used(next_blk);
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff fbc5 	bl	8006dda <blk_set_used>
    blk_set_prev_free(next_blk);
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7ff fbe0 	bl	8006e16 <blk_set_prev_free>

    mmheap_pool_record(pool_start);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7ff ff02 	bl	8007460 <mmheap_pool_record>

    return K_ERR_NONE;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_list_add>:
            tmp = TOS_LIST_ENTRY(entry->field.prev, type, field); \
            &entry->field != (list); \
            entry = tmp, tmp = TOS_LIST_ENTRY(entry->field.prev, type, field))

__STATIC_INLINE__ void _list_add(k_list_t *node, k_list_t *prev, k_list_t *next)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	607a      	str	r2, [r7, #4]
    next->prev = node;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	605a      	str	r2, [r3, #4]
    node->next = next;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	601a      	str	r2, [r3, #0]
    node->prev = prev;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	605a      	str	r2, [r3, #4]
    prev->next = node;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	601a      	str	r2, [r3, #0]
}
 800768a:	bf00      	nop
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <_list_del>:

__STATIC_INLINE__ void _list_del(k_list_t *prev, k_list_t *next)
{
 8007696:	b480      	push	{r7}
 8007698:	b083      	sub	sp, #12
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]
    next->prev = prev;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	605a      	str	r2, [r3, #4]
    prev->next = next;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	601a      	str	r2, [r3, #0]
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <tos_list_init>:
{
    _list_del(node->prev, node->next);
}

__API__ __STATIC_INLINE__ void tos_list_init(k_list_t *list)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
    list->next = list;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	601a      	str	r2, [r3, #0]
    list->prev = list;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	605a      	str	r2, [r3, #4]
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <tos_list_add>:

__API__ __STATIC_INLINE__ void tos_list_add(k_list_t *node, k_list_t *list)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
    _list_add(node, list, list->next);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff ffbb 	bl	8007666 <_list_add>
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <tos_list_del>:
{
    _list_add(node, list->prev, list);
}

__API__ __STATIC_INLINE__ void tos_list_del(k_list_t *node)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
    _list_del(node->prev, node->next);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f7ff ffc3 	bl	8007696 <_list_del>
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <knl_object_verify>:
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	807b      	strh	r3, [r7, #2]
    return knl_obj->type == type;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	885b      	ldrh	r3, [r3, #2]
 8007728:	887a      	ldrh	r2, [r7, #2]
 800772a:	429a      	cmp	r2, r3
 800772c:	bf0c      	ite	eq
 800772e:	2301      	moveq	r3, #1
 8007730:	2300      	movne	r3, #0
 8007732:	b2db      	uxtb	r3, r3
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <knl_object_init>:
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	807b      	strh	r3, [r7, #2]
    knl_obj->type = type;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	887a      	ldrh	r2, [r7, #2]
 8007750:	805a      	strh	r2, [r3, #2]
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <knl_object_deinit>:
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
    knl_obj->type = KNL_OBJ_TYPE_NONE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	805a      	strh	r2, [r3, #2]
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <mutex_old_owner_release>:
#include "tos_k.h"

#if TOS_CFG_MUTEX_EN > 0u

__STATIC_INLINE__ void mutex_old_owner_release(k_mutex_t *mutex)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
    k_task_t *owner;

    owner = mutex->owner;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	60fb      	str	r3, [r7, #12]

    tos_list_del(&mutex->owner_anchor);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3318      	adds	r3, #24
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff ffb4 	bl	80076f8 <tos_list_del>
    mutex->owner        = K_NULL;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	611a      	str	r2, [r3, #16]
    mutex->pend_nesting = (k_nesting_t)0u;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	731a      	strb	r2, [r3, #12]

    // the right time comes! let's do it!
    if (owner->prio_pending != K_TASK_PRIO_INVALID) {
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80077a2:	2b0a      	cmp	r3, #10
 80077a4:	d00b      	beq.n	80077be <mutex_old_owner_release+0x46>
        tos_task_prio_change(owner, owner->prio_pending);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80077ac:	4619      	mov	r1, r3
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f002 f89c 	bl	80098ec <tos_task_prio_change>
        owner->prio_pending = K_TASK_PRIO_INVALID;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	220a      	movs	r2, #10
 80077b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    } else if (owner->prio != mutex->owner_orig_prio) {
        tos_task_prio_change(owner, mutex->owner_orig_prio);
        mutex->owner_orig_prio = K_TASK_PRIO_INVALID;
    }
}
 80077bc:	e00f      	b.n	80077de <mutex_old_owner_release+0x66>
    } else if (owner->prio != mutex->owner_orig_prio) {
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7d1b      	ldrb	r3, [r3, #20]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d008      	beq.n	80077de <mutex_old_owner_release+0x66>
        tos_task_prio_change(owner, mutex->owner_orig_prio);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7d1b      	ldrb	r3, [r3, #20]
 80077d0:	4619      	mov	r1, r3
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f002 f88a 	bl	80098ec <tos_task_prio_change>
        mutex->owner_orig_prio = K_TASK_PRIO_INVALID;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	220a      	movs	r2, #10
 80077dc:	751a      	strb	r2, [r3, #20]
}
 80077de:	bf00      	nop
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <mutex_fresh_owner_mark>:

__STATIC_INLINE__ void mutex_fresh_owner_mark(k_mutex_t *mutex, k_task_t *task)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
    mutex->owner            = task;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	611a      	str	r2, [r3, #16]
    mutex->owner_orig_prio  = task->prio;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	751a      	strb	r2, [r3, #20]
    mutex->pend_nesting     = (k_nesting_t)1u;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	731a      	strb	r2, [r3, #12]

    tos_list_add(&mutex->owner_anchor, &task->mutex_own_list);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f103 0218 	add.w	r2, r3, #24
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	3350      	adds	r3, #80	; 0x50
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f7ff ff60 	bl	80076d8 <tos_list_add>
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <mutex_new_owner_mark>:

__STATIC_INLINE__ void mutex_new_owner_mark(k_mutex_t *mutex, k_task_t *task)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
    k_prio_t highest_pending_prio;

    mutex_fresh_owner_mark(mutex, task);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff ffda 	bl	80077e6 <mutex_fresh_owner_mark>

    // we own the mutex now, make sure our priority is higher than any one in the pend list.
    highest_pending_prio = pend_highest_pending_prio_get(&mutex->pend_obj);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3304      	adds	r3, #4
 8007836:	4618      	mov	r0, r3
 8007838:	f000 fabe 	bl	8007db8 <pend_highest_pending_prio_get>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
    if (task->prio > highest_pending_prio) {
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007846:	7bfa      	ldrb	r2, [r7, #15]
 8007848:	429a      	cmp	r2, r3
 800784a:	d204      	bcs.n	8007856 <mutex_new_owner_mark+0x36>
        tos_task_prio_change(task, highest_pending_prio);
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	4619      	mov	r1, r3
 8007850:	6838      	ldr	r0, [r7, #0]
 8007852:	f002 f84b 	bl	80098ec <tos_task_prio_change>
    }
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <mutex_release>:

__KNL__ void mutex_release(k_mutex_t *mutex)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
    mutex_old_owner_release(mutex);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff ff86 	bl	8007778 <mutex_old_owner_release>
    pend_wakeup_all(&mutex->pend_obj, PEND_STATE_OWNER_DIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3304      	adds	r3, #4
 8007870:	2104      	movs	r1, #4
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fb98 	bl	8007fa8 <pend_wakeup_all>
}
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <tos_mutex_create>:

__API__ k_err_t tos_mutex_create(k_mutex_t *mutex)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
    TOS_IN_IRQ_CHECK();
 8007888:	f001 fcd0 	bl	800922c <knl_is_inirq>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	bf14      	ite	ne
 8007892:	2301      	movne	r3, #1
 8007894:	2300      	moveq	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <tos_mutex_create+0x22>
 800789c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80078a0:	e024      	b.n	80078ec <tos_mutex_create+0x6c>
    TOS_PTR_SANITY_CHECK(mutex);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bf0c      	ite	eq
 80078a8:	2301      	moveq	r3, #1
 80078aa:	2300      	movne	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <tos_mutex_create+0x38>
 80078b2:	f240 434c 	movw	r3, #1100	; 0x44c
 80078b6:	e019      	b.n	80078ec <tos_mutex_create+0x6c>

    pend_object_init(&mutex->pend_obj);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fab8 	bl	8007e32 <pend_object_init>
    mutex->pend_nesting     = (k_nesting_t)0u;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	731a      	strb	r2, [r3, #12]
    mutex->owner            = K_NULL;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	611a      	str	r2, [r3, #16]
    mutex->owner_orig_prio  = K_TASK_PRIO_INVALID;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220a      	movs	r2, #10
 80078d2:	751a      	strb	r2, [r3, #20]
    tos_list_init(&mutex->owner_anchor);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3318      	adds	r3, #24
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff feed 	bl	80076b8 <tos_list_init>

    TOS_OBJ_INIT(mutex, KNL_OBJ_TYPE_MUTEX);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f646 31ee 	movw	r1, #27630	; 0x6bee
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff ff2b 	bl	8007740 <knl_object_init>

    return K_ERR_NONE;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <tos_mutex_destroy>:

__API__ k_err_t tos_mutex_destroy(k_mutex_t *mutex)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 80078fc:	2300      	movs	r3, #0
 80078fe:	60fb      	str	r3, [r7, #12]

    TOS_IN_IRQ_CHECK();
 8007900:	f001 fc94 	bl	800922c <knl_is_inirq>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	bf14      	ite	ne
 800790a:	2301      	movne	r3, #1
 800790c:	2300      	moveq	r3, #0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <tos_mutex_destroy+0x26>
 8007914:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007918:	e035      	b.n	8007986 <tos_mutex_destroy+0x92>
    TOS_PTR_SANITY_CHECK(mutex);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	bf0c      	ite	eq
 8007920:	2301      	moveq	r3, #1
 8007922:	2300      	movne	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <tos_mutex_destroy+0x3c>
 800792a:	f240 434c 	movw	r3, #1100	; 0x44c
 800792e:	e02a      	b.n	8007986 <tos_mutex_destroy+0x92>
    TOS_OBJ_VERIFY(mutex, KNL_OBJ_TYPE_MUTEX);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f646 31ee 	movw	r1, #27630	; 0x6bee
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff feee 	bl	8007718 <knl_object_verify>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d102      	bne.n	8007948 <tos_mutex_destroy+0x54>
 8007942:	f240 434d 	movw	r3, #1101	; 0x44d
 8007946:	e01e      	b.n	8007986 <tos_mutex_destroy+0x92>

    TOS_CPU_INT_DISABLE();
 8007948:	f7fe fa66 	bl	8005e18 <tos_cpu_cpsr_save>
 800794c:	60f8      	str	r0, [r7, #12]

    pend_wakeup_all(&mutex->pend_obj, PEND_STATE_DESTROY);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	2103      	movs	r1, #3
 8007954:	4618      	mov	r0, r3
 8007956:	f000 fb27 	bl	8007fa8 <pend_wakeup_all>

    if (mutex->owner) {
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <tos_mutex_destroy+0x74>
        mutex_old_owner_release(mutex);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff ff08 	bl	8007778 <mutex_old_owner_release>
    }

    pend_object_deinit(&mutex->pend_obj);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3304      	adds	r3, #4
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fa6c 	bl	8007e4a <pend_object_deinit>

    TOS_OBJ_DEINIT(mutex);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fef2 	bl	800775e <knl_object_deinit>

    TOS_CPU_INT_ENABLE();
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7fe fa53 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 8007980:	f001 fc06 	bl	8009190 <knl_sched>

    return K_ERR_NONE;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <tos_mutex_pend_timed>:

__API__ k_err_t tos_mutex_pend_timed(k_mutex_t *mutex, k_tick_t timeout)
{
 8007990:	b590      	push	{r4, r7, lr}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	e9c7 2300 	strd	r2, r3, [r7]
    TOS_CPU_CPSR_ALLOC();
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]

    TOS_IN_IRQ_CHECK();
 80079a0:	f001 fc44 	bl	800922c <knl_is_inirq>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bf14      	ite	ne
 80079aa:	2301      	movne	r3, #1
 80079ac:	2300      	moveq	r3, #0
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <tos_mutex_pend_timed+0x2a>
 80079b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80079b8:	e084      	b.n	8007ac4 <tos_mutex_pend_timed+0x134>
    TOS_PTR_SANITY_CHECK(mutex);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bf0c      	ite	eq
 80079c0:	2301      	moveq	r3, #1
 80079c2:	2300      	movne	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <tos_mutex_pend_timed+0x40>
 80079ca:	f240 434c 	movw	r3, #1100	; 0x44c
 80079ce:	e079      	b.n	8007ac4 <tos_mutex_pend_timed+0x134>
    TOS_OBJ_VERIFY(mutex, KNL_OBJ_TYPE_MUTEX);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f646 31ee 	movw	r1, #27630	; 0x6bee
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff fe9e 	bl	8007718 <knl_object_verify>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <tos_mutex_pend_timed+0x58>
 80079e2:	f240 434d 	movw	r3, #1101	; 0x44d
 80079e6:	e06d      	b.n	8007ac4 <tos_mutex_pend_timed+0x134>

    TOS_CPU_INT_DISABLE();
 80079e8:	f7fe fa16 	bl	8005e18 <tos_cpu_cpsr_save>
 80079ec:	6178      	str	r0, [r7, #20]
    if (mutex->pend_nesting == (k_nesting_t)0u) { // first come
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	7b1b      	ldrb	r3, [r3, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <tos_mutex_pend_timed+0x7c>
        mutex_fresh_owner_mark(mutex, k_curr_task);
 80079f6:	4b35      	ldr	r3, [pc, #212]	; (8007acc <tos_mutex_pend_timed+0x13c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4619      	mov	r1, r3
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7ff fef2 	bl	80077e6 <mutex_fresh_owner_mark>
        TOS_CPU_INT_ENABLE();
 8007a02:	6978      	ldr	r0, [r7, #20]
 8007a04:	f7fe fa0f 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_NONE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e05b      	b.n	8007ac4 <tos_mutex_pend_timed+0x134>
    }

    if (knl_is_self(mutex->owner)) { // come again
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 fc2f 	bl	8009274 <knl_is_self>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d015      	beq.n	8007a48 <tos_mutex_pend_timed+0xb8>
        if (mutex->pend_nesting == (k_nesting_t)-1) {
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	7b1b      	ldrb	r3, [r3, #12]
 8007a20:	2bff      	cmp	r3, #255	; 0xff
 8007a22:	d105      	bne.n	8007a30 <tos_mutex_pend_timed+0xa0>
            TOS_CPU_INT_ENABLE();
 8007a24:	6978      	ldr	r0, [r7, #20]
 8007a26:	f7fe f9fe 	bl	8005e26 <tos_cpu_cpsr_restore>
            return K_ERR_MUTEX_NESTING_OVERFLOW;
 8007a2a:	f240 33ea 	movw	r3, #1002	; 0x3ea
 8007a2e:	e049      	b.n	8007ac4 <tos_mutex_pend_timed+0x134>
        }
        ++mutex->pend_nesting;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	7b1b      	ldrb	r3, [r3, #12]
 8007a34:	3301      	adds	r3, #1
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	731a      	strb	r2, [r3, #12]
        TOS_CPU_INT_ENABLE();
 8007a3c:	6978      	ldr	r0, [r7, #20]
 8007a3e:	f7fe f9f2 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_MUTEX_NESTING;
 8007a42:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8007a46:	e03d      	b.n	8007ac4 <tos_mutex_pend_timed+0x134>
    }

    if (timeout == TOS_TIME_NOWAIT) { // no wait, return immediately
 8007a48:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007a4c:	4323      	orrs	r3, r4
 8007a4e:	d105      	bne.n	8007a5c <tos_mutex_pend_timed+0xcc>
        TOS_CPU_INT_ENABLE();
 8007a50:	6978      	ldr	r0, [r7, #20]
 8007a52:	f7fe f9e8 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_PEND_NOWAIT;
 8007a56:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8007a5a:	e033      	b.n	8007ac4 <tos_mutex_pend_timed+0x134>
    }

    if (knl_is_sched_locked()) {
 8007a5c:	f001 fbd6 	bl	800920c <knl_is_sched_locked>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <tos_mutex_pend_timed+0xe2>
        TOS_CPU_INT_ENABLE();
 8007a66:	6978      	ldr	r0, [r7, #20]
 8007a68:	f7fe f9dd 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_PEND_SCHED_LOCKED;
 8007a6c:	f240 43b1 	movw	r3, #1201	; 0x4b1
 8007a70:	e028      	b.n	8007ac4 <tos_mutex_pend_timed+0x134>
    }

    if (mutex->owner->prio > k_curr_task->prio) {
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8007a7a:	4b14      	ldr	r3, [pc, #80]	; (8007acc <tos_mutex_pend_timed+0x13c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d909      	bls.n	8007a9a <tos_mutex_pend_timed+0x10a>
        // PRIORITY INVERSION:
        // we are declaring a mutex, which's owner has a lower(numerically bigger) priority.
        // make owner the same priority with us.
        tos_task_prio_change(mutex->owner, k_curr_task->prio);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	691a      	ldr	r2, [r3, #16]
 8007a8a:	4b10      	ldr	r3, [pc, #64]	; (8007acc <tos_mutex_pend_timed+0x13c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007a92:	4619      	mov	r1, r3
 8007a94:	4610      	mov	r0, r2
 8007a96:	f001 ff29 	bl	80098ec <tos_task_prio_change>
    }

    pend_task_block(k_curr_task, &mutex->pend_obj, timeout);
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <tos_mutex_pend_timed+0x13c>)
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	1d19      	adds	r1, r3, #4
 8007aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aa6:	f000 fa4a 	bl	8007f3e <pend_task_block>

    TOS_CPU_INT_ENABLE();
 8007aaa:	6978      	ldr	r0, [r7, #20]
 8007aac:	f7fe f9bb 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 8007ab0:	f001 fb6e 	bl	8009190 <knl_sched>

    return pend_state2errno(k_curr_task->pend_state);
 8007ab4:	4b05      	ldr	r3, [pc, #20]	; (8007acc <tos_mutex_pend_timed+0x13c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f9f0 	bl	8007ea2 <pend_state2errno>
 8007ac2:	4603      	mov	r3, r0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd90      	pop	{r4, r7, pc}
 8007acc:	20000688 	.word	0x20000688

08007ad0 <tos_mutex_pend>:

__API__ k_err_t tos_mutex_pend(k_mutex_t *mutex)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
    return tos_mutex_pend_timed(mutex, TOS_TIME_FOREVER);
 8007ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8007adc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff ff55 	bl	8007990 <tos_mutex_pend_timed>
 8007ae6:	4603      	mov	r3, r0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <tos_mutex_post>:

__API__ k_err_t tos_mutex_post(k_mutex_t *mutex)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]
    k_task_t *pending_task;

    TOS_IN_IRQ_CHECK();
 8007afc:	f001 fb96 	bl	800922c <knl_is_inirq>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bf14      	ite	ne
 8007b06:	2301      	movne	r3, #1
 8007b08:	2300      	moveq	r3, #0
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <tos_mutex_post+0x26>
 8007b10:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007b14:	e05d      	b.n	8007bd2 <tos_mutex_post+0xe2>
    TOS_PTR_SANITY_CHECK(mutex);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bf0c      	ite	eq
 8007b1c:	2301      	moveq	r3, #1
 8007b1e:	2300      	movne	r3, #0
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <tos_mutex_post+0x3c>
 8007b26:	f240 434c 	movw	r3, #1100	; 0x44c
 8007b2a:	e052      	b.n	8007bd2 <tos_mutex_post+0xe2>
    TOS_OBJ_VERIFY(mutex, KNL_OBJ_TYPE_MUTEX);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f646 31ee 	movw	r1, #27630	; 0x6bee
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fdf0 	bl	8007718 <knl_object_verify>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <tos_mutex_post+0x54>
 8007b3e:	f240 434d 	movw	r3, #1101	; 0x44d
 8007b42:	e046      	b.n	8007bd2 <tos_mutex_post+0xe2>

    TOS_CPU_INT_DISABLE();
 8007b44:	f7fe f968 	bl	8005e18 <tos_cpu_cpsr_save>
 8007b48:	60f8      	str	r0, [r7, #12]
    if (!knl_is_self(mutex->owner)) {
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 fb90 	bl	8009274 <knl_is_self>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d105      	bne.n	8007b66 <tos_mutex_post+0x76>
        TOS_CPU_INT_ENABLE();
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7fe f963 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_MUTEX_NOT_OWNER;
 8007b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b64:	e035      	b.n	8007bd2 <tos_mutex_post+0xe2>
    }

    --mutex->pend_nesting;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	7b1b      	ldrb	r3, [r3, #12]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	731a      	strb	r2, [r3, #12]
    if (mutex->pend_nesting > (k_nesting_t)0u) {
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7b1b      	ldrb	r3, [r3, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <tos_mutex_post+0x96>
        TOS_CPU_INT_ENABLE();
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f7fe f953 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_MUTEX_NESTING;
 8007b80:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8007b84:	e025      	b.n	8007bd2 <tos_mutex_post+0xe2>
    }

    mutex_old_owner_release(mutex);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff fdf6 	bl	8007778 <mutex_old_owner_release>

    if (pend_is_nopending(&mutex->pend_obj)) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 f966 	bl	8007e62 <pend_is_nopending>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d004      	beq.n	8007ba6 <tos_mutex_post+0xb6>
        TOS_CPU_INT_ENABLE();
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f7fe f942 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_NONE;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e015      	b.n	8007bd2 <tos_mutex_post+0xe2>
    /* must do the mutex owner switch right here
       if the pender don't get a chance to schedule, the poster(old owner) may obtain the mutex immediately again
       but the pender already get ready(already in the critical section).
       we switch the owner right here to avoid the old owner obtain the mutex again
     */
    pending_task = pend_highest_pending_task_get(&mutex->pend_obj);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 f921 	bl	8007df2 <pend_highest_pending_task_get>
 8007bb0:	60b8      	str	r0, [r7, #8]
    mutex_new_owner_mark(mutex, pending_task);
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fe33 	bl	8007820 <mutex_new_owner_mark>

    pend_wakeup_one(&mutex->pend_obj, PEND_STATE_POST);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f9df 	bl	8007f84 <pend_wakeup_one>
    TOS_CPU_INT_ENABLE();
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f7fe f92d 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 8007bcc:	f001 fae0 	bl	8009190 <knl_sched>

    return K_ERR_NONE;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <_list_add>:
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	607a      	str	r2, [r7, #4]
    next->prev = node;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	605a      	str	r2, [r3, #4]
    node->next = next;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
    node->prev = prev;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	605a      	str	r2, [r3, #4]
    prev->next = node;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	601a      	str	r2, [r3, #0]
}
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <_list_del>:
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
    next->prev = prev;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	605a      	str	r2, [r3, #4]
    prev->next = next;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	601a      	str	r2, [r3, #0]
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <tos_list_init>:
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
    list->next = list;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
    list->prev = list;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	605a      	str	r2, [r3, #4]
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <tos_list_add_tail>:
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
    _list_add(node, list->prev, list);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff ffbb 	bl	8007bda <_list_add>
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <tos_list_del>:
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
    _list_del(node->prev, node->next);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f7ff ffc3 	bl	8007c0a <_list_del>
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <tos_list_empty>:
    _list_del_node(node);
    tos_list_add_tail(node, list);
}

__API__ __STATIC_INLINE__ int tos_list_empty(const k_list_t *list)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
    return list->next == list;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	bf0c      	ite	eq
 8007c9e:	2301      	moveq	r3, #1
 8007ca0:	2300      	movne	r3, #0
 8007ca2:	b2db      	uxtb	r3, r3
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <task_state_is_sleeping>:
{
    return task->state == K_TASK_STATE_READY;
}

__KNL__ __STATIC_INLINE__ int task_state_is_sleeping(k_task_t *task)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
    return task->state & K_TASK_STATE_SLEEP;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <task_state_is_pending>:

__KNL__ __STATIC_INLINE__ int task_state_is_pending(k_task_t *task)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
    return task->state & K_TASK_STATE_PEND;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cdc:	f003 0302 	and.w	r3, r3, #2
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <task_state_is_suspended>:

__KNL__ __STATIC_INLINE__ int task_state_is_suspended(k_task_t *task)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
    return task->state & K_TASK_STATE_SUSPENDED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cfa:	f003 0304 	and.w	r3, r3, #4
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <task_state_reset_pending>:

__KNL__ __STATIC_INLINE__ void task_state_reset_pending(k_task_t *task)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
    task->state &= ~K_TASK_STATE_PEND;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d18:	f023 0302 	bic.w	r3, r3, #2
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f883 2020 	strb.w	r2, [r3, #32]
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <task_state_set_pend>:
{
    task->state |= K_TASK_STATE_SUSPENDED;
}

__KNL__ __STATIC_INLINE__ void task_state_set_pend(k_task_t *task)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
    task->state |= K_TASK_STATE_PEND;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d3e:	f043 0302 	orr.w	r3, r3, #2
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f883 2020 	strb.w	r2, [r3, #32]
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <pend_list_add>:
 *---------------------------------------------------------------------------*/

#include "tos_k.h"

__STATIC__ void pend_list_add(k_task_t *task, pend_obj_t *pend_obj)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
    k_task_t *iter;

    /* keep priority in descending order, the boss(task with highest priority,
       numerically smallest) always comes first
    */
    TOS_LIST_FOR_EACH_ENTRY(iter, k_task_t, pend_list, &pend_obj->list) {
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3b48      	subs	r3, #72	; 0x48
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e00b      	b.n	8007d82 <pend_list_add+0x2c>
        if (task->prio < iter->prio) {
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d30a      	bcc.n	8007d90 <pend_list_add+0x3a>
    TOS_LIST_FOR_EACH_ENTRY(iter, k_task_t, pend_list, &pend_obj->list) {
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7e:	3b48      	subs	r3, #72	; 0x48
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d1ed      	bne.n	8007d6a <pend_list_add+0x14>
 8007d8e:	e000      	b.n	8007d92 <pend_list_add+0x3c>
            break;
 8007d90:	bf00      	nop
        }
    }
    tos_list_add_tail(&task->pend_list, &iter->pend_list);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3348      	adds	r3, #72	; 0x48
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7ff ff54 	bl	8007c4c <tos_list_add_tail>

    // remember me, you may use me someday
    task->pending_obj = pend_obj;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	65da      	str	r2, [r3, #92]	; 0x5c
    task_state_set_pend(task);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7ff ffc0 	bl	8007d30 <task_state_set_pend>
}
 8007db0:	bf00      	nop
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <pend_highest_pending_prio_get>:

__KNL__ k_prio_t pend_highest_pending_prio_get(pend_obj_t *object)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
    k_task_t *task;

    // we keep the task priority in descending order, so the first one is just fine.
    task = TOS_LIST_FIRST_ENTRY_OR_NULL(&object->list, k_task_t, pend_list);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7ff ff62 	bl	8007c8c <tos_list_empty>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d103      	bne.n	8007dd6 <pend_highest_pending_prio_get+0x1e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3b48      	subs	r3, #72	; 0x48
 8007dd4:	e000      	b.n	8007dd8 <pend_highest_pending_prio_get+0x20>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
    return task ? task->prio : K_TASK_PRIO_INVALID;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <pend_highest_pending_prio_get+0x30>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007de6:	e000      	b.n	8007dea <pend_highest_pending_prio_get+0x32>
 8007de8:	230a      	movs	r3, #10
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <pend_highest_pending_task_get>:

__KNL__ k_task_t *pend_highest_pending_task_get(pend_obj_t *object)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
    return TOS_LIST_FIRST_ENTRY(&object->list, k_task_t, pend_list);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3b48      	subs	r3, #72	; 0x48
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <pend_list_remove>:

__KNL__ void pend_list_remove(k_task_t *task)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
    tos_list_del(&task->pend_list);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3348      	adds	r3, #72	; 0x48
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff ff27 	bl	8007c6c <tos_list_del>

    task->pending_obj = (pend_obj_t *)K_NULL;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	65da      	str	r2, [r3, #92]	; 0x5c
    task_state_reset_pending(task);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff ff70 	bl	8007d0a <task_state_reset_pending>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <pend_object_init>:

__KNL__ void pend_object_init(pend_obj_t *object)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
    tos_list_init(&object->list);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7ff fef5 	bl	8007c2c <tos_list_init>
}
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <pend_object_deinit>:

__KNL__ void pend_object_deinit(pend_obj_t *object)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
    tos_list_init(&object->list);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff fee9 	bl	8007c2c <tos_list_init>
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <pend_is_nopending>:

__KNL__ int pend_is_nopending(pend_obj_t *object)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
    return tos_list_empty(&object->list);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7ff ff0d 	bl	8007c8c <tos_list_empty>
 8007e72:	4603      	mov	r3, r0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <pend_list_adjust>:

__KNL__ void pend_list_adjust(k_task_t *task)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
    // we may be the boss, so re-enter the pend list
    tos_list_del(&task->pend_list);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3348      	adds	r3, #72	; 0x48
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff feef 	bl	8007c6c <tos_list_del>
    // the "someday" comes
    pend_list_add(task, task->pending_obj);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff ff5e 	bl	8007d56 <pend_list_add>
}
 8007e9a:	bf00      	nop
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <pend_state2errno>:

__KNL__ k_err_t pend_state2errno(pend_state_t state)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	71fb      	strb	r3, [r7, #7]
    if (state == PEND_STATE_POST) {
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d101      	bne.n	8007eb6 <pend_state2errno+0x14>
        return K_ERR_NONE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e013      	b.n	8007ede <pend_state2errno+0x3c>
    } else if (state == PEND_STATE_TIMEOUT) {
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d102      	bne.n	8007ec2 <pend_state2errno+0x20>
        return K_ERR_PEND_TIMEOUT;
 8007ebc:	f240 43b3 	movw	r3, #1203	; 0x4b3
 8007ec0:	e00d      	b.n	8007ede <pend_state2errno+0x3c>
    } else if (state == PEND_STATE_DESTROY) {
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d102      	bne.n	8007ece <pend_state2errno+0x2c>
        return K_ERR_PEND_DESTROY;
 8007ec8:	f240 43b4 	movw	r3, #1204	; 0x4b4
 8007ecc:	e007      	b.n	8007ede <pend_state2errno+0x3c>
    } else if (state == PEND_STATE_OWNER_DIE) {
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d102      	bne.n	8007eda <pend_state2errno+0x38>
        return K_ERR_PEND_OWNER_DIE;
 8007ed4:	f240 43b5 	movw	r3, #1205	; 0x4b5
 8007ed8:	e001      	b.n	8007ede <pend_state2errno+0x3c>
    } else {
        return K_ERR_PEND_ABNORMAL;
 8007eda:	f240 43b2 	movw	r3, #1202	; 0x4b2
    }
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <pend_task_wakeup>:

__KNL__ void pend_task_wakeup(k_task_t *task, pend_state_t state)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b082      	sub	sp, #8
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
    if (task_state_is_pending(task)) {
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff fee9 	bl	8007cce <task_state_is_pending>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d006      	beq.n	8007f10 <pend_task_wakeup+0x26>
        // mark why we wakeup
        task->pend_state = state;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        pend_list_remove(task);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff ff7e 	bl	8007e0c <pend_list_remove>
    }

    if (task_state_is_sleeping(task)) {
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff fecd 	bl	8007cb0 <task_state_is_sleeping>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <pend_task_wakeup+0x38>
        tick_list_remove(task);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 ff47 	bl	8009db0 <tick_list_remove>
    }

    if (task_state_is_suspended(task)) {
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff fee2 	bl	8007cec <task_state_is_suspended>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d103      	bne.n	8007f36 <pend_task_wakeup+0x4c>
        return;
    }

    readyqueue_add(task);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fd14 	bl	800895c <readyqueue_add>
 8007f34:	e000      	b.n	8007f38 <pend_task_wakeup+0x4e>
        return;
 8007f36:	bf00      	nop
}
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <pend_task_block>:

__KNL__ void pend_task_block(k_task_t *task, pend_obj_t *object, k_tick_t timeout)
{
 8007f3e:	b590      	push	{r4, r7, lr}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	e9c7 2300 	strd	r2, r3, [r7]
    readyqueue_remove(task);
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 fd1f 	bl	8008990 <readyqueue_remove>

    task->pend_state = PEND_STATE_NONE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    pend_list_add(task, object);
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff fefa 	bl	8007d56 <pend_list_add>

    if (timeout != TOS_TIME_FOREVER) {
 8007f62:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007f66:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007f6a:	bf08      	it	eq
 8007f6c:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 8007f70:	d004      	beq.n	8007f7c <pend_task_block+0x3e>
        tick_list_add(task, timeout);
 8007f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f001 ff08 	bl	8009d8c <tick_list_add>
    }
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd90      	pop	{r4, r7, pc}

08007f84 <pend_wakeup_one>:

__KNL__ void pend_wakeup_one(pend_obj_t *object, pend_state_t state)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
    pend_task_wakeup(TOS_LIST_FIRST_ENTRY(&object->list, k_task_t, pend_list), state);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3b48      	subs	r3, #72	; 0x48
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff ffa5 	bl	8007eea <pend_task_wakeup>
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <pend_wakeup_all>:

__KNL__ void pend_wakeup_all(pend_obj_t *object, pend_state_t state)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
    k_task_t *task, *tmp;

    TOS_LIST_FOR_EACH_ENTRY_SAFE(task, tmp, k_task_t, pend_list, &object->list) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3b48      	subs	r3, #72	; 0x48
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fc0:	3b48      	subs	r3, #72	; 0x48
 8007fc2:	60bb      	str	r3, [r7, #8]
 8007fc4:	e00a      	b.n	8007fdc <pend_wakeup_all+0x34>
        pend_task_wakeup(task, state);
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f7ff ff8d 	bl	8007eea <pend_task_wakeup>
    TOS_LIST_FOR_EACH_ENTRY_SAFE(task, tmp, k_task_t, pend_list, &object->list) {
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd8:	3b48      	subs	r3, #72	; 0x48
 8007fda:	60bb      	str	r3, [r7, #8]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d1ee      	bne.n	8007fc6 <pend_wakeup_all+0x1e>
    }
}
 8007fe8:	bf00      	nop
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <pend_wakeup>:

__KNL__ void pend_wakeup(pend_obj_t *object, pend_state_t state, opt_post_t opt)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	70bb      	strb	r3, [r7, #2]
    if (opt == OPT_POST_ONE) {
 8008000:	78bb      	ldrb	r3, [r7, #2]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d105      	bne.n	8008012 <pend_wakeup+0x22>
        pend_wakeup_one(object, state);
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff ffba 	bl	8007f84 <pend_wakeup_one>
    } else {
        pend_wakeup_all(object, state);
    }
}
 8008010:	e004      	b.n	800801c <pend_wakeup+0x2c>
        pend_wakeup_all(object, state);
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff ffc6 	bl	8007fa8 <pend_wakeup_all>
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <knl_object_verify>:
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	807b      	strh	r3, [r7, #2]
    return knl_obj->type == type;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	885b      	ldrh	r3, [r3, #2]
 8008034:	887a      	ldrh	r2, [r7, #2]
 8008036:	429a      	cmp	r2, r3
 8008038:	bf0c      	ite	eq
 800803a:	2301      	moveq	r3, #1
 800803c:	2300      	movne	r3, #0
 800803e:	b2db      	uxtb	r3, r3
}
 8008040:	4618      	mov	r0, r3
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <knl_object_init>:
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	807b      	strh	r3, [r7, #2]
    knl_obj->type = type;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	887a      	ldrh	r2, [r7, #2]
 800805c:	805a      	strh	r2, [r3, #2]
}
 800805e:	bf00      	nop
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <knl_object_deinit>:
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
    knl_obj->type = KNL_OBJ_TYPE_NONE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	805a      	strh	r2, [r3, #2]
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <knl_object_alloc_reset>:
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
    knl_obj->alloc_type = KNL_OBJ_ALLOC_TYPE_NONE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <knl_object_alloc_set_static>:
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
    knl_obj->alloc_type = KNL_OBJ_ALLOC_TYPE_STATIC;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	701a      	strb	r2, [r3, #0]
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <knl_object_alloc_is_static>:
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
    return knl_obj->alloc_type == KNL_OBJ_ALLOC_TYPE_STATIC;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	bf0c      	ite	eq
 80080c8:	2301      	moveq	r3, #1
 80080ca:	2300      	movne	r3, #0
 80080cc:	b2db      	uxtb	r3, r3
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <ring_q_item_copy_to>:
 *---------------------------------------------------------------------------*/

#include "tos_k.h"

__STATIC_INLINE__ void ring_q_item_copy_to(k_ring_q_t *ring_q, void *item_out, size_t *item_size)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
    memcpy(item_out, RING_HEAD_ITEM(ring_q), ring_q->item_size);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	889b      	ldrh	r3, [r3, #4]
 80080ee:	4619      	mov	r1, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	fb03 f301 	mul.w	r3, r3, r1
 80080f8:	18d1      	adds	r1, r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	461a      	mov	r2, r3
 8008100:	68b8      	ldr	r0, [r7, #8]
 8008102:	f003 fa0f 	bl	800b524 <memcpy>
    if (item_size) {
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <ring_q_item_copy_to+0x3a>
        *item_size = ring_q->item_size;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	601a      	str	r2, [r3, #0]
    }
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <ring_q_item_copy_from>:

__STATIC_INLINE__ void ring_q_item_copy_from(k_ring_q_t *ring_q, void *item_in)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
    memcpy(RING_TAIL_ITEM(ring_q), item_in, ring_q->item_size);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	88db      	ldrh	r3, [r3, #6]
 800812e:	4619      	mov	r1, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	fb03 f301 	mul.w	r3, r3, r1
 8008138:	18d0      	adds	r0, r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	461a      	mov	r2, r3
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	f003 f9ef 	bl	800b524 <memcpy>
}
 8008146:	bf00      	nop
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <ring_q_item_increase>:

__STATIC_INLINE__ void ring_q_item_increase(k_ring_q_t *ring_q)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
    ring_q->tail = RING_NEXT(ring_q, ring_q->tail);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	88db      	ldrh	r3, [r3, #6]
 800815a:	3301      	adds	r3, #1
 800815c:	461a      	mov	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	fbb2 f1f3 	udiv	r1, r2, r3
 8008166:	fb03 f301 	mul.w	r3, r3, r1
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	b29a      	uxth	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	80da      	strh	r2, [r3, #6]
    ++ring_q->total;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	609a      	str	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <ring_q_item_decrease>:

__STATIC_INLINE__ void ring_q_item_decrease(k_ring_q_t *ring_q)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
    ring_q->head = RING_NEXT(ring_q, ring_q->head);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	889b      	ldrh	r3, [r3, #4]
 8008194:	3301      	adds	r3, #1
 8008196:	461a      	mov	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	fbb2 f1f3 	udiv	r1, r2, r3
 80081a0:	fb03 f301 	mul.w	r3, r3, r1
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	809a      	strh	r2, [r3, #4]
    --ring_q->total;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	1e5a      	subs	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	609a      	str	r2, [r3, #8]
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <tos_ring_q_create>:

 __API__ k_err_t tos_ring_q_create(k_ring_q_t *ring_q, void *pool, size_t item_cnt, size_t item_size)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	607a      	str	r2, [r7, #4]
 80081ce:	603b      	str	r3, [r7, #0]
    TOS_PTR_SANITY_CHECK(ring_q);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bf0c      	ite	eq
 80081d6:	2301      	moveq	r3, #1
 80081d8:	2300      	movne	r3, #0
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <tos_ring_q_create+0x24>
 80081e0:	f240 434c 	movw	r3, #1100	; 0x44c
 80081e4:	e027      	b.n	8008236 <tos_ring_q_create+0x74>
    TOS_PTR_SANITY_CHECK(pool);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bf0c      	ite	eq
 80081ec:	2301      	moveq	r3, #1
 80081ee:	2300      	movne	r3, #0
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <tos_ring_q_create+0x3a>
 80081f6:	f240 434c 	movw	r3, #1100	; 0x44c
 80081fa:	e01c      	b.n	8008236 <tos_ring_q_create+0x74>

    ring_q->head        = 0u;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	809a      	strh	r2, [r3, #4]
    ring_q->tail        = 0u;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	80da      	strh	r2, [r3, #6]
    ring_q->total       = 0;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	609a      	str	r2, [r3, #8]

    ring_q->pool        = (uint8_t *)pool;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	60da      	str	r2, [r3, #12]
    ring_q->item_size   = item_size;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	611a      	str	r2, [r3, #16]
    ring_q->item_cnt    = item_cnt;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	615a      	str	r2, [r3, #20]

    TOS_OBJ_INIT(ring_q, KNL_OBJ_TYPE_RING_QUEUE);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f64d 21d6 	movw	r1, #56022	; 0xdad6
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff ff10 	bl	800804c <knl_object_init>
    knl_object_alloc_set_static(&ring_q->knl_obj);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff ff35 	bl	800809e <knl_object_alloc_set_static>

    return K_ERR_NONE;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <tos_ring_q_destroy>:

__API__ k_err_t tos_ring_q_destroy(k_ring_q_t *ring_q)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
    TOS_PTR_SANITY_CHECK(ring_q);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	bf0c      	ite	eq
 800824c:	2301      	moveq	r3, #1
 800824e:	2300      	movne	r3, #0
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <tos_ring_q_destroy+0x1e>
 8008256:	f240 434c 	movw	r3, #1100	; 0x44c
 800825a:	e030      	b.n	80082be <tos_ring_q_destroy+0x80>
    TOS_OBJ_VERIFY(ring_q, KNL_OBJ_TYPE_RING_QUEUE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f64d 21d6 	movw	r1, #56022	; 0xdad6
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff fede 	bl	8008024 <knl_object_verify>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d102      	bne.n	8008274 <tos_ring_q_destroy+0x36>
 800826e:	f240 434d 	movw	r3, #1101	; 0x44d
 8008272:	e024      	b.n	80082be <tos_ring_q_destroy+0x80>

    if (!knl_object_alloc_is_static(&ring_q->knl_obj)) {
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4618      	mov	r0, r3
 8008278:	f7ff ff1e 	bl	80080b8 <knl_object_alloc_is_static>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d102      	bne.n	8008288 <tos_ring_q_destroy+0x4a>
        return K_ERR_OBJ_INVALID_ALLOC_TYPE;
 8008282:	f240 434e 	movw	r3, #1102	; 0x44e
 8008286:	e01a      	b.n	80082be <tos_ring_q_destroy+0x80>
    }

    ring_q->head        = 0u;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	809a      	strh	r2, [r3, #4]
    ring_q->tail        = 0u;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	80da      	strh	r2, [r3, #6]
    ring_q->total       = 0;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	609a      	str	r2, [r3, #8]

    ring_q->pool        = K_NULL;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	60da      	str	r2, [r3, #12]
    ring_q->item_size   = 0u;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	611a      	str	r2, [r3, #16]
    ring_q->item_cnt    = 0u;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	615a      	str	r2, [r3, #20]

    TOS_OBJ_DEINIT(ring_q);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7ff fedb 	bl	800806a <knl_object_deinit>
    knl_object_alloc_reset(&ring_q->knl_obj);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff fee4 	bl	8008084 <knl_object_alloc_reset>

    return K_ERR_NONE;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <tos_ring_q_enqueue>:

    return K_ERR_NONE;
}

__API__ k_err_t tos_ring_q_enqueue(k_ring_q_t *ring_q, void *item, size_t item_size)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b086      	sub	sp, #24
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	607a      	str	r2, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]

    TOS_PTR_SANITY_CHECK(ring_q);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	bf0c      	ite	eq
 80082dc:	2301      	moveq	r3, #1
 80082de:	2300      	movne	r3, #0
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <tos_ring_q_enqueue+0x26>
 80082e6:	f240 434c 	movw	r3, #1100	; 0x44c
 80082ea:	e038      	b.n	800835e <tos_ring_q_enqueue+0x98>
    TOS_PTR_SANITY_CHECK(item);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bf0c      	ite	eq
 80082f2:	2301      	moveq	r3, #1
 80082f4:	2300      	movne	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <tos_ring_q_enqueue+0x3c>
 80082fc:	f240 434c 	movw	r3, #1100	; 0x44c
 8008300:	e02d      	b.n	800835e <tos_ring_q_enqueue+0x98>
    TOS_OBJ_VERIFY(ring_q, KNL_OBJ_TYPE_RING_QUEUE);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f64d 21d6 	movw	r1, #56022	; 0xdad6
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff fe8b 	bl	8008024 <knl_object_verify>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <tos_ring_q_enqueue+0x54>
 8008314:	f240 434d 	movw	r3, #1101	; 0x44d
 8008318:	e021      	b.n	800835e <tos_ring_q_enqueue+0x98>

    if (item_size != ring_q->item_size) {
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d002      	beq.n	800832a <tos_ring_q_enqueue+0x64>
        return K_ERR_RING_Q_ITEM_SIZE_NOT_MATCH;
 8008324:	f240 53de 	movw	r3, #1502	; 0x5de
 8008328:	e019      	b.n	800835e <tos_ring_q_enqueue+0x98>
    }

    TOS_CPU_INT_DISABLE();
 800832a:	f7fd fd75 	bl	8005e18 <tos_cpu_cpsr_save>
 800832e:	6178      	str	r0, [r7, #20]

    if (tos_ring_q_is_full(ring_q)) {
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f891 	bl	8008458 <tos_ring_q_is_full>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <tos_ring_q_enqueue+0x82>
        TOS_CPU_INT_ENABLE();
 800833c:	6978      	ldr	r0, [r7, #20]
 800833e:	f7fd fd72 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_RING_Q_FULL;
 8008342:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8008346:	e00a      	b.n	800835e <tos_ring_q_enqueue+0x98>
    }

    ring_q_item_copy_from(ring_q, item);
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7ff fee6 	bl	800811c <ring_q_item_copy_from>
    ring_q_item_increase(ring_q);
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f7ff fefc 	bl	800814e <ring_q_item_increase>

    TOS_CPU_INT_ENABLE();
 8008356:	6978      	ldr	r0, [r7, #20]
 8008358:	f7fd fd65 	bl	8005e26 <tos_cpu_cpsr_restore>
    return K_ERR_NONE;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <tos_ring_q_dequeue>:

__API__ k_err_t tos_ring_q_dequeue(k_ring_q_t *ring_q, void *item, size_t *item_size)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	607a      	str	r2, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]

    TOS_PTR_SANITY_CHECK(ring_q);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	bf0c      	ite	eq
 800837c:	2301      	moveq	r3, #1
 800837e:	2300      	movne	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <tos_ring_q_dequeue+0x26>
 8008386:	f240 434c 	movw	r3, #1100	; 0x44c
 800838a:	e031      	b.n	80083f0 <tos_ring_q_dequeue+0x8a>
    TOS_PTR_SANITY_CHECK(item);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	bf0c      	ite	eq
 8008392:	2301      	moveq	r3, #1
 8008394:	2300      	movne	r3, #0
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <tos_ring_q_dequeue+0x3c>
 800839c:	f240 434c 	movw	r3, #1100	; 0x44c
 80083a0:	e026      	b.n	80083f0 <tos_ring_q_dequeue+0x8a>
    TOS_OBJ_VERIFY(ring_q, KNL_OBJ_TYPE_RING_QUEUE);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f64d 21d6 	movw	r1, #56022	; 0xdad6
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7ff fe3b 	bl	8008024 <knl_object_verify>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <tos_ring_q_dequeue+0x54>
 80083b4:	f240 434d 	movw	r3, #1101	; 0x44d
 80083b8:	e01a      	b.n	80083f0 <tos_ring_q_dequeue+0x8a>

    TOS_CPU_INT_DISABLE();
 80083ba:	f7fd fd2d 	bl	8005e18 <tos_cpu_cpsr_save>
 80083be:	6178      	str	r0, [r7, #20]

    if (tos_ring_q_is_empty(ring_q)) {
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 f819 	bl	80083f8 <tos_ring_q_is_empty>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <tos_ring_q_dequeue+0x72>
        TOS_CPU_INT_ENABLE();
 80083cc:	6978      	ldr	r0, [r7, #20]
 80083ce:	f7fd fd2a 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_RING_Q_EMPTY;
 80083d2:	f240 53dd 	movw	r3, #1501	; 0x5dd
 80083d6:	e00b      	b.n	80083f0 <tos_ring_q_dequeue+0x8a>
    }

    ring_q_item_copy_to(ring_q, item, item_size);
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fe7c 	bl	80080da <ring_q_item_copy_to>
    ring_q_item_decrease(ring_q);
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff fed0 	bl	8008188 <ring_q_item_decrease>

    TOS_CPU_INT_ENABLE();
 80083e8:	6978      	ldr	r0, [r7, #20]
 80083ea:	f7fd fd1c 	bl	8005e26 <tos_cpu_cpsr_restore>

    return K_ERR_NONE;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <tos_ring_q_is_empty>:

    return K_ERR_NONE;
}

__API__ int tos_ring_q_is_empty(k_ring_q_t *ring_q)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
    int is_empty = K_FALSE;
 8008404:	2300      	movs	r3, #0
 8008406:	60bb      	str	r3, [r7, #8]

    TOS_PTR_SANITY_CHECK_RC(ring_q, K_FALSE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	bf0c      	ite	eq
 800840e:	2301      	moveq	r3, #1
 8008410:	2300      	movne	r3, #0
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <tos_ring_q_is_empty+0x24>
 8008418:	2300      	movs	r3, #0
 800841a:	e019      	b.n	8008450 <tos_ring_q_is_empty+0x58>
    TOS_OBJ_VERIFY_RC(ring_q, KNL_OBJ_TYPE_RING_QUEUE, K_FALSE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f64d 21d6 	movw	r1, #56022	; 0xdad6
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff fdfe 	bl	8008024 <knl_object_verify>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <tos_ring_q_is_empty+0x3a>
 800842e:	2300      	movs	r3, #0
 8008430:	e00e      	b.n	8008450 <tos_ring_q_is_empty+0x58>

    TOS_CPU_INT_DISABLE();
 8008432:	f7fd fcf1 	bl	8005e18 <tos_cpu_cpsr_save>
 8008436:	60f8      	str	r0, [r7, #12]
    is_empty = (ring_q->total == 0 ? K_TRUE : K_FALSE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	bf0c      	ite	eq
 8008440:	2301      	moveq	r3, #1
 8008442:	2300      	movne	r3, #0
 8008444:	b2db      	uxtb	r3, r3
 8008446:	60bb      	str	r3, [r7, #8]
    TOS_CPU_INT_ENABLE();
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f7fd fcec 	bl	8005e26 <tos_cpu_cpsr_restore>

    return is_empty;
 800844e:	68bb      	ldr	r3, [r7, #8]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <tos_ring_q_is_full>:

__API__ int tos_ring_q_is_full(k_ring_q_t *ring_q)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 8008460:	2300      	movs	r3, #0
 8008462:	60fb      	str	r3, [r7, #12]
    int is_full = K_FALSE;
 8008464:	2300      	movs	r3, #0
 8008466:	60bb      	str	r3, [r7, #8]

    TOS_PTR_SANITY_CHECK_RC(ring_q, K_FALSE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	bf0c      	ite	eq
 800846e:	2301      	moveq	r3, #1
 8008470:	2300      	movne	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <tos_ring_q_is_full+0x24>
 8008478:	2300      	movs	r3, #0
 800847a:	e01b      	b.n	80084b4 <tos_ring_q_is_full+0x5c>
    TOS_OBJ_VERIFY_RC(ring_q, KNL_OBJ_TYPE_RING_QUEUE, K_FALSE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f64d 21d6 	movw	r1, #56022	; 0xdad6
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff fdce 	bl	8008024 <knl_object_verify>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <tos_ring_q_is_full+0x3a>
 800848e:	2300      	movs	r3, #0
 8008490:	e010      	b.n	80084b4 <tos_ring_q_is_full+0x5c>

    TOS_CPU_INT_DISABLE();
 8008492:	f7fd fcc1 	bl	8005e18 <tos_cpu_cpsr_save>
 8008496:	60f8      	str	r0, [r7, #12]
    is_full = (ring_q->total == ring_q->item_cnt ? K_TRUE : K_FALSE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	bf0c      	ite	eq
 80084a4:	2301      	moveq	r3, #1
 80084a6:	2300      	movne	r3, #0
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	60bb      	str	r3, [r7, #8]
    TOS_CPU_INT_ENABLE();
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7fd fcba 	bl	8005e26 <tos_cpu_cpsr_restore>

    return is_full;
 80084b2:	68bb      	ldr	r3, [r7, #8]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <robin_sched>:
    }
    TOS_CPU_INT_ENABLE();
}

__KNL__ void robin_sched(k_prio_t prio)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	71fb      	strb	r3, [r7, #7]
    TOS_CPU_CPSR_ALLOC();
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
    k_task_t *task;

    TOS_CPU_INT_DISABLE();
 80084ca:	f7fd fca5 	bl	8005e18 <tos_cpu_cpsr_save>
 80084ce:	60f8      	str	r0, [r7, #12]

    task = readyqueue_first_task_get(prio);
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f99c 	bl	8008810 <readyqueue_first_task_get>
 80084d8:	60b8      	str	r0, [r7, #8]
    if (!task || knl_is_idle(task)) {
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <robin_sched+0x30>
 80084e0:	68b8      	ldr	r0, [r7, #8]
 80084e2:	f000 feb3 	bl	800924c <knl_is_idle>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <robin_sched+0x38>
        TOS_CPU_INT_ENABLE();
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7fd fc9a 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 80084f2:	e042      	b.n	800857a <robin_sched+0xbe>
    }

    if (readyqueue_is_prio_onlyone(prio)) {
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 f96c 	bl	80087d4 <readyqueue_is_prio_onlyone>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <robin_sched+0x4e>
        TOS_CPU_INT_ENABLE();
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7fd fc8f 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 8008508:	e037      	b.n	800857a <robin_sched+0xbe>
    }

    if (knl_is_sched_locked()) {
 800850a:	f000 fe7f 	bl	800920c <knl_is_sched_locked>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <robin_sched+0x60>
        TOS_CPU_INT_ENABLE();
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7fd fc86 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 800851a:	e02e      	b.n	800857a <robin_sched+0xbe>
    }

    if (task->timeslice > (k_timeslice_t)0u) {
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008520:	2b00      	cmp	r3, #0
 8008522:	d004      	beq.n	800852e <robin_sched+0x72>
        --task->timeslice;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008528:	1e5a      	subs	r2, r3, #1
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    if (task->timeslice > (k_timeslice_t)0u) {
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <robin_sched+0x82>
        TOS_CPU_INT_ENABLE();
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7fd fc75 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 800853c:	e01d      	b.n	800857a <robin_sched+0xbe>
    }

    readyqueue_move_head_to_tail(k_curr_task->prio);
 800853e:	4b10      	ldr	r3, [pc, #64]	; (8008580 <robin_sched+0xc4>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fa52 	bl	80089f0 <readyqueue_move_head_to_tail>

    task = readyqueue_first_task_get(prio);
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 f95e 	bl	8008810 <readyqueue_first_task_get>
 8008554:	60b8      	str	r0, [r7, #8]
    if (task->timeslice_reload == (k_timeslice_t)0u) {
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800855a:	2b00      	cmp	r3, #0
 800855c:	d104      	bne.n	8008568 <robin_sched+0xac>
        task->timeslice = k_robin_default_timeslice;
 800855e:	4b09      	ldr	r3, [pc, #36]	; (8008584 <robin_sched+0xc8>)
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	669a      	str	r2, [r3, #104]	; 0x68
 8008566:	e003      	b.n	8008570 <robin_sched+0xb4>
    } else {
        task->timeslice = task->timeslice_reload;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    TOS_CPU_INT_ENABLE();
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f7fd fc58 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 8008576:	f000 fe0b 	bl	8009190 <knl_sched>
}
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20000688 	.word	0x20000688
 8008584:	200003b8 	.word	0x200003b8

08008588 <_list_add>:
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
    next->prev = node;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	605a      	str	r2, [r3, #4]
    node->next = next;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	601a      	str	r2, [r3, #0]
    node->prev = prev;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	605a      	str	r2, [r3, #4]
    prev->next = node;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	601a      	str	r2, [r3, #0]
}
 80085ac:	bf00      	nop
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <_list_del>:
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
    next->prev = prev;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	605a      	str	r2, [r3, #4]
    prev->next = next;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	601a      	str	r2, [r3, #0]
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <_list_del_node>:
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
    _list_del(node->prev, node->next);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f7ff ffe3 	bl	80085b8 <_list_del>
}
 80085f2:	bf00      	nop
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <tos_list_init>:
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
    list->next = list;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	601a      	str	r2, [r3, #0]
    list->prev = list;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	605a      	str	r2, [r3, #4]
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <tos_list_add>:
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
    _list_add(node, list, list->next);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff ffab 	bl	8008588 <_list_add>
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <tos_list_add_tail>:
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
    _list_add(node, list->prev, list);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7ff ff9b 	bl	8008588 <_list_add>
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <tos_list_del>:
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b082      	sub	sp, #8
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
    _list_del(node->prev, node->next);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4619      	mov	r1, r3
 800866c:	4610      	mov	r0, r2
 800866e:	f7ff ffa3 	bl	80085b8 <_list_del>
}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <tos_list_move_tail>:
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
    _list_del_node(node);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff ffa8 	bl	80085da <_list_del_node>
    tos_list_add_tail(node, list);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff ffd4 	bl	800863a <tos_list_add_tail>
}
 8008692:	bf00      	nop
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <tos_list_empty>:
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
    return list->next == list;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	bf0c      	ite	eq
 80086ac:	2301      	moveq	r3, #1
 80086ae:	2300      	movne	r3, #0
 80086b0:	b2db      	uxtb	r3, r3
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
	...

080086c0 <readyqueue_prio_highest_get>:
 *---------------------------------------------------------------------------*/

#include "tos_k.h"

__STATIC__ k_prio_t readyqueue_prio_highest_get(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
    uint32_t *tbl;
    k_prio_t prio;

    prio    = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	70fb      	strb	r3, [r7, #3]
    tbl     = &k_rdyq.prio_mask[0];
 80086ca:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <readyqueue_prio_highest_get+0x44>)
 80086cc:	607b      	str	r3, [r7, #4]

    while (*tbl == 0) {
 80086ce:	e005      	b.n	80086dc <readyqueue_prio_highest_get+0x1c>
        prio += K_PRIO_TBL_SLOT_SIZE;
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	3320      	adds	r3, #32
 80086d4:	70fb      	strb	r3, [r7, #3]
        ++tbl;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3304      	adds	r3, #4
 80086da:	607b      	str	r3, [r7, #4]
    while (*tbl == 0) {
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0f5      	beq.n	80086d0 <readyqueue_prio_highest_get+0x10>
    }
    prio += tos_cpu_clz(*tbl);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fd fb89 	bl	8005e00 <tos_cpu_clz>
 80086ee:	4603      	mov	r3, r0
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	4413      	add	r3, r2
 80086f6:	70fb      	strb	r3, [r7, #3]
    return prio;
 80086f8:	78fb      	ldrb	r3, [r7, #3]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20003800 	.word	0x20003800

08008708 <readyqueue_prio_insert>:

__STATIC_INLINE__ void readyqueue_prio_insert(k_prio_t prio)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	71fb      	strb	r3, [r7, #7]
    k_rdyq.prio_mask[K_PRIO_NDX(prio)] |= K_PRIO_BIT(prio);
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	095b      	lsrs	r3, r3, #5
 8008716:	b2db      	uxtb	r3, r3
 8008718:	4a0d      	ldr	r2, [pc, #52]	; (8008750 <readyqueue_prio_insert+0x48>)
 800871a:	3314      	adds	r3, #20
 800871c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	43db      	mvns	r3, r3
 8008724:	f003 031f 	and.w	r3, r3, #31
 8008728:	2101      	movs	r1, #1
 800872a:	fa01 f303 	lsl.w	r3, r1, r3
 800872e:	79f9      	ldrb	r1, [r7, #7]
 8008730:	0949      	lsrs	r1, r1, #5
 8008732:	b2c9      	uxtb	r1, r1
 8008734:	4608      	mov	r0, r1
 8008736:	431a      	orrs	r2, r3
 8008738:	4905      	ldr	r1, [pc, #20]	; (8008750 <readyqueue_prio_insert+0x48>)
 800873a:	f100 0314 	add.w	r3, r0, #20
 800873e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	200037b0 	.word	0x200037b0

08008754 <readyqueue_prio_remove>:

__STATIC_INLINE__ void readyqueue_prio_remove(k_prio_t prio)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	71fb      	strb	r3, [r7, #7]
    k_rdyq.prio_mask[K_PRIO_NDX(prio)] &= ~K_PRIO_BIT(prio);
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	095b      	lsrs	r3, r3, #5
 8008762:	b2db      	uxtb	r3, r3
 8008764:	4a0d      	ldr	r2, [pc, #52]	; (800879c <readyqueue_prio_remove+0x48>)
 8008766:	3314      	adds	r3, #20
 8008768:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800876c:	79fb      	ldrb	r3, [r7, #7]
 800876e:	43db      	mvns	r3, r3
 8008770:	f003 031f 	and.w	r3, r3, #31
 8008774:	2101      	movs	r1, #1
 8008776:	fa01 f303 	lsl.w	r3, r1, r3
 800877a:	43db      	mvns	r3, r3
 800877c:	79f9      	ldrb	r1, [r7, #7]
 800877e:	0949      	lsrs	r1, r1, #5
 8008780:	b2c9      	uxtb	r1, r1
 8008782:	4608      	mov	r0, r1
 8008784:	401a      	ands	r2, r3
 8008786:	4905      	ldr	r1, [pc, #20]	; (800879c <readyqueue_prio_remove+0x48>)
 8008788:	f100 0314 	add.w	r3, r0, #20
 800878c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	200037b0 	.word	0x200037b0

080087a0 <readyqueue_prio_mark>:

__STATIC_INLINE__ void readyqueue_prio_mark(k_prio_t prio)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	71fb      	strb	r3, [r7, #7]
    readyqueue_prio_insert(prio);
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff ffab 	bl	8008708 <readyqueue_prio_insert>

    if (prio < k_rdyq.highest_prio) {
 80087b2:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <readyqueue_prio_mark+0x30>)
 80087b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80087b8:	79fa      	ldrb	r2, [r7, #7]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d203      	bcs.n	80087c6 <readyqueue_prio_mark+0x26>
        k_rdyq.highest_prio = prio;
 80087be:	4a04      	ldr	r2, [pc, #16]	; (80087d0 <readyqueue_prio_mark+0x30>)
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
    }
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200037b0 	.word	0x200037b0

080087d4 <readyqueue_is_prio_onlyone>:

/**
 * when this function involved, must be at least one task in the task list of the certain priority
 */
__KNL__ int readyqueue_is_prio_onlyone(k_prio_t prio)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	71fb      	strb	r3, [r7, #7]
    k_list_t *task_list;
    k_task_t *task;

    task_list = &k_rdyq.task_list_head[prio];
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	4a0a      	ldr	r2, [pc, #40]	; (800880c <readyqueue_is_prio_onlyone+0x38>)
 80087e4:	4413      	add	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
    task = TOS_LIST_FIRST_ENTRY(task_list, k_task_t, pend_list);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3b48      	subs	r3, #72	; 0x48
 80087ee:	60bb      	str	r3, [r7, #8]
    return task->pend_list.next == task_list;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	bf0c      	ite	eq
 80087fa:	2301      	moveq	r3, #1
 80087fc:	2300      	movne	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	200037b0 	.word	0x200037b0

08008810 <readyqueue_first_task_get>:

__KNL__ k_task_t *readyqueue_first_task_get(k_prio_t prio)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	71fb      	strb	r3, [r7, #7]
    k_list_t *task_list;

    task_list = &k_rdyq.task_list_head[prio];
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	4a09      	ldr	r2, [pc, #36]	; (8008844 <readyqueue_first_task_get+0x34>)
 8008820:	4413      	add	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
    return TOS_LIST_FIRST_ENTRY_OR_NULL(task_list, k_task_t, pend_list);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7ff ff38 	bl	800869a <tos_list_empty>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d103      	bne.n	8008838 <readyqueue_first_task_get+0x28>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3b48      	subs	r3, #72	; 0x48
 8008836:	e000      	b.n	800883a <readyqueue_first_task_get+0x2a>
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	200037b0 	.word	0x200037b0

08008848 <readyqueue_highest_ready_task_get>:

__KNL__ k_task_t *readyqueue_highest_ready_task_get(void)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
    k_list_t *task_list;

    task_list = &k_rdyq.task_list_head[k_rdyq.highest_prio];
 800884e:	4b08      	ldr	r3, [pc, #32]	; (8008870 <readyqueue_highest_ready_task_get+0x28>)
 8008850:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008854:	00db      	lsls	r3, r3, #3
 8008856:	4a06      	ldr	r2, [pc, #24]	; (8008870 <readyqueue_highest_ready_task_get+0x28>)
 8008858:	4413      	add	r3, r2
 800885a:	607b      	str	r3, [r7, #4]
    return TOS_LIST_FIRST_ENTRY(task_list, k_task_t, pend_list);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3b48      	subs	r3, #72	; 0x48
}
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	200037b0 	.word	0x200037b0

08008874 <readyqueue_init>:

__KNL__ void readyqueue_init(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
    uint8_t i;

    k_rdyq.highest_prio = TOS_CFG_TASK_PRIO_MAX;
 800887a:	4b13      	ldr	r3, [pc, #76]	; (80088c8 <readyqueue_init+0x54>)
 800887c:	220a      	movs	r2, #10
 800887e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    for (i = 0; i < TOS_CFG_TASK_PRIO_MAX; ++i) {
 8008882:	2300      	movs	r3, #0
 8008884:	71fb      	strb	r3, [r7, #7]
 8008886:	e009      	b.n	800889c <readyqueue_init+0x28>
        tos_list_init(&k_rdyq.task_list_head[i]);
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	4a0e      	ldr	r2, [pc, #56]	; (80088c8 <readyqueue_init+0x54>)
 800888e:	4413      	add	r3, r2
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff feb2 	bl	80085fa <tos_list_init>
    for (i = 0; i < TOS_CFG_TASK_PRIO_MAX; ++i) {
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	3301      	adds	r3, #1
 800889a:	71fb      	strb	r3, [r7, #7]
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	2b09      	cmp	r3, #9
 80088a0:	d9f2      	bls.n	8008888 <readyqueue_init+0x14>
    }

    for (i = 0; i < K_PRIO_TBL_SIZE; ++i) {
 80088a2:	2300      	movs	r3, #0
 80088a4:	71fb      	strb	r3, [r7, #7]
 80088a6:	e008      	b.n	80088ba <readyqueue_init+0x46>
        k_rdyq.prio_mask[i] = 0;
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	4a07      	ldr	r2, [pc, #28]	; (80088c8 <readyqueue_init+0x54>)
 80088ac:	3314      	adds	r3, #20
 80088ae:	2100      	movs	r1, #0
 80088b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < K_PRIO_TBL_SIZE; ++i) {
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	3301      	adds	r3, #1
 80088b8:	71fb      	strb	r3, [r7, #7]
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0f3      	beq.n	80088a8 <readyqueue_init+0x34>
    }
}
 80088c0:	bf00      	nop
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	200037b0 	.word	0x200037b0

080088cc <readyqueue_add_head>:

__KNL__ void readyqueue_add_head(k_task_t *task)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
    k_prio_t task_prio;
    k_list_t *task_list;

    task_prio = task->prio;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088da:	73fb      	strb	r3, [r7, #15]
    task_list = &k_rdyq.task_list_head[task_prio];
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	4a0b      	ldr	r2, [pc, #44]	; (8008910 <readyqueue_add_head+0x44>)
 80088e2:	4413      	add	r3, r2
 80088e4:	60bb      	str	r3, [r7, #8]

    if (tos_list_empty(task_list)) {
 80088e6:	68b8      	ldr	r0, [r7, #8]
 80088e8:	f7ff fed7 	bl	800869a <tos_list_empty>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <readyqueue_add_head+0x2e>
        readyqueue_prio_mark(task_prio);
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff ff53 	bl	80087a0 <readyqueue_prio_mark>
    }

    tos_list_add(&task->pend_list, task_list);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	3348      	adds	r3, #72	; 0x48
 80088fe:	68b9      	ldr	r1, [r7, #8]
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff fe8a 	bl	800861a <tos_list_add>
}
 8008906:	bf00      	nop
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	200037b0 	.word	0x200037b0

08008914 <readyqueue_add_tail>:

__KNL__ void readyqueue_add_tail(k_task_t *task)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
    k_prio_t task_prio;
    k_list_t *task_list;

    task_prio = task->prio;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008922:	73fb      	strb	r3, [r7, #15]
    task_list = &k_rdyq.task_list_head[task_prio];
 8008924:	7bfb      	ldrb	r3, [r7, #15]
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	4a0b      	ldr	r2, [pc, #44]	; (8008958 <readyqueue_add_tail+0x44>)
 800892a:	4413      	add	r3, r2
 800892c:	60bb      	str	r3, [r7, #8]

    if (tos_list_empty(task_list)) {
 800892e:	68b8      	ldr	r0, [r7, #8]
 8008930:	f7ff feb3 	bl	800869a <tos_list_empty>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <readyqueue_add_tail+0x2e>
        readyqueue_prio_mark(task_prio);
 800893a:	7bfb      	ldrb	r3, [r7, #15]
 800893c:	4618      	mov	r0, r3
 800893e:	f7ff ff2f 	bl	80087a0 <readyqueue_prio_mark>
    }

    tos_list_add_tail(&task->pend_list, task_list);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3348      	adds	r3, #72	; 0x48
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff fe76 	bl	800863a <tos_list_add_tail>
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	200037b0 	.word	0x200037b0

0800895c <readyqueue_add>:

__KNL__ void readyqueue_add(k_task_t *task)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
    if (task->prio == k_curr_task->prio) {
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800896a:	4b08      	ldr	r3, [pc, #32]	; (800898c <readyqueue_add+0x30>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008972:	429a      	cmp	r2, r3
 8008974:	d103      	bne.n	800897e <readyqueue_add+0x22>
        readyqueue_add_tail(task);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff ffcc 	bl	8008914 <readyqueue_add_tail>
    } else {
        readyqueue_add_head(task);
    }
}
 800897c:	e002      	b.n	8008984 <readyqueue_add+0x28>
        readyqueue_add_head(task);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff ffa4 	bl	80088cc <readyqueue_add_head>
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000688 	.word	0x20000688

08008990 <readyqueue_remove>:

__KNL__ void readyqueue_remove(k_task_t *task)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
    k_prio_t task_prio;
    k_list_t *task_list;

    task_prio = task->prio;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800899e:	73fb      	strb	r3, [r7, #15]
    task_list = &k_rdyq.task_list_head[task_prio];
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	4a11      	ldr	r2, [pc, #68]	; (80089ec <readyqueue_remove+0x5c>)
 80089a6:	4413      	add	r3, r2
 80089a8:	60bb      	str	r3, [r7, #8]

    tos_list_del(&task->pend_list);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3348      	adds	r3, #72	; 0x48
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff fe53 	bl	800865a <tos_list_del>

    if (tos_list_empty(task_list)) {
 80089b4:	68b8      	ldr	r0, [r7, #8]
 80089b6:	f7ff fe70 	bl	800869a <tos_list_empty>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <readyqueue_remove+0x38>
        readyqueue_prio_remove(task_prio);
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fec6 	bl	8008754 <readyqueue_prio_remove>
    }

    if (task_prio == k_rdyq.highest_prio) {
 80089c8:	4b08      	ldr	r3, [pc, #32]	; (80089ec <readyqueue_remove+0x5c>)
 80089ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80089ce:	7bfa      	ldrb	r2, [r7, #15]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d106      	bne.n	80089e2 <readyqueue_remove+0x52>
        k_rdyq.highest_prio = readyqueue_prio_highest_get();
 80089d4:	f7ff fe74 	bl	80086c0 <readyqueue_prio_highest_get>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	4b03      	ldr	r3, [pc, #12]	; (80089ec <readyqueue_remove+0x5c>)
 80089de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }
}
 80089e2:	bf00      	nop
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	200037b0 	.word	0x200037b0

080089f0 <readyqueue_move_head_to_tail>:

__KNL__ void readyqueue_move_head_to_tail(k_prio_t prio)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	4603      	mov	r3, r0
 80089f8:	71fb      	strb	r3, [r7, #7]
    k_list_t *task_list;

    task_list = &k_rdyq.task_list_head[prio];
 80089fa:	79fb      	ldrb	r3, [r7, #7]
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	4a09      	ldr	r2, [pc, #36]	; (8008a24 <readyqueue_move_head_to_tail+0x34>)
 8008a00:	4413      	add	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]

    if (!tos_list_empty(task_list)) {
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f7ff fe48 	bl	800869a <tos_list_empty>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d105      	bne.n	8008a1c <readyqueue_move_head_to_tail+0x2c>
        tos_list_move_tail(task_list->next, task_list);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68f9      	ldr	r1, [r7, #12]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff fe2f 	bl	800867a <tos_list_move_tail>
    }
}
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	200037b0 	.word	0x200037b0

08008a28 <knl_object_verify>:
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	807b      	strh	r3, [r7, #2]
    return knl_obj->type == type;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	885b      	ldrh	r3, [r3, #2]
 8008a38:	887a      	ldrh	r2, [r7, #2]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	bf0c      	ite	eq
 8008a3e:	2301      	moveq	r3, #1
 8008a40:	2300      	movne	r3, #0
 8008a42:	b2db      	uxtb	r3, r3
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <knl_object_init>:
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	807b      	strh	r3, [r7, #2]
    knl_obj->type = type;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	887a      	ldrh	r2, [r7, #2]
 8008a60:	805a      	strh	r2, [r3, #2]
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <knl_object_deinit>:
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
    knl_obj->type = KNL_OBJ_TYPE_NONE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	805a      	strh	r2, [r3, #2]
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <tos_sem_create_max>:
#include "tos_k.h"

#if TOS_CFG_SEM_EN > 0u

__API__ k_err_t tos_sem_create_max(k_sem_t *sem, k_sem_cnt_t init_count, k_sem_cnt_t max_count)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	807b      	strh	r3, [r7, #2]
 8008a94:	4613      	mov	r3, r2
 8008a96:	803b      	strh	r3, [r7, #0]
    TOS_PTR_SANITY_CHECK(sem);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bf0c      	ite	eq
 8008a9e:	2301      	moveq	r3, #1
 8008aa0:	2300      	movne	r3, #0
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <tos_sem_create_max+0x26>
 8008aa8:	f240 434c 	movw	r3, #1100	; 0x44c
 8008aac:	e011      	b.n	8008ad2 <tos_sem_create_max+0x4a>

    sem->count      = init_count;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	887a      	ldrh	r2, [r7, #2]
 8008ab2:	819a      	strh	r2, [r3, #12]
    sem->count_max  = max_count;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	883a      	ldrh	r2, [r7, #0]
 8008ab8:	81da      	strh	r2, [r3, #14]
    pend_object_init(&sem->pend_obj);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3304      	adds	r3, #4
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff f9b7 	bl	8007e32 <pend_object_init>
    TOS_OBJ_INIT(sem, KNL_OBJ_TYPE_SEMAPHORE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f64a 31ee 	movw	r1, #44014	; 0xabee
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff ffc0 	bl	8008a50 <knl_object_init>

    return K_ERR_NONE;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <tos_sem_create>:

__API__ k_err_t tos_sem_create(k_sem_t *sem, k_sem_cnt_t init_count)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b082      	sub	sp, #8
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	807b      	strh	r3, [r7, #2]
    return tos_sem_create_max(sem, init_count, (k_sem_cnt_t)-1);
 8008ae6:	887b      	ldrh	r3, [r7, #2]
 8008ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff ffca 	bl	8008a88 <tos_sem_create_max>
 8008af4:	4603      	mov	r3, r0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <tos_sem_destroy>:

__API__ k_err_t tos_sem_destroy(k_sem_t *sem)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]

    TOS_PTR_SANITY_CHECK(sem);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	bf0c      	ite	eq
 8008b10:	2301      	moveq	r3, #1
 8008b12:	2300      	movne	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <tos_sem_destroy+0x22>
 8008b1a:	f240 434c 	movw	r3, #1100	; 0x44c
 8008b1e:	e023      	b.n	8008b68 <tos_sem_destroy+0x6a>
    TOS_OBJ_VERIFY(sem, KNL_OBJ_TYPE_SEMAPHORE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f64a 31ee 	movw	r1, #44014	; 0xabee
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff ff7e 	bl	8008a28 <knl_object_verify>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <tos_sem_destroy+0x3a>
 8008b32:	f240 434d 	movw	r3, #1101	; 0x44d
 8008b36:	e017      	b.n	8008b68 <tos_sem_destroy+0x6a>

    TOS_CPU_INT_DISABLE();
 8008b38:	f7fd f96e 	bl	8005e18 <tos_cpu_cpsr_save>
 8008b3c:	60f8      	str	r0, [r7, #12]

    pend_wakeup_all(&sem->pend_obj, PEND_STATE_DESTROY);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3304      	adds	r3, #4
 8008b42:	2103      	movs	r1, #3
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fa2f 	bl	8007fa8 <pend_wakeup_all>

    pend_object_deinit(&sem->pend_obj);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff f97b 	bl	8007e4a <pend_object_deinit>

    TOS_OBJ_DEINIT(sem);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff ff89 	bl	8008a6e <knl_object_deinit>

    TOS_CPU_INT_ENABLE();
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7fd f962 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 8008b62:	f000 fb15 	bl	8009190 <knl_sched>

    return K_ERR_NONE;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <sem_do_post>:

__STATIC__ k_err_t sem_do_post(k_sem_t *sem, opt_post_t opt)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
    TOS_CPU_CPSR_ALLOC();
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]

    TOS_PTR_SANITY_CHECK(sem);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	bf0c      	ite	eq
 8008b86:	2301      	moveq	r3, #1
 8008b88:	2300      	movne	r3, #0
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <sem_do_post+0x26>
 8008b90:	f240 434c 	movw	r3, #1100	; 0x44c
 8008b94:	e03a      	b.n	8008c0c <sem_do_post+0x9c>
    TOS_OBJ_VERIFY(sem, KNL_OBJ_TYPE_SEMAPHORE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f64a 31ee 	movw	r1, #44014	; 0xabee
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff ff43 	bl	8008a28 <knl_object_verify>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <sem_do_post+0x3e>
 8008ba8:	f240 434d 	movw	r3, #1101	; 0x44d
 8008bac:	e02e      	b.n	8008c0c <sem_do_post+0x9c>

    TOS_CPU_INT_DISABLE();
 8008bae:	f7fd f933 	bl	8005e18 <tos_cpu_cpsr_save>
 8008bb2:	60f8      	str	r0, [r7, #12]

    if (sem->count == sem->count_max) {
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	899a      	ldrh	r2, [r3, #12]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	89db      	ldrh	r3, [r3, #14]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d105      	bne.n	8008bcc <sem_do_post+0x5c>
        TOS_CPU_INT_ENABLE();
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7fd f930 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_SEM_OVERFLOW;
 8008bc6:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8008bca:	e01f      	b.n	8008c0c <sem_do_post+0x9c>
    }

    if (pend_is_nopending(&sem->pend_obj)) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff f946 	bl	8007e62 <pend_is_nopending>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <sem_do_post+0x82>
        ++sem->count;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	899b      	ldrh	r3, [r3, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	819a      	strh	r2, [r3, #12]
        TOS_CPU_INT_ENABLE();
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f7fd f91c 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_NONE;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e00c      	b.n	8008c0c <sem_do_post+0x9c>
    }

    pend_wakeup(&sem->pend_obj, PEND_STATE_POST, opt);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	78fa      	ldrb	r2, [r7, #3]
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff f9f8 	bl	8007ff0 <pend_wakeup>

    TOS_CPU_INT_ENABLE();
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7fd f910 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 8008c06:	f000 fac3 	bl	8009190 <knl_sched>

    return K_ERR_NONE;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <tos_sem_post>:

__API__ k_err_t tos_sem_post(k_sem_t *sem)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
    return sem_do_post(sem, OPT_POST_ONE);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff ffa6 	bl	8008b70 <sem_do_post>
 8008c24:	4603      	mov	r3, r0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
	...

08008c30 <tos_sem_pend>:
{
    return sem_do_post(sem, OPT_POST_ALL);
}

__API__ k_err_t tos_sem_pend(k_sem_t *sem, k_tick_t timeout)
{
 8008c30:	b590      	push	{r4, r7, lr}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	e9c7 2300 	strd	r2, r3, [r7]
    TOS_CPU_CPSR_ALLOC();
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	617b      	str	r3, [r7, #20]

    TOS_IN_IRQ_CHECK();
 8008c40:	f000 faf4 	bl	800922c <knl_is_inirq>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bf14      	ite	ne
 8008c4a:	2301      	movne	r3, #1
 8008c4c:	2300      	moveq	r3, #0
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <tos_sem_pend+0x2a>
 8008c54:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008c58:	e052      	b.n	8008d00 <tos_sem_pend+0xd0>
    TOS_PTR_SANITY_CHECK(sem);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	bf0c      	ite	eq
 8008c60:	2301      	moveq	r3, #1
 8008c62:	2300      	movne	r3, #0
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <tos_sem_pend+0x40>
 8008c6a:	f240 434c 	movw	r3, #1100	; 0x44c
 8008c6e:	e047      	b.n	8008d00 <tos_sem_pend+0xd0>
    TOS_OBJ_VERIFY(sem, KNL_OBJ_TYPE_SEMAPHORE);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f64a 31ee 	movw	r1, #44014	; 0xabee
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff fed6 	bl	8008a28 <knl_object_verify>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <tos_sem_pend+0x58>
 8008c82:	f240 434d 	movw	r3, #1101	; 0x44d
 8008c86:	e03b      	b.n	8008d00 <tos_sem_pend+0xd0>

    TOS_CPU_INT_DISABLE();
 8008c88:	f7fd f8c6 	bl	8005e18 <tos_cpu_cpsr_save>
 8008c8c:	6178      	str	r0, [r7, #20]

    if (sem->count > (k_sem_cnt_t)0u) {
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	899b      	ldrh	r3, [r3, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <tos_sem_pend+0x7c>
        --sem->count;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	899b      	ldrh	r3, [r3, #12]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	819a      	strh	r2, [r3, #12]
        TOS_CPU_INT_ENABLE();
 8008ca2:	6978      	ldr	r0, [r7, #20]
 8008ca4:	f7fd f8bf 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_NONE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	e029      	b.n	8008d00 <tos_sem_pend+0xd0>
    }

    if (timeout == TOS_TIME_NOWAIT) { // no wait, return immediately
 8008cac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008cb0:	4323      	orrs	r3, r4
 8008cb2:	d105      	bne.n	8008cc0 <tos_sem_pend+0x90>
        TOS_CPU_INT_ENABLE();
 8008cb4:	6978      	ldr	r0, [r7, #20]
 8008cb6:	f7fd f8b6 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_PEND_NOWAIT;
 8008cba:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008cbe:	e01f      	b.n	8008d00 <tos_sem_pend+0xd0>
    }

    if (knl_is_sched_locked()) {
 8008cc0:	f000 faa4 	bl	800920c <knl_is_sched_locked>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <tos_sem_pend+0xa6>
        TOS_CPU_INT_ENABLE();
 8008cca:	6978      	ldr	r0, [r7, #20]
 8008ccc:	f7fd f8ab 	bl	8005e26 <tos_cpu_cpsr_restore>
        return K_ERR_PEND_SCHED_LOCKED;
 8008cd0:	f240 43b1 	movw	r3, #1201	; 0x4b1
 8008cd4:	e014      	b.n	8008d00 <tos_sem_pend+0xd0>
    }

    pend_task_block(k_curr_task, &sem->pend_obj, timeout);
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <tos_sem_pend+0xd8>)
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	1d19      	adds	r1, r3, #4
 8008cde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ce2:	f7ff f92c 	bl	8007f3e <pend_task_block>

    TOS_CPU_INT_ENABLE();
 8008ce6:	6978      	ldr	r0, [r7, #20]
 8008ce8:	f7fd f89d 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 8008cec:	f000 fa50 	bl	8009190 <knl_sched>

    return pend_state2errno(k_curr_task->pend_state);
 8008cf0:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <tos_sem_pend+0xd8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7ff f8d2 	bl	8007ea2 <pend_state2errno>
 8008cfe:	4603      	mov	r3, r0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd90      	pop	{r4, r7, pc}
 8008d08:	20000688 	.word	0x20000688

08008d0c <knl_object_verify>:
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	807b      	strh	r3, [r7, #2]
    return knl_obj->type == type;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	885b      	ldrh	r3, [r3, #2]
 8008d1c:	887a      	ldrh	r2, [r7, #2]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	bf0c      	ite	eq
 8008d22:	2301      	moveq	r3, #1
 8008d24:	2300      	movne	r3, #0
 8008d26:	b2db      	uxtb	r3, r3
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <knl_object_init>:
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	807b      	strh	r3, [r7, #2]
    knl_obj->type = type;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	887a      	ldrh	r2, [r7, #2]
 8008d44:	805a      	strh	r2, [r3, #2]
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <tos_stopwatch_create>:
 *---------------------------------------------------------------------------*/

#include "tos_k.h"

__API__ k_err_t tos_stopwatch_create(k_stopwatch_t *stopwatch)
{
 8008d52:	b590      	push	{r4, r7, lr}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
    TOS_PTR_SANITY_CHECK(stopwatch);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bf0c      	ite	eq
 8008d60:	2301      	moveq	r3, #1
 8008d62:	2300      	movne	r3, #0
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <tos_stopwatch_create+0x1e>
 8008d6a:	f240 434c 	movw	r3, #1100	; 0x44c
 8008d6e:	e00d      	b.n	8008d8c <tos_stopwatch_create+0x3a>

    stopwatch->until = 0u;
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	f04f 0300 	mov.w	r3, #0
 8008d76:	f04f 0400 	mov.w	r4, #0
 8008d7a:	e9c2 3402 	strd	r3, r4, [r2, #8]
    TOS_OBJ_INIT(stopwatch, KNL_OBJ_TYPE_STOPWATCH);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f64d 21d7 	movw	r1, #56023	; 0xdad7
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff ffd5 	bl	8008d34 <knl_object_init>

    return K_ERR_NONE;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd90      	pop	{r4, r7, pc}

08008d94 <tos_stopwatch_countdown>:

    return K_ERR_NONE;
}

__API__ k_err_t tos_stopwatch_countdown(k_stopwatch_t *stopwatch, k_tick_t tick)
{
 8008d94:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008d98:	b086      	sub	sp, #24
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	e9c7 2300 	strd	r2, r3, [r7]
    k_tick_t now;

    TOS_PTR_SANITY_CHECK(stopwatch);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bf0c      	ite	eq
 8008da8:	2301      	moveq	r3, #1
 8008daa:	2300      	movne	r3, #0
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <tos_stopwatch_countdown+0x24>
 8008db2:	f240 434c 	movw	r3, #1100	; 0x44c
 8008db6:	e01b      	b.n	8008df0 <tos_stopwatch_countdown+0x5c>
    TOS_OBJ_VERIFY(stopwatch, KNL_OBJ_TYPE_STOPWATCH);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f64d 21d7 	movw	r1, #56023	; 0xdad7
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff ffa4 	bl	8008d0c <knl_object_verify>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d102      	bne.n	8008dd0 <tos_stopwatch_countdown+0x3c>
 8008dca:	f240 434d 	movw	r3, #1101	; 0x44d
 8008dce:	e00f      	b.n	8008df0 <tos_stopwatch_countdown+0x5c>

    now = tos_systick_get();
 8008dd0:	f001 f88c 	bl	8009eec <tos_systick_get>
 8008dd4:	e9c7 0104 	strd	r0, r1, [r7, #16]
    stopwatch->until = now + tick;
 8008dd8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008ddc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008de0:	eb13 0b01 	adds.w	fp, r3, r1
 8008de4:	eb44 0c02 	adc.w	ip, r4, r2
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	e9c2 bc02 	strd	fp, ip, [r2, #8]

    return K_ERR_NONE;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008dfa <tos_stopwatch_delay>:
    tick = tos_millisec2tick(millisec);
    return tos_stopwatch_countdown(stopwatch, tick);
}

__API__ void tos_stopwatch_delay(k_tick_t tick)
{
 8008dfa:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	e9c7 0100 	strd	r0, r1, [r7]
    k_tick_t now;

    now = tos_systick_get();
 8008e06:	f001 f871 	bl	8009eec <tos_systick_get>
 8008e0a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    while ((tos_systick_get() - now) < tick) {
 8008e0e:	bf00      	nop
 8008e10:	f001 f86c 	bl	8009eec <tos_systick_get>
 8008e14:	4683      	mov	fp, r0
 8008e16:	468c      	mov	ip, r1
 8008e18:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008e1c:	4659      	mov	r1, fp
 8008e1e:	4662      	mov	r2, ip
 8008e20:	1ac9      	subs	r1, r1, r3
 8008e22:	eb62 0204 	sbc.w	r2, r2, r4
 8008e26:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008e2a:	42a2      	cmp	r2, r4
 8008e2c:	bf08      	it	eq
 8008e2e:	4299      	cmpeq	r1, r3
 8008e30:	d3ee      	bcc.n	8008e10 <tos_stopwatch_delay+0x16>
        ;
    }
}
 8008e32:	bf00      	nop
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008e3c <tos_stopwatch_remain>:
    tick = tos_millisec2tick(millisec);
    tos_stopwatch_delay(tick);
}

__API__ k_tick_t tos_stopwatch_remain(k_stopwatch_t *stopwatch)
{
 8008e3c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
    k_tick_t now;

    TOS_PTR_SANITY_CHECK_RC(stopwatch, (k_tick_t)-1);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	bf0c      	ite	eq
 8008e4c:	2301      	moveq	r3, #1
 8008e4e:	2300      	movne	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d004      	beq.n	8008e60 <tos_stopwatch_remain+0x24>
 8008e56:	f04f 3bff 	mov.w	fp, #4294967295
 8008e5a:	f04f 3cff 	mov.w	ip, #4294967295
 8008e5e:	e026      	b.n	8008eae <tos_stopwatch_remain+0x72>
    TOS_OBJ_VERIFY_RC(stopwatch, KNL_OBJ_TYPE_STOPWATCH, (k_tick_t)-1);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f64d 21d7 	movw	r1, #56023	; 0xdad7
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff ff50 	bl	8008d0c <knl_object_verify>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d104      	bne.n	8008e7c <tos_stopwatch_remain+0x40>
 8008e72:	f04f 3bff 	mov.w	fp, #4294967295
 8008e76:	f04f 3cff 	mov.w	ip, #4294967295
 8008e7a:	e018      	b.n	8008eae <tos_stopwatch_remain+0x72>

    if (tos_stopwatch_is_expired(stopwatch)) {
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f81e 	bl	8008ebe <tos_stopwatch_is_expired>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d004      	beq.n	8008e92 <tos_stopwatch_remain+0x56>
        return (k_tick_t)0u;
 8008e88:	f04f 0b00 	mov.w	fp, #0
 8008e8c:	f04f 0c00 	mov.w	ip, #0
 8008e90:	e00d      	b.n	8008eae <tos_stopwatch_remain+0x72>
    }

    now = tos_systick_get();
 8008e92:	f001 f82b 	bl	8009eec <tos_systick_get>
 8008e96:	e9c7 0102 	strd	r0, r1, [r7, #8]
    return stopwatch->until - now;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8008ea0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008ea4:	1ac9      	subs	r1, r1, r3
 8008ea6:	eb62 0204 	sbc.w	r2, r2, r4
 8008eaa:	468b      	mov	fp, r1
 8008eac:	4694      	mov	ip, r2
 8008eae:	465b      	mov	r3, fp
 8008eb0:	4664      	mov	r4, ip
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008ebe <tos_stopwatch_is_expired>:
    now = tos_systick_get();
    return (k_time_t)(((stopwatch->until) - now + TOS_CFG_CPU_TICK_PER_SECOND - 1) / TOS_CFG_CPU_TICK_PER_SECOND);
}

__API__ int tos_stopwatch_is_expired(k_stopwatch_t *stopwatch)
{
 8008ebe:	b590      	push	{r4, r7, lr}
 8008ec0:	b085      	sub	sp, #20
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
    k_tick_t now;

    TOS_PTR_SANITY_CHECK_RC(stopwatch, K_FALSE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	bf0c      	ite	eq
 8008ecc:	2301      	moveq	r3, #1
 8008ece:	2300      	movne	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <tos_stopwatch_is_expired+0x1c>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e01a      	b.n	8008f10 <tos_stopwatch_is_expired+0x52>
    TOS_OBJ_VERIFY_RC(stopwatch, KNL_OBJ_TYPE_STOPWATCH, K_FALSE);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f64d 21d7 	movw	r1, #56023	; 0xdad7
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7ff ff13 	bl	8008d0c <knl_object_verify>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <tos_stopwatch_is_expired+0x32>
 8008eec:	2300      	movs	r3, #0
 8008eee:	e00f      	b.n	8008f10 <tos_stopwatch_is_expired+0x52>

    now = tos_systick_get();
 8008ef0:	f000 fffc 	bl	8009eec <tos_systick_get>
 8008ef4:	e9c7 0102 	strd	r0, r1, [r7, #8]
    return now >= stopwatch->until ? K_TRUE : K_FALSE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8008efe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008f02:	42a2      	cmp	r2, r4
 8008f04:	bf08      	it	eq
 8008f06:	4299      	cmpeq	r1, r3
 8008f08:	bf2c      	ite	cs
 8008f0a:	2301      	movcs	r3, #1
 8008f0c:	2300      	movcc	r3, #0
 8008f0e:	b2db      	uxtb	r3, r3
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd90      	pop	{r4, r7, pc}

08008f18 <tos_knl_init>:
 *---------------------------------------------------------------------------*/

#include "tos_k.h"

__API__ k_err_t tos_knl_init(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
    k_err_t err;

    cpu_init();
 8008f1e:	f7fc ff8d 	bl	8005e3c <cpu_init>

    readyqueue_init();
 8008f22:	f7ff fca7 	bl	8008874 <readyqueue_init>

#if TOS_CFG_MMHEAP_EN > 0
#if TOS_CFG_MMHEAP_DEFAULT_POOL_EN > 0u
    err = mmheap_init_with_pool(k_mmheap_default_pool, TOS_CFG_MMHEAP_DEFAULT_POOL_SIZE);
 8008f26:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8008f2a:	4811      	ldr	r0, [pc, #68]	; (8008f70 <tos_knl_init+0x58>)
 8008f2c:	f7fe fafa 	bl	8007524 <mmheap_init_with_pool>
 8008f30:	4603      	mov	r3, r0
 8008f32:	80fb      	strh	r3, [r7, #6]
#else
    err = mmheap_init();
#endif
    if (err != K_ERR_NONE) {
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <tos_knl_init+0x26>
        return err;
 8008f3a:	88fb      	ldrh	r3, [r7, #6]
 8008f3c:	e014      	b.n	8008f68 <tos_knl_init+0x50>
    }
#endif

    err = knl_idle_init();
 8008f3e:	f000 f9b5 	bl	80092ac <knl_idle_init>
 8008f42:	4603      	mov	r3, r0
 8008f44:	80fb      	strh	r3, [r7, #6]
    if (err != K_ERR_NONE) {
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <tos_knl_init+0x38>
        return err;
 8008f4c:	88fb      	ldrh	r3, [r7, #6]
 8008f4e:	e00b      	b.n	8008f68 <tos_knl_init+0x50>
    }

#if TOS_CFG_TIMER_EN > 0
    err = timer_init();
 8008f50:	f001 f97c 	bl	800a24c <timer_init>
 8008f54:	4603      	mov	r3, r0
 8008f56:	80fb      	strh	r3, [r7, #6]
    if (err != K_ERR_NONE) {
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <tos_knl_init+0x4a>
        return err;
 8008f5e:	88fb      	ldrh	r3, [r7, #6]
 8008f60:	e002      	b.n	8008f68 <tos_knl_init+0x50>
    }
#endif

#if TOS_CFG_PWR_MGR_EN > 0U
    pm_init();
 8008f62:	f001 fa1d 	bl	800a3a0 <pm_init>

#if TOS_CFG_TICKLESS_EN > 0u
    tickless_init();
#endif

    return K_ERR_NONE;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20004718 	.word	0x20004718

08008f74 <tos_knl_irq_enter>:

__API__ void tos_knl_irq_enter(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
    if (!tos_knl_is_running()) {
 8008f78:	f000 f8fa 	bl	8009170 <tos_knl_is_running>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00f      	beq.n	8008fa2 <tos_knl_irq_enter+0x2e>
        return;
    }

    if (unlikely(k_irq_nest_cnt >= K_NESTING_LIMIT_IRQ)) {
 8008f82:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <tos_knl_irq_enter+0x38>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	2bf9      	cmp	r3, #249	; 0xf9
 8008f88:	bf8c      	ite	hi
 8008f8a:	2301      	movhi	r3, #1
 8008f8c:	2300      	movls	r3, #0
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d108      	bne.n	8008fa6 <tos_knl_irq_enter+0x32>
        return;
    }

    ++k_irq_nest_cnt;
 8008f94:	4b05      	ldr	r3, [pc, #20]	; (8008fac <tos_knl_irq_enter+0x38>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	4b03      	ldr	r3, [pc, #12]	; (8008fac <tos_knl_irq_enter+0x38>)
 8008f9e:	701a      	strb	r2, [r3, #0]
 8008fa0:	e002      	b.n	8008fa8 <tos_knl_irq_enter+0x34>
        return;
 8008fa2:	bf00      	nop
 8008fa4:	e000      	b.n	8008fa8 <tos_knl_irq_enter+0x34>
        return;
 8008fa6:	bf00      	nop
}
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20000678 	.word	0x20000678

08008fb0 <tos_knl_irq_leave>:

__API__ void tos_knl_irq_leave(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
    TOS_CPU_CPSR_ALLOC();
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	607b      	str	r3, [r7, #4]

    if (!tos_knl_is_running()) {
 8008fba:	f000 f8d9 	bl	8009170 <tos_knl_is_running>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d03a      	beq.n	800903a <tos_knl_irq_leave+0x8a>
        return;
    }

    TOS_CPU_INT_DISABLE();
 8008fc4:	f7fc ff28 	bl	8005e18 <tos_cpu_cpsr_save>
 8008fc8:	6078      	str	r0, [r7, #4]
    if (!knl_is_inirq()) {
 8008fca:	f000 f92f 	bl	800922c <knl_is_inirq>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <tos_knl_irq_leave+0x2c>
        TOS_CPU_INT_ENABLE();
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7fc ff26 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 8008fda:	e02f      	b.n	800903c <tos_knl_irq_leave+0x8c>
    }

    --k_irq_nest_cnt;
 8008fdc:	4b19      	ldr	r3, [pc, #100]	; (8009044 <tos_knl_irq_leave+0x94>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	4b17      	ldr	r3, [pc, #92]	; (8009044 <tos_knl_irq_leave+0x94>)
 8008fe6:	701a      	strb	r2, [r3, #0]

    if (knl_is_inirq()) {
 8008fe8:	f000 f920 	bl	800922c <knl_is_inirq>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <tos_knl_irq_leave+0x4a>
        TOS_CPU_INT_ENABLE();
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7fc ff17 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 8008ff8:	e020      	b.n	800903c <tos_knl_irq_leave+0x8c>
    }

    if (knl_is_sched_locked()) {
 8008ffa:	f000 f907 	bl	800920c <knl_is_sched_locked>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <tos_knl_irq_leave+0x5c>
        TOS_CPU_INT_ENABLE();
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fc ff0e 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 800900a:	e017      	b.n	800903c <tos_knl_irq_leave+0x8c>
    }

    k_next_task = readyqueue_highest_ready_task_get();
 800900c:	f7ff fc1c 	bl	8008848 <readyqueue_highest_ready_task_get>
 8009010:	4602      	mov	r2, r0
 8009012:	4b0d      	ldr	r3, [pc, #52]	; (8009048 <tos_knl_irq_leave+0x98>)
 8009014:	601a      	str	r2, [r3, #0]
    if (knl_is_self(k_next_task)) {
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <tos_knl_irq_leave+0x98>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f92a 	bl	8009274 <knl_is_self>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <tos_knl_irq_leave+0x7e>
        TOS_CPU_INT_ENABLE();
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7fc fefd 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 800902c:	e006      	b.n	800903c <tos_knl_irq_leave+0x8c>
    }

    cpu_irq_context_switch();
 800902e:	f7fc ff2f 	bl	8005e90 <cpu_irq_context_switch>
    TOS_CPU_INT_ENABLE();
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fc fef7 	bl	8005e26 <tos_cpu_cpsr_restore>
 8009038:	e000      	b.n	800903c <tos_knl_irq_leave+0x8c>
        return;
 800903a:	bf00      	nop
}
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000678 	.word	0x20000678
 8009048:	2000068c 	.word	0x2000068c

0800904c <tos_knl_sched_lock>:

__API__ k_err_t tos_knl_sched_lock(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
    TOS_CPU_CPSR_ALLOC();
 8009052:	2300      	movs	r3, #0
 8009054:	607b      	str	r3, [r7, #4]

    TOS_IN_IRQ_CHECK();
 8009056:	f000 f8e9 	bl	800922c <knl_is_inirq>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	bf14      	ite	ne
 8009060:	2301      	movne	r3, #1
 8009062:	2300      	moveq	r3, #0
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <tos_knl_sched_lock+0x24>
 800906a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800906e:	e01b      	b.n	80090a8 <tos_knl_sched_lock+0x5c>

    if (!tos_knl_is_running()) {
 8009070:	f000 f87e 	bl	8009170 <tos_knl_is_running>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d102      	bne.n	8009080 <tos_knl_sched_lock+0x34>
        return K_ERR_KNL_NOT_RUNNING;
 800907a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800907e:	e013      	b.n	80090a8 <tos_knl_sched_lock+0x5c>
    }

    if (k_sched_lock_nest_cnt >= K_NESTING_LIMIT_SCHED_LOCK) {
 8009080:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <tos_knl_sched_lock+0x64>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2bf9      	cmp	r3, #249	; 0xf9
 8009086:	d902      	bls.n	800908e <tos_knl_sched_lock+0x42>
        return K_ERR_LOCK_NESTING_OVERFLOW;
 8009088:	f44f 7316 	mov.w	r3, #600	; 0x258
 800908c:	e00c      	b.n	80090a8 <tos_knl_sched_lock+0x5c>
    }

    TOS_CPU_INT_DISABLE();
 800908e:	f7fc fec3 	bl	8005e18 <tos_cpu_cpsr_save>
 8009092:	6078      	str	r0, [r7, #4]
    ++k_sched_lock_nest_cnt;
 8009094:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <tos_knl_sched_lock+0x64>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	3301      	adds	r3, #1
 800909a:	b2da      	uxtb	r2, r3
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <tos_knl_sched_lock+0x64>)
 800909e:	701a      	strb	r2, [r3, #0]
    TOS_CPU_INT_ENABLE();
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fc fec0 	bl	8005e26 <tos_cpu_cpsr_restore>
    return K_ERR_NONE;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20000679 	.word	0x20000679

080090b4 <tos_knl_sched_unlock>:

__API__ k_err_t tos_knl_sched_unlock(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
    TOS_CPU_CPSR_ALLOC();
 80090ba:	2300      	movs	r3, #0
 80090bc:	607b      	str	r3, [r7, #4]

    TOS_IN_IRQ_CHECK();
 80090be:	f000 f8b5 	bl	800922c <knl_is_inirq>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	bf14      	ite	ne
 80090c8:	2301      	movne	r3, #1
 80090ca:	2300      	moveq	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <tos_knl_sched_unlock+0x24>
 80090d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80090d6:	e01e      	b.n	8009116 <tos_knl_sched_unlock+0x62>

    if (!tos_knl_is_running()) {
 80090d8:	f000 f84a 	bl	8009170 <tos_knl_is_running>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d102      	bne.n	80090e8 <tos_knl_sched_unlock+0x34>
        return K_ERR_KNL_NOT_RUNNING;
 80090e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80090e6:	e016      	b.n	8009116 <tos_knl_sched_unlock+0x62>
    }

    if (!knl_is_sched_locked()) {
 80090e8:	f000 f890 	bl	800920c <knl_is_sched_locked>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d102      	bne.n	80090f8 <tos_knl_sched_unlock+0x44>
        return K_ERR_SCHED_NOT_LOCKED;
 80090f2:	f240 63a5 	movw	r3, #1701	; 0x6a5
 80090f6:	e00e      	b.n	8009116 <tos_knl_sched_unlock+0x62>
    }

    TOS_CPU_INT_DISABLE();
 80090f8:	f7fc fe8e 	bl	8005e18 <tos_cpu_cpsr_save>
 80090fc:	6078      	str	r0, [r7, #4]
    --k_sched_lock_nest_cnt;
 80090fe:	4b08      	ldr	r3, [pc, #32]	; (8009120 <tos_knl_sched_unlock+0x6c>)
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	3b01      	subs	r3, #1
 8009104:	b2da      	uxtb	r2, r3
 8009106:	4b06      	ldr	r3, [pc, #24]	; (8009120 <tos_knl_sched_unlock+0x6c>)
 8009108:	701a      	strb	r2, [r3, #0]
    TOS_CPU_INT_ENABLE();
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7fc fe8b 	bl	8005e26 <tos_cpu_cpsr_restore>

    knl_sched();
 8009110:	f000 f83e 	bl	8009190 <knl_sched>
    return K_ERR_NONE;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000679 	.word	0x20000679

08009124 <tos_knl_start>:

__API__ k_err_t tos_knl_start(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
    if (unlikely(tos_knl_is_running())) {
 8009128:	f000 f822 	bl	8009170 <tos_knl_is_running>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	bf14      	ite	ne
 8009132:	2301      	movne	r3, #1
 8009134:	2300      	moveq	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <tos_knl_start+0x1e>
        return K_ERR_KNL_RUNNING;
 800913c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8009140:	e00e      	b.n	8009160 <tos_knl_start+0x3c>
    }

    k_next_task = readyqueue_highest_ready_task_get();
 8009142:	f7ff fb81 	bl	8008848 <readyqueue_highest_ready_task_get>
 8009146:	4602      	mov	r2, r0
 8009148:	4b06      	ldr	r3, [pc, #24]	; (8009164 <tos_knl_start+0x40>)
 800914a:	601a      	str	r2, [r3, #0]
    k_curr_task = k_next_task;
 800914c:	4b05      	ldr	r3, [pc, #20]	; (8009164 <tos_knl_start+0x40>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a05      	ldr	r2, [pc, #20]	; (8009168 <tos_knl_start+0x44>)
 8009152:	6013      	str	r3, [r2, #0]
    k_knl_state = KNL_STATE_RUNNING;
 8009154:	4b05      	ldr	r3, [pc, #20]	; (800916c <tos_knl_start+0x48>)
 8009156:	2201      	movs	r2, #1
 8009158:	701a      	strb	r2, [r3, #0]

    cpu_sched_start();
 800915a:	f7fc fe8f 	bl	8005e7c <cpu_sched_start>

    return K_ERR_NONE;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	bd80      	pop	{r7, pc}
 8009164:	2000068c 	.word	0x2000068c
 8009168:	20000688 	.word	0x20000688
 800916c:	2000067a 	.word	0x2000067a

08009170 <tos_knl_is_running>:

__API__ int tos_knl_is_running(void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
    return k_knl_state == KNL_STATE_RUNNING;
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <tos_knl_is_running+0x1c>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b01      	cmp	r3, #1
 800917a:	bf0c      	ite	eq
 800917c:	2301      	moveq	r3, #1
 800917e:	2300      	movne	r3, #0
 8009180:	b2db      	uxtb	r3, r3
}
 8009182:	4618      	mov	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	2000067a 	.word	0x2000067a

08009190 <knl_sched>:
}

#endif

__KNL__ void knl_sched(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
    TOS_CPU_CPSR_ALLOC();
 8009196:	2300      	movs	r3, #0
 8009198:	607b      	str	r3, [r7, #4]

    if (unlikely(!tos_knl_is_running())) {
 800919a:	f7ff ffe9 	bl	8009170 <tos_knl_is_running>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	bf0c      	ite	eq
 80091a4:	2301      	moveq	r3, #1
 80091a6:	2300      	movne	r3, #0
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d123      	bne.n	80091f6 <knl_sched+0x66>
        return;
    }

    if (knl_is_inirq()) {
 80091ae:	f000 f83d 	bl	800922c <knl_is_inirq>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d120      	bne.n	80091fa <knl_sched+0x6a>
        return;
    }

    if (knl_is_sched_locked()) {
 80091b8:	f000 f828 	bl	800920c <knl_is_sched_locked>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d11d      	bne.n	80091fe <knl_sched+0x6e>
        return;
    }

    TOS_CPU_INT_DISABLE();
 80091c2:	f7fc fe29 	bl	8005e18 <tos_cpu_cpsr_save>
 80091c6:	6078      	str	r0, [r7, #4]
    k_next_task = readyqueue_highest_ready_task_get();
 80091c8:	f7ff fb3e 	bl	8008848 <readyqueue_highest_ready_task_get>
 80091cc:	4602      	mov	r2, r0
 80091ce:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <knl_sched+0x78>)
 80091d0:	601a      	str	r2, [r3, #0]
    if (knl_is_self(k_next_task)) {
 80091d2:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <knl_sched+0x78>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 f84c 	bl	8009274 <knl_is_self>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <knl_sched+0x5a>
        TOS_CPU_INT_ENABLE();
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7fc fe1f 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 80091e8:	e00a      	b.n	8009200 <knl_sched+0x70>
    }

    cpu_context_switch();
 80091ea:	f7fc fe4b 	bl	8005e84 <cpu_context_switch>
    TOS_CPU_INT_ENABLE();
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7fc fe19 	bl	8005e26 <tos_cpu_cpsr_restore>
 80091f4:	e004      	b.n	8009200 <knl_sched+0x70>
        return;
 80091f6:	bf00      	nop
 80091f8:	e002      	b.n	8009200 <knl_sched+0x70>
        return;
 80091fa:	bf00      	nop
 80091fc:	e000      	b.n	8009200 <knl_sched+0x70>
        return;
 80091fe:	bf00      	nop
}
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	2000068c 	.word	0x2000068c

0800920c <knl_is_sched_locked>:

__KNL__ int knl_is_sched_locked(void)
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
    return k_sched_lock_nest_cnt > 0u;
 8009210:	4b05      	ldr	r3, [pc, #20]	; (8009228 <knl_is_sched_locked+0x1c>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	bf14      	ite	ne
 8009218:	2301      	movne	r3, #1
 800921a:	2300      	moveq	r3, #0
 800921c:	b2db      	uxtb	r3, r3
}
 800921e:	4618      	mov	r0, r3
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	20000679 	.word	0x20000679

0800922c <knl_is_inirq>:

__KNL__ int knl_is_inirq(void)
{
 800922c:	b480      	push	{r7}
 800922e:	af00      	add	r7, sp, #0
    return k_irq_nest_cnt > 0u;
 8009230:	4b05      	ldr	r3, [pc, #20]	; (8009248 <knl_is_inirq+0x1c>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	bf14      	ite	ne
 8009238:	2301      	movne	r3, #1
 800923a:	2300      	moveq	r3, #0
 800923c:	b2db      	uxtb	r3, r3
}
 800923e:	4618      	mov	r0, r3
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	20000678 	.word	0x20000678

0800924c <knl_is_idle>:

__KNL__ int knl_is_idle(k_task_t *task)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
    return task == &k_idle_task;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a06      	ldr	r2, [pc, #24]	; (8009270 <knl_is_idle+0x24>)
 8009258:	4293      	cmp	r3, r2
 800925a:	bf0c      	ite	eq
 800925c:	2301      	moveq	r3, #1
 800925e:	2300      	movne	r3, #0
 8009260:	b2db      	uxtb	r3, r3
}
 8009262:	4618      	mov	r0, r3
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	20004690 	.word	0x20004690

08009274 <knl_is_self>:

__KNL__ int knl_is_self(k_task_t *task)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
    return task == k_curr_task;
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <knl_is_self+0x24>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	429a      	cmp	r2, r3
 8009284:	bf0c      	ite	eq
 8009286:	2301      	moveq	r3, #1
 8009288:	2300      	movne	r3, #0
 800928a:	b2db      	uxtb	r3, r3
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	20000688 	.word	0x20000688

0800929c <knl_idle_entry>:

__STATIC__ void knl_idle_entry(void *arg)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
#if TOS_CFG_TASK_DYNAMIC_CREATE_EN > 0u
        task_free_all();
#endif

#if TOS_CFG_PWR_MGR_EN > 0u
        pm_power_manager();
 80092a4:	f001 f8a0 	bl	800a3e8 <pm_power_manager>
 80092a8:	e7fc      	b.n	80092a4 <knl_idle_entry+0x8>
	...

080092ac <knl_idle_init>:
#endif
    }
}

__KNL__ k_err_t knl_idle_init(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af04      	add	r7, sp, #16
    return tos_task_create(&k_idle_task, "idle",
 80092b2:	4b0a      	ldr	r3, [pc, #40]	; (80092dc <knl_idle_init+0x30>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a0a      	ldr	r2, [pc, #40]	; (80092e0 <knl_idle_init+0x34>)
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	2100      	movs	r1, #0
 80092bc:	9103      	str	r1, [sp, #12]
 80092be:	9202      	str	r2, [sp, #8]
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	2309      	movs	r3, #9
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	2300      	movs	r3, #0
 80092c8:	4a06      	ldr	r2, [pc, #24]	; (80092e4 <knl_idle_init+0x38>)
 80092ca:	4907      	ldr	r1, [pc, #28]	; (80092e8 <knl_idle_init+0x3c>)
 80092cc:	4807      	ldr	r0, [pc, #28]	; (80092ec <knl_idle_init+0x40>)
 80092ce:	f000 f97b 	bl	80095c8 <tos_task_create>
 80092d2:	4603      	mov	r3, r0
            knl_idle_entry, K_NULL,
            K_TASK_PRIO_IDLE,
            k_idle_task_stk_addr,
            k_idle_task_stk_size,
            0);
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	0800ce9c 	.word	0x0800ce9c
 80092e0:	0800cea0 	.word	0x0800cea0
 80092e4:	0800929d 	.word	0x0800929d
 80092e8:	0800cd3c 	.word	0x0800cd3c
 80092ec:	20004690 	.word	0x20004690

080092f0 <_list_add>:
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
    next->prev = node;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	605a      	str	r2, [r3, #4]
    node->next = next;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	601a      	str	r2, [r3, #0]
    node->prev = prev;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	605a      	str	r2, [r3, #4]
    prev->next = node;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	601a      	str	r2, [r3, #0]
}
 8009314:	bf00      	nop
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <_list_del>:
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
    next->prev = prev;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	605a      	str	r2, [r3, #4]
    prev->next = next;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	601a      	str	r2, [r3, #0]
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <tos_list_init>:
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
    list->next = list;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	601a      	str	r2, [r3, #0]
    list->prev = list;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	605a      	str	r2, [r3, #4]
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <tos_list_add>:
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
    _list_add(node, list, list->next);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	461a      	mov	r2, r3
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7ff ffbb 	bl	80092f0 <_list_add>
}
 800937a:	bf00      	nop
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <tos_list_del>:
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
    _list_del(node->prev, node->next);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f7ff ffc3 	bl	8009320 <_list_del>
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <tos_list_empty>:
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
    return list->next == list;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	bf0c      	ite	eq
 80093b4:	2301      	moveq	r3, #1
 80093b6:	2300      	movne	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <knl_object_verify>:
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	807b      	strh	r3, [r7, #2]
    return knl_obj->type == type;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	885b      	ldrh	r3, [r3, #2]
 80093d6:	887a      	ldrh	r2, [r7, #2]
 80093d8:	429a      	cmp	r2, r3
 80093da:	bf0c      	ite	eq
 80093dc:	2301      	moveq	r3, #1
 80093de:	2300      	movne	r3, #0
 80093e0:	b2db      	uxtb	r3, r3
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <knl_object_init>:
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	460b      	mov	r3, r1
 80093f8:	807b      	strh	r3, [r7, #2]
    knl_obj->type = type;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	887a      	ldrh	r2, [r7, #2]
 80093fe:	805a      	strh	r2, [r3, #2]
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <knl_object_deinit>:
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
    knl_obj->type = KNL_OBJ_TYPE_NONE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	805a      	strh	r2, [r3, #2]
}
 800941a:	bf00      	nop
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <task_state_is_ready>:
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
    return task->state == K_TASK_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009434:	2b00      	cmp	r3, #0
 8009436:	bf0c      	ite	eq
 8009438:	2301      	moveq	r3, #1
 800943a:	2300      	movne	r3, #0
 800943c:	b2db      	uxtb	r3, r3
}
 800943e:	4618      	mov	r0, r3
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <task_state_is_sleeping>:
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
    return task->state & K_TASK_STATE_SLEEP;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009458:	f003 0301 	and.w	r3, r3, #1
}
 800945c:	4618      	mov	r0, r3
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <task_state_is_pending>:
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
    return task->state & K_TASK_STATE_PEND;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009476:	f003 0302 	and.w	r3, r3, #2
}
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <task_state_set_ready>:

__KNL__ __STATIC_INLINE__ void task_state_set_ready(k_task_t *task)
{
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
    task->state = K_TASK_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2020 	strb.w	r2, [r3, #32]
}
 8009496:	bf00      	nop
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <task_state_set_deleted>:

__KNL__ __STATIC_INLINE__ void task_state_set_deleted(k_task_t *task)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
    task->state = K_TASK_STATE_DELETED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2208      	movs	r2, #8
 80094ae:	f883 2020 	strb.w	r2, [r3, #32]
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <task_reset>:
 *---------------------------------------------------------------------------*/

#include "tos_k.h"

__STATIC_INLINE__ void task_reset(k_task_t *task)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b082      	sub	sp, #8
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
#if TOS_CFG_TASK_DYNAMIC_CREATE_EN > 0u
    knl_object_alloc_reset(&task->knl_obj);

    tos_list_init(&task->dead_list);
#endif
    tos_list_init(&task->stat_list);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	332c      	adds	r3, #44	; 0x2c
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff ff39 	bl	8009342 <tos_list_init>
    tos_list_init(&task->tick_list);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3340      	adds	r3, #64	; 0x40
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7ff ff34 	bl	8009342 <tos_list_init>
    tos_list_init(&task->pend_list);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	3348      	adds	r3, #72	; 0x48
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff ff2f 	bl	8009342 <tos_list_init>

#if TOS_CFG_MUTEX_EN > 0u
    tos_list_init(&task->mutex_own_list);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3350      	adds	r3, #80	; 0x50
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff ff2a 	bl	8009342 <tos_list_init>
    task->prio_pending  = K_TASK_PRIO_INVALID;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	220a      	movs	r2, #10
 80094f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
#endif

    task->pend_state    = PEND_STATE_NONE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    task->pending_obj   = (pend_obj_t *)K_NULL;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	65da      	str	r2, [r3, #92]	; 0x5c

#if TOS_CFG_MESSAGE_QUEUE_EN > 0u
    task->msg           = K_NULL;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	66da      	str	r2, [r3, #108]	; 0x6c
#endif

#if TOS_CFG_MAIL_QUEUE_EN > 0u
    task->mail          = K_NULL;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	671a      	str	r2, [r3, #112]	; 0x70
    task->mail_size     = 0;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	675a      	str	r2, [r3, #116]	; 0x74
#endif

    TOS_OBJ_DEINIT(task);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3304      	adds	r3, #4
 800951a:	4618      	mov	r0, r3
 800951c:	f7ff ff76 	bl	800940c <knl_object_deinit>
}
 8009520:	bf00      	nop
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <task_exit>:

__STATIC__ void task_exit(void)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
    tos_task_destroy(K_NULL);
 800952c:	2000      	movs	r0, #0
 800952e:	f000 f977 	bl	8009820 <tos_task_destroy>
}
 8009532:	bf00      	nop
 8009534:	bd80      	pop	{r7, pc}

08009536 <task_highest_pending_prio_get>:

#if TOS_CFG_MUTEX_EN > 0u
__STATIC__ k_prio_t task_highest_pending_prio_get(k_task_t *task)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
    k_mutex_t *mutex;
    k_prio_t prio, highest_prio_pending = K_TASK_PRIO_INVALID;
 800953e:	230a      	movs	r3, #10
 8009540:	72fb      	strb	r3, [r7, #11]

    TOS_LIST_FOR_EACH_ENTRY(mutex, k_mutex_t, owner_anchor, &task->mutex_own_list) {
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009546:	3b18      	subs	r3, #24
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	e010      	b.n	800956e <task_highest_pending_prio_get+0x38>
        prio = pend_highest_pending_prio_get(&mutex->pend_obj);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3304      	adds	r3, #4
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe fc31 	bl	8007db8 <pend_highest_pending_prio_get>
 8009556:	4603      	mov	r3, r0
 8009558:	72bb      	strb	r3, [r7, #10]
        if (prio < highest_prio_pending) {
 800955a:	7aba      	ldrb	r2, [r7, #10]
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	429a      	cmp	r2, r3
 8009560:	d201      	bcs.n	8009566 <task_highest_pending_prio_get+0x30>
            highest_prio_pending = prio;
 8009562:	7abb      	ldrb	r3, [r7, #10]
 8009564:	72fb      	strb	r3, [r7, #11]
    TOS_LIST_FOR_EACH_ENTRY(mutex, k_mutex_t, owner_anchor, &task->mutex_own_list) {
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	3b18      	subs	r3, #24
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f103 0218 	add.w	r2, r3, #24
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3350      	adds	r3, #80	; 0x50
 8009578:	429a      	cmp	r2, r3
 800957a:	d1e7      	bne.n	800954c <task_highest_pending_prio_get+0x16>
        }
    }

    return highest_prio_pending;
 800957c:	7afb      	ldrb	r3, [r7, #11]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <task_mutex_release>:

__STATIC__ void task_mutex_release(k_task_t *task)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
    k_mutex_t *mutex, *tmp;

    TOS_LIST_FOR_EACH_ENTRY_SAFE(mutex, tmp, k_mutex_t, owner_anchor, &task->mutex_own_list) {
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009592:	3b18      	subs	r3, #24
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	3b18      	subs	r3, #24
 800959c:	60bb      	str	r3, [r7, #8]
 800959e:	e008      	b.n	80095b2 <task_mutex_release+0x2c>
        mutex_release(mutex);
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7fe f95c 	bl	800785e <mutex_release>
    TOS_LIST_FOR_EACH_ENTRY_SAFE(mutex, tmp, k_mutex_t, owner_anchor, &task->mutex_own_list) {
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	60fb      	str	r3, [r7, #12]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	3b18      	subs	r3, #24
 80095b0:	60bb      	str	r3, [r7, #8]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f103 0218 	add.w	r2, r3, #24
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3350      	adds	r3, #80	; 0x50
 80095bc:	429a      	cmp	r2, r3
 80095be:	d1ef      	bne.n	80095a0 <task_mutex_release+0x1a>
    }
}
 80095c0:	bf00      	nop
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <tos_task_create>:
                                            void *arg,
                                            k_prio_t prio,
                                            k_stack_t *stk_base,
                                            size_t stk_size,
                                            k_timeslice_t timeslice)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
    TOS_CPU_CPSR_ALLOC();
 80095d6:	2300      	movs	r3, #0
 80095d8:	617b      	str	r3, [r7, #20]

    TOS_IN_IRQ_CHECK();
 80095da:	f7ff fe27 	bl	800922c <knl_is_inirq>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	bf14      	ite	ne
 80095e4:	2301      	movne	r3, #1
 80095e6:	2300      	moveq	r3, #0
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <tos_task_create+0x2c>
 80095ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80095f2:	e0b0      	b.n	8009756 <tos_task_create+0x18e>

    TOS_PTR_SANITY_CHECK(task);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bf0c      	ite	eq
 80095fa:	2301      	moveq	r3, #1
 80095fc:	2300      	movne	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <tos_task_create+0x42>
 8009604:	f240 434c 	movw	r3, #1100	; 0x44c
 8009608:	e0a5      	b.n	8009756 <tos_task_create+0x18e>
    TOS_PTR_SANITY_CHECK(entry);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	bf0c      	ite	eq
 8009610:	2301      	moveq	r3, #1
 8009612:	2300      	movne	r3, #0
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <tos_task_create+0x58>
 800961a:	f240 434c 	movw	r3, #1100	; 0x44c
 800961e:	e09a      	b.n	8009756 <tos_task_create+0x18e>
    TOS_PTR_SANITY_CHECK(stk_base);
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	2b00      	cmp	r3, #0
 8009624:	bf0c      	ite	eq
 8009626:	2301      	moveq	r3, #1
 8009628:	2300      	movne	r3, #0
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <tos_task_create+0x6e>
 8009630:	f240 434c 	movw	r3, #1100	; 0x44c
 8009634:	e08f      	b.n	8009756 <tos_task_create+0x18e>

    /* try to re-create a task, kind of dangerous */
    TOS_OBJ_TEST_RC(task, KNL_OBJ_TYPE_TASK, K_ERR_TASK_ALREADY_CREATED);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3304      	adds	r3, #4
 800963a:	f64d 21d8 	movw	r1, #56024	; 0xdad8
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff fec1 	bl	80093c6 <knl_object_verify>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <tos_task_create+0x88>
 800964a:	f240 736c 	movw	r3, #1900	; 0x76c
 800964e:	e082      	b.n	8009756 <tos_task_create+0x18e>

    if (unlikely(stk_size < K_TASK_STK_SIZE_MIN)) {
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	2b43      	cmp	r3, #67	; 0x43
 8009654:	bf94      	ite	ls
 8009656:	2301      	movls	r3, #1
 8009658:	2300      	movhi	r3, #0
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <tos_task_create+0x9e>
        return K_ERR_TASK_STK_SIZE_INVALID;
 8009660:	f240 7374 	movw	r3, #1908	; 0x774
 8009664:	e077      	b.n	8009756 <tos_task_create+0x18e>
    }

    if (unlikely(prio == K_TASK_PRIO_IDLE && !knl_is_idle(task))) {
 8009666:	f897 3020 	ldrb.w	r3, [r7, #32]
 800966a:	2b09      	cmp	r3, #9
 800966c:	bf0c      	ite	eq
 800966e:	2301      	moveq	r3, #1
 8009670:	2300      	movne	r3, #0
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00d      	beq.n	8009694 <tos_task_create+0xcc>
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f7ff fde7 	bl	800924c <knl_is_idle>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	bf0c      	ite	eq
 8009684:	2301      	moveq	r3, #1
 8009686:	2300      	movne	r3, #0
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <tos_task_create+0xcc>
        return K_ERR_TASK_PRIO_INVALID;
 800968e:	f240 736f 	movw	r3, #1903	; 0x76f
 8009692:	e060      	b.n	8009756 <tos_task_create+0x18e>
    }

    if (unlikely(prio > K_TASK_PRIO_IDLE)) {
 8009694:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009698:	2b09      	cmp	r3, #9
 800969a:	bf8c      	ite	hi
 800969c:	2301      	movhi	r3, #1
 800969e:	2300      	movls	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <tos_task_create+0xe4>
        return K_ERR_TASK_PRIO_INVALID;
 80096a6:	f240 736f 	movw	r3, #1903	; 0x76f
 80096aa:	e054      	b.n	8009756 <tos_task_create+0x18e>
    }

    task_reset(task);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7ff ff06 	bl	80094be <task_reset>
    tos_list_add(&task->stat_list, &k_stat_list);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	332c      	adds	r3, #44	; 0x2c
 80096b6:	492a      	ldr	r1, [pc, #168]	; (8009760 <tos_task_create+0x198>)
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7ff fe52 	bl	8009362 <tos_list_add>

    TOS_OBJ_INIT(task, KNL_OBJ_TYPE_TASK);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3304      	adds	r3, #4
 80096c2:	f64d 21d8 	movw	r1, #56024	; 0xdad8
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff fe91 	bl	80093ee <knl_object_init>
#if TOS_CFG_TASK_DYNAMIC_CREATE_EN > 0u
    knl_object_alloc_set_static(&task->knl_obj);
#endif

    task->sp        = cpu_task_stk_init((void *)entry, arg, (void *)task_exit, stk_base, stk_size);
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	4a24      	ldr	r2, [pc, #144]	; (8009764 <tos_task_create+0x19c>)
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7fc fbf4 	bl	8005ec4 <cpu_task_stk_init>
 80096dc:	4602      	mov	r2, r0
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	601a      	str	r2, [r3, #0]
    task->entry     = entry;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	619a      	str	r2, [r3, #24]
    task->arg       = arg;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	61da      	str	r2, [r3, #28]
    task->prio      = prio;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80096f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    task->stk_base  = stk_base;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24
    task->stk_size  = stk_size;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009702:	629a      	str	r2, [r3, #40]	; 0x28
    strncpy(task->name, name, K_TASK_NAME_MAX);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3308      	adds	r3, #8
 8009708:	2210      	movs	r2, #16
 800970a:	68b9      	ldr	r1, [r7, #8]
 800970c:	4618      	mov	r0, r3
 800970e:	f001 ff5b 	bl	800b5c8 <strncpy>

#if TOS_CFG_ROUND_ROBIN_EN > 0u
    task->timeslice_reload = timeslice;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009716:	665a      	str	r2, [r3, #100]	; 0x64

    if (timeslice == (k_timeslice_t)0u) {
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <tos_task_create+0x160>
        task->timeslice = k_robin_default_timeslice;
 800971e:	4b12      	ldr	r3, [pc, #72]	; (8009768 <tos_task_create+0x1a0>)
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	669a      	str	r2, [r3, #104]	; 0x68
 8009726:	e002      	b.n	800972e <tos_task_create+0x166>
    } else {
        task->timeslice = timeslice;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800972c:	669a      	str	r2, [r3, #104]	; 0x68
    }
#endif

    TOS_CPU_INT_DISABLE();
 800972e:	f7fc fb73 	bl	8005e18 <tos_cpu_cpsr_save>
 8009732:	6178      	str	r0, [r7, #20]
    task_state_set_ready(task);
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f7ff fea6 	bl	8009486 <task_state_set_ready>
    readyqueue_add_tail(task);
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f7ff f8ea 	bl	8008914 <readyqueue_add_tail>
    TOS_CPU_INT_ENABLE();
 8009740:	6978      	ldr	r0, [r7, #20]
 8009742:	f7fc fb70 	bl	8005e26 <tos_cpu_cpsr_restore>

    if (tos_knl_is_running()) {
 8009746:	f7ff fd13 	bl	8009170 <tos_knl_is_running>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <tos_task_create+0x18c>
        knl_sched();
 8009750:	f7ff fd1e 	bl	8009190 <knl_sched>
    }

    return K_ERR_NONE;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3718      	adds	r7, #24
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	200003a8 	.word	0x200003a8
 8009764:	08009529 	.word	0x08009529
 8009768:	200003b8 	.word	0x200003b8

0800976c <task_do_destroy>:

__STATIC__ k_err_t task_do_destroy(k_task_t *task)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 8009774:	2300      	movs	r3, #0
 8009776:	60fb      	str	r3, [r7, #12]

    if (knl_is_idle(task)) {
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fd67 	bl	800924c <knl_is_idle>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <task_do_destroy+0x1e>
        return K_ERR_TASK_DESTROY_IDLE;
 8009784:	f240 736d 	movw	r3, #1901	; 0x76d
 8009788:	e039      	b.n	80097fe <task_do_destroy+0x92>
    }

    TOS_CPU_INT_DISABLE();
 800978a:	f7fc fb45 	bl	8005e18 <tos_cpu_cpsr_save>
 800978e:	60f8      	str	r0, [r7, #12]

#if TOS_CFG_MUTEX_EN > 0u
    // when we die, wakeup all the people in this land.
    if (!tos_list_empty(&task->mutex_own_list)) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3350      	adds	r3, #80	; 0x50
 8009794:	4618      	mov	r0, r3
 8009796:	f7ff fe04 	bl	80093a2 <tos_list_empty>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d102      	bne.n	80097a6 <task_do_destroy+0x3a>
        task_mutex_release(task);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff fef0 	bl	8009586 <task_mutex_release>
    }
#endif

    if (task_state_is_ready(task)) { // that's simple, good kid
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fe3d 	bl	8009426 <task_state_is_ready>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <task_do_destroy+0x4c>
        readyqueue_remove(task);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7ff f8ec 	bl	8008990 <readyqueue_remove>
    }
    if (task_state_is_sleeping(task)) {
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7ff fe46 	bl	800944a <task_state_is_sleeping>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <task_do_destroy+0x5e>
        tick_list_remove(task);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 faf3 	bl	8009db0 <tick_list_remove>
    }
    if (task_state_is_pending(task)) {
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff fe4c 	bl	8009468 <task_state_is_pending>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d002      	beq.n	80097dc <task_do_destroy+0x70>
        pend_list_remove(task);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7fe fb18 	bl	8007e0c <pend_list_remove>
    }

    tos_list_del(&task->stat_list);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	332c      	adds	r3, #44	; 0x2c
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff fdce 	bl	8009382 <tos_list_del>
    task_reset(task);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff fe69 	bl	80094be <task_reset>

    task_state_set_deleted(task);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff fe58 	bl	80094a2 <task_state_set_deleted>

    TOS_CPU_INT_ENABLE();
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7fc fb17 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 80097f8:	f7ff fcca 	bl	8009190 <knl_sched>

    return K_ERR_NONE;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <task_destroy_static>:

__STATIC__ k_err_t task_destroy_static(k_task_t *task)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
    if (!knl_object_alloc_is_static(&task->knl_obj)) {
        return K_ERR_OBJ_INVALID_ALLOC_TYPE;
    }
#endif

    return task_do_destroy(task);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff ffac 	bl	800976c <task_do_destroy>
 8009814:	4603      	mov	r3, r0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <tos_task_destroy>:
}

#endif

__API__ k_err_t tos_task_destroy(k_task_t *task)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
    TOS_IN_IRQ_CHECK();
 8009828:	f7ff fd00 	bl	800922c <knl_is_inirq>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	bf14      	ite	ne
 8009832:	2301      	movne	r3, #1
 8009834:	2300      	moveq	r3, #0
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d002      	beq.n	8009842 <tos_task_destroy+0x22>
 800983c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009840:	e029      	b.n	8009896 <tos_task_destroy+0x76>

    if (unlikely(!task)) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	bf0c      	ite	eq
 8009848:	2301      	moveq	r3, #1
 800984a:	2300      	movne	r3, #0
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <tos_task_destroy+0x38>
        task = k_curr_task;
 8009852:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <tos_task_destroy+0x80>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	607b      	str	r3, [r7, #4]
    }

    TOS_OBJ_VERIFY(task, KNL_OBJ_TYPE_TASK);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3304      	adds	r3, #4
 800985c:	f64d 21d8 	movw	r1, #56024	; 0xdad8
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff fdb0 	bl	80093c6 <knl_object_verify>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <tos_task_destroy+0x52>
 800986c:	f240 434d 	movw	r3, #1101	; 0x44d
 8009870:	e011      	b.n	8009896 <tos_task_destroy+0x76>

    if (knl_is_self(task) && knl_is_sched_locked()) {
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff fcfe 	bl	8009274 <knl_is_self>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d007      	beq.n	800988e <tos_task_destroy+0x6e>
 800987e:	f7ff fcc5 	bl	800920c <knl_is_sched_locked>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <tos_task_destroy+0x6e>
        return K_ERR_SCHED_LOCKED;
 8009888:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800988c:	e003      	b.n	8009896 <tos_task_destroy+0x76>
    if (knl_object_alloc_is_dynamic(&task->knl_obj)) {
        return task_destroy_dyn(task);
    }
#endif

    return task_destroy_static(task);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7ff ffb9 	bl	8009806 <task_destroy_static>
 8009894:	4603      	mov	r3, r0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20000688 	.word	0x20000688

080098a4 <tos_task_yield>:

__API__ void tos_task_yield(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
    TOS_CPU_CPSR_ALLOC();
 80098aa:	2300      	movs	r3, #0
 80098ac:	607b      	str	r3, [r7, #4]

    if (knl_is_inirq()) {
 80098ae:	f7ff fcbd 	bl	800922c <knl_is_inirq>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d112      	bne.n	80098de <tos_task_yield+0x3a>
        return;
    }

    TOS_CPU_INT_DISABLE();
 80098b8:	f7fc faae 	bl	8005e18 <tos_cpu_cpsr_save>
 80098bc:	6078      	str	r0, [r7, #4]

    readyqueue_remove(k_curr_task);
 80098be:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <tos_task_yield+0x44>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7ff f864 	bl	8008990 <readyqueue_remove>
    readyqueue_add_tail(k_curr_task);
 80098c8:	4b07      	ldr	r3, [pc, #28]	; (80098e8 <tos_task_yield+0x44>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff f821 	bl	8008914 <readyqueue_add_tail>

    TOS_CPU_INT_ENABLE();
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7fc faa7 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 80098d8:	f7ff fc5a 	bl	8009190 <knl_sched>
 80098dc:	e000      	b.n	80098e0 <tos_task_yield+0x3c>
        return;
 80098de:	bf00      	nop
}
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20000688 	.word	0x20000688

080098ec <tos_task_prio_change>:

__API__ k_err_t tos_task_prio_change(k_task_t *task, k_prio_t prio_new)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
    TOS_CPU_CPSR_ALLOC();
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
#if TOS_CFG_MUTEX_EN > 0u
    k_prio_t highest_pending_prio;
#endif

    TOS_IN_IRQ_CHECK();
 80098fc:	f7ff fc96 	bl	800922c <knl_is_inirq>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	bf14      	ite	ne
 8009906:	2301      	movne	r3, #1
 8009908:	2300      	moveq	r3, #0
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <tos_task_prio_change+0x2a>
 8009910:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009914:	e082      	b.n	8009a1c <tos_task_prio_change+0x130>
    TOS_PTR_SANITY_CHECK(task);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	bf0c      	ite	eq
 800991c:	2301      	moveq	r3, #1
 800991e:	2300      	movne	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <tos_task_prio_change+0x40>
 8009926:	f240 434c 	movw	r3, #1100	; 0x44c
 800992a:	e077      	b.n	8009a1c <tos_task_prio_change+0x130>
    TOS_OBJ_VERIFY(task, KNL_OBJ_TYPE_TASK);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3304      	adds	r3, #4
 8009930:	f64d 21d8 	movw	r1, #56024	; 0xdad8
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff fd46 	bl	80093c6 <knl_object_verify>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d102      	bne.n	8009946 <tos_task_prio_change+0x5a>
 8009940:	f240 434d 	movw	r3, #1101	; 0x44d
 8009944:	e06a      	b.n	8009a1c <tos_task_prio_change+0x130>

    if (unlikely(prio_new >= K_TASK_PRIO_IDLE)) {
 8009946:	78fb      	ldrb	r3, [r7, #3]
 8009948:	2b08      	cmp	r3, #8
 800994a:	bf8c      	ite	hi
 800994c:	2301      	movhi	r3, #1
 800994e:	2300      	movls	r3, #0
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <tos_task_prio_change+0x70>
        return K_ERR_TASK_PRIO_INVALID;
 8009956:	f240 736f 	movw	r3, #1903	; 0x76f
 800995a:	e05f      	b.n	8009a1c <tos_task_prio_change+0x130>
    }

    TOS_CPU_INT_DISABLE();
 800995c:	f7fc fa5c 	bl	8005e18 <tos_cpu_cpsr_save>
 8009960:	60f8      	str	r0, [r7, #12]

    if (task->prio == prio_new) { // just kidding
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	429a      	cmp	r2, r3
 800996c:	d106      	bne.n	800997c <tos_task_prio_change+0x90>
        TOS_CPU_INT_ENABLE();
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f7fc fa59 	bl	8005e26 <tos_cpu_cpsr_restore>
        knl_sched();
 8009974:	f7ff fc0c 	bl	8009190 <knl_sched>
        return K_ERR_NONE;
 8009978:	2300      	movs	r3, #0
 800997a:	e04f      	b.n	8009a1c <tos_task_prio_change+0x130>
    }

#if TOS_CFG_MUTEX_EN > 0u
    if (!tos_list_empty(&task->mutex_own_list)) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	3350      	adds	r3, #80	; 0x50
 8009980:	4618      	mov	r0, r3
 8009982:	f7ff fd0e 	bl	80093a2 <tos_list_empty>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10e      	bne.n	80099aa <tos_task_prio_change+0xbe>
        highest_pending_prio = task_highest_pending_prio_get(task);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff fdd2 	bl	8009536 <task_highest_pending_prio_get>
 8009992:	4603      	mov	r3, r0
 8009994:	72fb      	strb	r3, [r7, #11]
        if (prio_new > highest_pending_prio) {
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	429a      	cmp	r2, r3
 800999c:	d905      	bls.n	80099aa <tos_task_prio_change+0xbe>
            task->prio_pending  = prio_new;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	78fa      	ldrb	r2, [r7, #3]
 80099a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
            prio_new            = highest_pending_prio;
 80099a6:	7afb      	ldrb	r3, [r7, #11]
 80099a8:	70fb      	strb	r3, [r7, #3]
        }
    }
#endif

    if (task_state_is_pending(task)) {
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff fd5c 	bl	8009468 <task_state_is_pending>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d007      	beq.n	80099c6 <tos_task_prio_change+0xda>
        task->prio = prio_new;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	78fa      	ldrb	r2, [r7, #3]
 80099ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        pend_list_adjust(task);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7fe fa5c 	bl	8007e7c <pend_list_adjust>
 80099c4:	e024      	b.n	8009a10 <tos_task_prio_change+0x124>
    } else if (task_state_is_sleeping(task)) {
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff fd3f 	bl	800944a <task_state_is_sleeping>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d004      	beq.n	80099dc <tos_task_prio_change+0xf0>
        task->prio = prio_new;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	78fa      	ldrb	r2, [r7, #3]
 80099d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80099da:	e019      	b.n	8009a10 <tos_task_prio_change+0x124>
    } else if (task_state_is_ready(task)) { // good kid
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7ff fd22 	bl	8009426 <task_state_is_ready>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d013      	beq.n	8009a10 <tos_task_prio_change+0x124>
        readyqueue_remove(task);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7fe ffd1 	bl	8008990 <readyqueue_remove>

        /* ATTENTION:
            must do the prio assignment after readyqueue_remove
            otherwise the k_rdyq.highest_prio refresh in readyqueue_remove will be wrong.
         */
        task->prio = prio_new;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	78fa      	ldrb	r2, [r7, #3]
 80099f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        if (knl_is_self(task)) {
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff fc3c 	bl	8009274 <knl_is_self>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <tos_task_prio_change+0x11e>
            readyqueue_add_head(task);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7fe ff62 	bl	80088cc <readyqueue_add_head>
 8009a08:	e002      	b.n	8009a10 <tos_task_prio_change+0x124>
        } else {
            readyqueue_add_tail(task);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7fe ff82 	bl	8008914 <readyqueue_add_tail>
        }
    }

    TOS_CPU_INT_ENABLE();
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7fc fa08 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 8009a16:	f7ff fbbb 	bl	8009190 <knl_sched>

    return K_ERR_NONE;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <tos_task_delay>:

    return K_ERR_NONE;
}

__API__ k_err_t tos_task_delay(k_tick_t delay)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	e9c7 0100 	strd	r0, r1, [r7]
    TOS_CPU_CPSR_ALLOC();
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]

    TOS_IN_IRQ_CHECK();
 8009a32:	f7ff fbfb 	bl	800922c <knl_is_inirq>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	bf14      	ite	ne
 8009a3c:	2301      	movne	r3, #1
 8009a3e:	2300      	moveq	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <tos_task_delay+0x28>
 8009a46:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009a4a:	e037      	b.n	8009abc <tos_task_delay+0x98>

    if (knl_is_sched_locked()) {
 8009a4c:	f7ff fbde 	bl	800920c <knl_is_sched_locked>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <tos_task_delay+0x38>
        return K_ERR_SCHED_LOCKED;
 8009a56:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8009a5a:	e02f      	b.n	8009abc <tos_task_delay+0x98>
    }

    if (unlikely(delay == (k_tick_t)0u)) {
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bf0c      	ite	eq
 8009a66:	2301      	moveq	r3, #1
 8009a68:	2300      	movne	r3, #0
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d003      	beq.n	8009a78 <tos_task_delay+0x54>
        tos_task_yield();
 8009a70:	f7ff ff18 	bl	80098a4 <tos_task_yield>
        return K_ERR_NONE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	e021      	b.n	8009abc <tos_task_delay+0x98>
    }

    if (unlikely(delay == TOS_TIME_FOREVER)) {
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a82:	bf0c      	ite	eq
 8009a84:	2301      	moveq	r3, #1
 8009a86:	2300      	movne	r3, #0
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <tos_task_delay+0x6e>
        // if you wanna delay your task forever, why don't just suspend?
        return K_ERR_DELAY_FOREVER;
 8009a8e:	2365      	movs	r3, #101	; 0x65
 8009a90:	e014      	b.n	8009abc <tos_task_delay+0x98>
    }

    TOS_CPU_INT_DISABLE();
 8009a92:	f7fc f9c1 	bl	8005e18 <tos_cpu_cpsr_save>
 8009a96:	60f8      	str	r0, [r7, #12]

    tick_list_add(k_curr_task, delay);
 8009a98:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <tos_task_delay+0xa0>)
 8009a9a:	6819      	ldr	r1, [r3, #0]
 8009a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	f000 f973 	bl	8009d8c <tick_list_add>
    readyqueue_remove(k_curr_task);
 8009aa6:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <tos_task_delay+0xa0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe ff70 	bl	8008990 <readyqueue_remove>

    TOS_CPU_INT_ENABLE();
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7fc f9b8 	bl	8005e26 <tos_cpu_cpsr_restore>
    knl_sched();
 8009ab6:	f7ff fb6b 	bl	8009190 <knl_sched>

    return K_ERR_NONE;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20000688 	.word	0x20000688

08009ac8 <_list_add>:
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
    next->prev = node;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	605a      	str	r2, [r3, #4]
    node->next = next;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	601a      	str	r2, [r3, #0]
    node->prev = prev;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	605a      	str	r2, [r3, #4]
    prev->next = node;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	601a      	str	r2, [r3, #0]
}
 8009aec:	bf00      	nop
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <_list_del>:
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
    next->prev = prev;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	605a      	str	r2, [r3, #4]
    prev->next = next;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	601a      	str	r2, [r3, #0]
}
 8009b0e:	bf00      	nop
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <tos_list_add_tail>:
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
    _list_add(node, list->prev, list);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff ffcb 	bl	8009ac8 <_list_add>
}
 8009b32:	bf00      	nop
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <tos_list_del>:
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
    _list_del(node->prev, node->next);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	f7ff ffd3 	bl	8009af8 <_list_del>
}
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <tos_list_empty>:
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
    return list->next == list;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	bf0c      	ite	eq
 8009b6c:	2301      	moveq	r3, #1
 8009b6e:	2300      	movne	r3, #0
 8009b70:	b2db      	uxtb	r3, r3
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <task_state_reset_sleeping>:
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
    task->state &= ~K_TASK_STATE_SLEEP;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b8c:	f023 0301 	bic.w	r3, r3, #1
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f883 2020 	strb.w	r2, [r3, #32]
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <task_state_set_sleeping>:

__KNL__ __STATIC_INLINE__ void task_state_set_sleeping(k_task_t *task)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
    task->state |= K_TASK_STATE_SLEEP;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bb2:	f043 0301 	orr.w	r3, r3, #1
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f883 2020 	strb.w	r2, [r3, #32]
}
 8009bbe:	bf00      	nop
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
	...

08009bcc <tick_task_place>:
 *---------------------------------------------------------------------------*/

#include "tos_k.h"

__STATIC__ void tick_task_place(k_task_t *task, k_tick_t timeout)
{
 8009bcc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009bd0:	b08c      	sub	sp, #48	; 0x30
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	60f8      	str	r0, [r7, #12]
 8009bd6:	e9c7 2300 	strd	r2, r3, [r7]
    TOS_CPU_CPSR_ALLOC();
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61fb      	str	r3, [r7, #28]
    k_task_t *curr_task = K_NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    k_tick_t curr_expires, prev_expires = (k_tick_t)0u;
 8009be2:	f04f 0300 	mov.w	r3, #0
 8009be6:	f04f 0400 	mov.w	r4, #0
 8009bea:	e9c7 3408 	strd	r3, r4, [r7, #32]

    TOS_CPU_INT_DISABLE();
 8009bee:	f7fc f913 	bl	8005e18 <tos_cpu_cpsr_save>
 8009bf2:	61f8      	str	r0, [r7, #28]

    task->tick_expires = timeout;
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009bfa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

    TOS_LIST_FOR_EACH_ENTRY(curr_task, k_task_t, tick_list, &k_tick_list) {
 8009bfe:	4b36      	ldr	r3, [pc, #216]	; (8009cd8 <tick_task_place+0x10c>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3b40      	subs	r3, #64	; 0x40
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c06:	e02c      	b.n	8009c62 <tick_task_place+0x96>
        curr_expires = prev_expires + curr_task->tick_expires;
 8009c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0a:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 8009c0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009c12:	eb1b 0301 	adds.w	r3, fp, r1
 8009c16:	eb4c 0402 	adc.w	r4, ip, r2
 8009c1a:	e9c7 3404 	strd	r3, r4, [r7, #16]

        if (task->tick_expires < curr_expires) {
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8009c24:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009c28:	42a2      	cmp	r2, r4
 8009c2a:	bf08      	it	eq
 8009c2c:	4299      	cmpeq	r1, r3
 8009c2e:	d31e      	bcc.n	8009c6e <tick_task_place+0xa2>
            break;
        }
        if (task->tick_expires == curr_expires &&
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009c36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009c3a:	42a2      	cmp	r2, r4
 8009c3c:	bf08      	it	eq
 8009c3e:	4299      	cmpeq	r1, r3
 8009c40:	d107      	bne.n	8009c52 <tick_task_place+0x86>
            task->prio < curr_task->prio) {
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
        if (task->tick_expires == curr_expires &&
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d30f      	bcc.n	8009c72 <tick_task_place+0xa6>
            break;
        }
        prev_expires = curr_expires;
 8009c52:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009c56:	e9c7 3408 	strd	r3, r4, [r7, #32]
    TOS_LIST_FOR_EACH_ENTRY(curr_task, k_task_t, tick_list, &k_tick_list) {
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	3b40      	subs	r3, #64	; 0x40
 8009c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c64:	3340      	adds	r3, #64	; 0x40
 8009c66:	4a1c      	ldr	r2, [pc, #112]	; (8009cd8 <tick_task_place+0x10c>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d1cd      	bne.n	8009c08 <tick_task_place+0x3c>
 8009c6c:	e002      	b.n	8009c74 <tick_task_place+0xa8>
            break;
 8009c6e:	bf00      	nop
 8009c70:	e000      	b.n	8009c74 <tick_task_place+0xa8>
            break;
 8009c72:	bf00      	nop
    }
    task->tick_expires -= prev_expires;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8009c7a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009c7e:	1ac9      	subs	r1, r1, r3
 8009c80:	eb62 0204 	sbc.w	r2, r2, r4
 8009c84:	468b      	mov	fp, r1
 8009c86:	4694      	mov	ip, r2
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	e9c2 bc0e 	strd	fp, ip, [r2, #56]	; 0x38
    if (&curr_task->tick_list != &k_tick_list) {
 8009c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c90:	3340      	adds	r3, #64	; 0x40
 8009c92:	4a11      	ldr	r2, [pc, #68]	; (8009cd8 <tick_task_place+0x10c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d00e      	beq.n	8009cb6 <tick_task_place+0xea>
        curr_task->tick_expires -= task->tick_expires;
 8009c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9a:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4614      	mov	r4, r2
 8009ca8:	ebb3 030b 	subs.w	r3, r3, fp
 8009cac:	eb64 040c 	sbc.w	r4, r4, ip
 8009cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cb2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    }
    tos_list_add_tail(&task->tick_list, &curr_task->tick_list);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbe:	3340      	adds	r3, #64	; 0x40
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	f7ff ff29 	bl	8009b1a <tos_list_add_tail>

    TOS_CPU_INT_ENABLE();
 8009cc8:	69f8      	ldr	r0, [r7, #28]
 8009cca:	f7fc f8ac 	bl	8005e26 <tos_cpu_cpsr_restore>
}
 8009cce:	bf00      	nop
 8009cd0:	3730      	adds	r7, #48	; 0x30
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009cd8:	200003b0 	.word	0x200003b0

08009cdc <tick_task_takeoff>:

__STATIC__ void tick_task_takeoff(k_task_t *task)
{
 8009cdc:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]
    k_task_t *next;

    TOS_CPU_INT_DISABLE();
 8009cea:	f7fc f895 	bl	8005e18 <tos_cpu_cpsr_save>
 8009cee:	60f8      	str	r0, [r7, #12]

    next = TOS_LIST_FIRST_ENTRY_OR_NULL(&task->tick_list, k_task_t, tick_list);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3340      	adds	r3, #64	; 0x40
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7ff ff30 	bl	8009b5a <tos_list_empty>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d103      	bne.n	8009d08 <tick_task_takeoff+0x2c>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d04:	3b40      	subs	r3, #64	; 0x40
 8009d06:	e000      	b.n	8009d0a <tick_task_takeoff+0x2e>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60bb      	str	r3, [r7, #8]
    if (next && task->tick_list.next != &k_tick_list) { // not the only one
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d02c      	beq.n	8009d6c <tick_task_takeoff+0x90>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d16:	4a1c      	ldr	r2, [pc, #112]	; (8009d88 <tick_task_takeoff+0xac>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d027      	beq.n	8009d6c <tick_task_takeoff+0x90>
        if (next->tick_expires <= K_TIME_MAX - task->tick_expires) {
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	e9d2 bc0e 	ldrd	fp, ip, [r2, #56]	; 0x38
 8009d28:	f06f 0501 	mvn.w	r5, #1
 8009d2c:	f04f 36ff 	mov.w	r6, #4294967295
 8009d30:	4629      	mov	r1, r5
 8009d32:	4632      	mov	r2, r6
 8009d34:	ebb1 010b 	subs.w	r1, r1, fp
 8009d38:	eb62 020c 	sbc.w	r2, r2, ip
 8009d3c:	42a2      	cmp	r2, r4
 8009d3e:	bf08      	it	eq
 8009d40:	4299      	cmpeq	r1, r3
 8009d42:	d30c      	bcc.n	8009d5e <tick_task_takeoff+0x82>
            next->tick_expires += task->tick_expires;
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 8009d50:	186b      	adds	r3, r5, r1
 8009d52:	eb46 0402 	adc.w	r4, r6, r2
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8009d5c:	e006      	b.n	8009d6c <tick_task_takeoff+0x90>
        } else {
            next->tick_expires = K_TIME_MAX;
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	f06f 0301 	mvn.w	r3, #1
 8009d64:	f04f 34ff 	mov.w	r4, #4294967295
 8009d68:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        }
    }

    tos_list_del(&task->tick_list);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3340      	adds	r3, #64	; 0x40
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff fee2 	bl	8009b3a <tos_list_del>

    TOS_CPU_INT_ENABLE();
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7fc f855 	bl	8005e26 <tos_cpu_cpsr_restore>
}
 8009d7c:	bf00      	nop
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8009d86:	bf00      	nop
 8009d88:	200003b0 	.word	0x200003b0

08009d8c <tick_list_add>:

__KNL__ void tick_list_add(k_task_t *task, k_tick_t timeout)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	e9c7 2300 	strd	r2, r3, [r7]
    tick_task_place(task, timeout);
 8009d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f7ff ff15 	bl	8009bcc <tick_task_place>
    task_state_set_sleeping(task);
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f7ff fefe 	bl	8009ba4 <task_state_set_sleeping>
}
 8009da8:	bf00      	nop
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <tick_list_remove>:

__KNL__ void tick_list_remove(k_task_t *task)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
    tick_task_takeoff(task);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff ff8f 	bl	8009cdc <tick_task_takeoff>
    task_state_reset_sleeping(task);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff fedd 	bl	8009b7e <task_state_reset_sleeping>
}
 8009dc4:	bf00      	nop
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <tick_update>:

__KNL__ void tick_update(k_tick_t tick)
{
 8009dcc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009dd0:	b086      	sub	sp, #24
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	e9c7 0100 	strd	r0, r1, [r7]
    TOS_CPU_CPSR_ALLOC();
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]
    k_task_t *first, *task, *tmp;

    TOS_CPU_INT_DISABLE();
 8009ddc:	f7fc f81c 	bl	8005e18 <tos_cpu_cpsr_save>
 8009de0:	60f8      	str	r0, [r7, #12]
    k_tick_count += tick;
 8009de2:	4b30      	ldr	r3, [pc, #192]	; (8009ea4 <tick_update+0xd8>)
 8009de4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8009de8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009dec:	eb13 0b01 	adds.w	fp, r3, r1
 8009df0:	eb44 0c02 	adc.w	ip, r4, r2
 8009df4:	4a2b      	ldr	r2, [pc, #172]	; (8009ea4 <tick_update+0xd8>)
 8009df6:	e9c2 bc00 	strd	fp, ip, [r2]

    if (tos_list_empty(&k_tick_list)) {
 8009dfa:	482b      	ldr	r0, [pc, #172]	; (8009ea8 <tick_update+0xdc>)
 8009dfc:	f7ff fead 	bl	8009b5a <tos_list_empty>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <tick_update+0x42>
        TOS_CPU_INT_ENABLE();
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f7fc f80d 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 8009e0c:	e046      	b.n	8009e9c <tick_update+0xd0>
    }

    first = TOS_LIST_FIRST_ENTRY(&k_tick_list, k_task_t, tick_list);
 8009e0e:	4b26      	ldr	r3, [pc, #152]	; (8009ea8 <tick_update+0xdc>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3b40      	subs	r3, #64	; 0x40
 8009e14:	60bb      	str	r3, [r7, #8]
    if (first->tick_expires <= tick) {
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009e1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e20:	42a2      	cmp	r2, r4
 8009e22:	bf08      	it	eq
 8009e24:	4299      	cmpeq	r1, r3
 8009e26:	d30f      	bcc.n	8009e48 <tick_update+0x7c>
        first->tick_expires = (k_tick_t)0u;
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	f04f 0300 	mov.w	r3, #0
 8009e2e:	f04f 0400 	mov.w	r4, #0
 8009e32:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        first->tick_expires -= tick;
        TOS_CPU_INT_ENABLE();
        return;
    }

    TOS_LIST_FOR_EACH_ENTRY_SAFE(task, tmp, k_task_t, tick_list, &k_tick_list) {
 8009e36:	4b1c      	ldr	r3, [pc, #112]	; (8009ea8 <tick_update+0xdc>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3b40      	subs	r3, #64	; 0x40
 8009e3c:	617b      	str	r3, [r7, #20]
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e42:	3b40      	subs	r3, #64	; 0x40
 8009e44:	613b      	str	r3, [r7, #16]
 8009e46:	e01f      	b.n	8009e88 <tick_update+0xbc>
        first->tick_expires -= tick;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8009e4e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009e52:	1ac9      	subs	r1, r1, r3
 8009e54:	eb62 0204 	sbc.w	r2, r2, r4
 8009e58:	468b      	mov	fp, r1
 8009e5a:	4694      	mov	ip, r2
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	e9c2 bc0e 	strd	fp, ip, [r2, #56]	; 0x38
        TOS_CPU_INT_ENABLE();
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f7fb ffdf 	bl	8005e26 <tos_cpu_cpsr_restore>
        return;
 8009e68:	e018      	b.n	8009e9c <tick_update+0xd0>
        if (task->tick_expires > (k_tick_t)0u) {
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009e70:	4323      	orrs	r3, r4
 8009e72:	d10f      	bne.n	8009e94 <tick_update+0xc8>
            break;
        }

        // we are pending for something, but tick's up, no longer waitting
        pend_task_wakeup(task, PEND_STATE_TIMEOUT);
 8009e74:	2102      	movs	r1, #2
 8009e76:	6978      	ldr	r0, [r7, #20]
 8009e78:	f7fe f837 	bl	8007eea <pend_task_wakeup>
    TOS_LIST_FOR_EACH_ENTRY_SAFE(task, tmp, k_task_t, tick_list, &k_tick_list) {
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	3b40      	subs	r3, #64	; 0x40
 8009e86:	613b      	str	r3, [r7, #16]
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	3340      	adds	r3, #64	; 0x40
 8009e8c:	4a06      	ldr	r2, [pc, #24]	; (8009ea8 <tick_update+0xdc>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d1eb      	bne.n	8009e6a <tick_update+0x9e>
 8009e92:	e000      	b.n	8009e96 <tick_update+0xca>
            break;
 8009e94:	bf00      	nop
    }

    TOS_CPU_INT_ENABLE();
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f7fb ffc5 	bl	8005e26 <tos_cpu_cpsr_restore>
}
 8009e9c:	3718      	adds	r7, #24
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009ea4:	20000680 	.word	0x20000680
 8009ea8:	200003b0 	.word	0x200003b0

08009eac <tos_tick_handler>:
    TOS_CPU_INT_ENABLE();
    return next_expires;
}

__API__ void tos_tick_handler(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	af00      	add	r7, sp, #0
    if (unlikely(!tos_knl_is_running())) {
 8009eb0:	f7ff f95e 	bl	8009170 <tos_knl_is_running>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bf0c      	ite	eq
 8009eba:	2301      	moveq	r3, #1
 8009ebc:	2300      	movne	r3, #0
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10f      	bne.n	8009ee4 <tos_tick_handler+0x38>
        return;
    }

    tick_update((k_tick_t)1u);
 8009ec4:	f04f 0001 	mov.w	r0, #1
 8009ec8:	f04f 0100 	mov.w	r1, #0
 8009ecc:	f7ff ff7e 	bl	8009dcc <tick_update>

#if TOS_CFG_TIMER_EN > 0u && TOS_CFG_TIMER_AS_PROC > 0u
    timer_update();
 8009ed0:	f000 f964 	bl	800a19c <timer_update>
#endif

#if TOS_CFG_ROUND_ROBIN_EN > 0u
    robin_sched(k_curr_task->prio);
 8009ed4:	4b04      	ldr	r3, [pc, #16]	; (8009ee8 <tos_tick_handler+0x3c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe faed 	bl	80084bc <robin_sched>
 8009ee2:	e000      	b.n	8009ee6 <tos_tick_handler+0x3a>
        return;
 8009ee4:	bf00      	nop
#endif
}
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20000688 	.word	0x20000688

08009eec <tos_systick_get>:
 *---------------------------------------------------------------------------*/

#include "tos_k.h"

__API__ k_tick_t tos_systick_get(void)
{
 8009eec:	b590      	push	{r4, r7, lr}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
    TOS_CPU_CPSR_ALLOC();
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60fb      	str	r3, [r7, #12]
    k_tick_t tick;

    TOS_CPU_INT_DISABLE();
 8009ef6:	f7fb ff8f 	bl	8005e18 <tos_cpu_cpsr_save>
 8009efa:	60f8      	str	r0, [r7, #12]
    tick = k_tick_count;
 8009efc:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <tos_systick_get+0x30>)
 8009efe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f02:	e9c7 3400 	strd	r3, r4, [r7]
    TOS_CPU_INT_ENABLE();
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f7fb ff8d 	bl	8005e26 <tos_cpu_cpsr_restore>
    return tick;
 8009f0c:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	4621      	mov	r1, r4
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd90      	pop	{r4, r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20000680 	.word	0x20000680

08009f20 <tos_millisec2tick>:
{
    return (k_time_t)(tick * K_TIME_MILLISEC_PER_SEC / TOS_CFG_CPU_TICK_PER_SECOND);
}

__API__ k_tick_t tos_millisec2tick(k_time_t ms)
{
 8009f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
    return ((k_tick_t)ms * TOS_CFG_CPU_TICK_PER_SECOND / K_TIME_MILLISEC_PER_SEC);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	461d      	mov	r5, r3
 8009f2c:	f04f 0600 	mov.w	r6, #0
 8009f30:	462b      	mov	r3, r5
 8009f32:	4634      	mov	r4, r6
 8009f34:	f04f 0100 	mov.w	r1, #0
 8009f38:	f04f 0200 	mov.w	r2, #0
 8009f3c:	0162      	lsls	r2, r4, #5
 8009f3e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8009f42:	0159      	lsls	r1, r3, #5
 8009f44:	460b      	mov	r3, r1
 8009f46:	4614      	mov	r4, r2
 8009f48:	1b5b      	subs	r3, r3, r5
 8009f4a:	eb64 0406 	sbc.w	r4, r4, r6
 8009f4e:	f04f 0100 	mov.w	r1, #0
 8009f52:	f04f 0200 	mov.w	r2, #0
 8009f56:	00a2      	lsls	r2, r4, #2
 8009f58:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8009f5c:	0099      	lsls	r1, r3, #2
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4614      	mov	r4, r2
 8009f62:	195b      	adds	r3, r3, r5
 8009f64:	eb44 0406 	adc.w	r4, r4, r6
 8009f68:	f04f 0100 	mov.w	r1, #0
 8009f6c:	f04f 0200 	mov.w	r2, #0
 8009f70:	00e2      	lsls	r2, r4, #3
 8009f72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009f76:	00d9      	lsls	r1, r3, #3
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4614      	mov	r4, r2
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	4621      	mov	r1, r4
 8009f80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	f7f6 f9ea 	bl	8000360 <__aeabi_uldivmod>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	460c      	mov	r4, r1
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	4621      	mov	r1, r4
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f9a <tos_sleep_ms>:

__API__ k_err_t tos_sleep_ms(k_time_t ms)
{
 8009f9a:	b590      	push	{r4, r7, lr}
 8009f9c:	b083      	sub	sp, #12
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
    return tos_task_delay(tos_millisec2tick(ms));
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7ff ffbc 	bl	8009f20 <tos_millisec2tick>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	4618      	mov	r0, r3
 8009fae:	4621      	mov	r1, r4
 8009fb0:	f7ff fd38 	bl	8009a24 <tos_task_delay>
 8009fb4:	4603      	mov	r3, r0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd90      	pop	{r4, r7, pc}

08009fbe <_list_add>:
{
 8009fbe:	b480      	push	{r7}
 8009fc0:	b085      	sub	sp, #20
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	607a      	str	r2, [r7, #4]
    next->prev = node;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	605a      	str	r2, [r3, #4]
    node->next = next;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	601a      	str	r2, [r3, #0]
    node->prev = prev;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	605a      	str	r2, [r3, #4]
    prev->next = node;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	601a      	str	r2, [r3, #0]
}
 8009fe2:	bf00      	nop
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <_list_del>:
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	6039      	str	r1, [r7, #0]
    next->prev = prev;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	605a      	str	r2, [r3, #4]
    prev->next = next;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	601a      	str	r2, [r3, #0]
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <tos_list_add_tail>:
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
    _list_add(node, list->prev, list);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff ffcb 	bl	8009fbe <_list_add>
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <tos_list_del>:
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
    _list_del(node->prev, node->next);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4619      	mov	r1, r3
 800a042:	4610      	mov	r0, r2
 800a044:	f7ff ffd3 	bl	8009fee <_list_del>
}
 800a048:	bf00      	nop
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <tos_list_empty>:
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
    return list->next == list;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	429a      	cmp	r2, r3
 800a060:	bf0c      	ite	eq
 800a062:	2301      	moveq	r3, #1
 800a064:	2300      	movne	r3, #0
 800a066:	b2db      	uxtb	r3, r3
}
 800a068:	4618      	mov	r0, r3
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <timer_place>:
#include "tos_k.h"

#if TOS_CFG_TIMER_EN > 0u

__STATIC__ void timer_place(k_timer_t *tmr)
{
 800a074:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 800a07e:	2300      	movs	r3, #0
 800a080:	60bb      	str	r3, [r7, #8]
    k_timer_t *iter = K_NULL;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]

    TOS_CPU_INT_DISABLE();
 800a086:	f7fb fec7 	bl	8005e18 <tos_cpu_cpsr_save>
 800a08a:	60b8      	str	r0, [r7, #8]

    tmr->expires += k_tick_count;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 800a092:	4b20      	ldr	r3, [pc, #128]	; (800a114 <timer_place+0xa0>)
 800a094:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800a098:	eb1b 0301 	adds.w	r3, fp, r1
 800a09c:	eb4c 0402 	adc.w	r4, ip, r2
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	e9c2 3406 	strd	r3, r4, [r2, #24]

    TOS_LIST_FOR_EACH_ENTRY(iter, k_timer_t, list, &k_timer_ctl.list) {
 800a0a6:	4b1c      	ldr	r3, [pc, #112]	; (800a118 <timer_place+0xa4>)
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	3b0c      	subs	r3, #12
 800a0ac:	60fb      	str	r3, [r7, #12]
 800a0ae:	e00d      	b.n	800a0cc <timer_place+0x58>
        if (tmr->expires < iter->expires) {
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a0bc:	42a2      	cmp	r2, r4
 800a0be:	bf08      	it	eq
 800a0c0:	4299      	cmpeq	r1, r3
 800a0c2:	d309      	bcc.n	800a0d8 <timer_place+0x64>
    TOS_LIST_FOR_EACH_ENTRY(iter, k_timer_t, list, &k_timer_ctl.list) {
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	3b0c      	subs	r3, #12
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	330c      	adds	r3, #12
 800a0d0:	4a12      	ldr	r2, [pc, #72]	; (800a11c <timer_place+0xa8>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d1ec      	bne.n	800a0b0 <timer_place+0x3c>
 800a0d6:	e000      	b.n	800a0da <timer_place+0x66>
            break;
 800a0d8:	bf00      	nop
        }
    }
    tos_list_add_tail(&tmr->list, &iter->list);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f103 020c 	add.w	r2, r3, #12
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	330c      	adds	r3, #12
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	f7ff ff92 	bl	800a010 <tos_list_add_tail>

    if (k_timer_ctl.list.next == &tmr->list) {
 800a0ec:	4b0a      	ldr	r3, [pc, #40]	; (800a118 <timer_place+0xa4>)
 800a0ee:	689a      	ldr	r2, [r3, #8]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	330c      	adds	r3, #12
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d105      	bne.n	800a104 <timer_place+0x90>
        // we are the first guy now
        k_timer_ctl.next_expires = tmr->expires;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a0fe:	4a06      	ldr	r2, [pc, #24]	; (800a118 <timer_place+0xa4>)
 800a100:	e9c2 3400 	strd	r3, r4, [r2]
    if (task_state_is_suspended(&k_timer_task)) {
        tos_task_resume(&k_timer_task);
    }
#endif

    TOS_CPU_INT_ENABLE();
 800a104:	68b8      	ldr	r0, [r7, #8]
 800a106:	f7fb fe8e 	bl	8005e26 <tos_cpu_cpsr_restore>
}
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a114:	20000680 	.word	0x20000680
 800a118:	200003c0 	.word	0x200003c0
 800a11c:	200003c8 	.word	0x200003c8

0800a120 <timer_takeoff>:

__STATIC__ void timer_takeoff(k_timer_t *tmr)
{
 800a120:	b590      	push	{r4, r7, lr}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
    TOS_CPU_CPSR_ALLOC();
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]
    k_timer_t *first, *next;

    TOS_CPU_INT_DISABLE();
 800a12c:	f7fb fe74 	bl	8005e18 <tos_cpu_cpsr_save>
 800a130:	6178      	str	r0, [r7, #20]

    first = TOS_LIST_FIRST_ENTRY(&k_timer_ctl.list, k_timer_t, list);
 800a132:	4b19      	ldr	r3, [pc, #100]	; (800a198 <timer_takeoff+0x78>)
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	3b0c      	subs	r3, #12
 800a138:	613b      	str	r3, [r7, #16]

    tos_list_del(&tmr->list);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	330c      	adds	r3, #12
 800a13e:	4618      	mov	r0, r3
 800a140:	f7ff ff76 	bl	800a030 <tos_list_del>

    if (first == tmr) {
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d11e      	bne.n	800a18a <timer_takeoff+0x6a>
        // if the first guy removed, we need to refresh k_timer_ctl.next_expires
        next = TOS_LIST_FIRST_ENTRY_OR_NULL(&tmr->list, k_timer_t, list);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	330c      	adds	r3, #12
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff ff7d 	bl	800a050 <tos_list_empty>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d103      	bne.n	800a164 <timer_takeoff+0x44>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	3b0c      	subs	r3, #12
 800a162:	e000      	b.n	800a166 <timer_takeoff+0x46>
 800a164:	2300      	movs	r3, #0
 800a166:	60fb      	str	r3, [r7, #12]
        if (!next) {
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d107      	bne.n	800a17e <timer_takeoff+0x5e>
            // the only guy removed
            k_timer_ctl.next_expires = TOS_TIME_FOREVER;
 800a16e:	4a0a      	ldr	r2, [pc, #40]	; (800a198 <timer_takeoff+0x78>)
 800a170:	f04f 33ff 	mov.w	r3, #4294967295
 800a174:	f04f 34ff 	mov.w	r4, #4294967295
 800a178:	e9c2 3400 	strd	r3, r4, [r2]
 800a17c:	e005      	b.n	800a18a <timer_takeoff+0x6a>
        } else {
            k_timer_ctl.next_expires = next->expires;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a184:	4a04      	ldr	r2, [pc, #16]	; (800a198 <timer_takeoff+0x78>)
 800a186:	e9c2 3400 	strd	r3, r4, [r2]
        }
    }

    TOS_CPU_INT_ENABLE();
 800a18a:	6978      	ldr	r0, [r7, #20]
 800a18c:	f7fb fe4b 	bl	8005e26 <tos_cpu_cpsr_restore>
}
 800a190:	bf00      	nop
 800a192:	371c      	adds	r7, #28
 800a194:	46bd      	mov	sp, r7
 800a196:	bd90      	pop	{r4, r7, pc}
 800a198:	200003c0 	.word	0x200003c0

0800a19c <timer_update>:
}

#if TOS_CFG_TIMER_AS_PROC > 0u

__KNL__ void timer_update(void)
{
 800a19c:	b590      	push	{r4, r7, lr}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
    k_timer_t *tmr, *tmp;

    if (k_timer_ctl.next_expires > k_tick_count) { // not yet
 800a1a2:	4b27      	ldr	r3, [pc, #156]	; (800a240 <timer_update+0xa4>)
 800a1a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1a8:	4a26      	ldr	r2, [pc, #152]	; (800a244 <timer_update+0xa8>)
 800a1aa:	e9d2 1200 	ldrd	r1, r2, [r2]
 800a1ae:	42a2      	cmp	r2, r4
 800a1b0:	bf08      	it	eq
 800a1b2:	4299      	cmpeq	r1, r3
 800a1b4:	d33f      	bcc.n	800a236 <timer_update+0x9a>
        return;
    }

    tos_knl_sched_lock();
 800a1b6:	f7fe ff49 	bl	800904c <tos_knl_sched_lock>

    TOS_LIST_FOR_EACH_ENTRY_SAFE(tmr, tmp, k_timer_t, list, &k_timer_ctl.list) {
 800a1ba:	4b21      	ldr	r3, [pc, #132]	; (800a240 <timer_update+0xa4>)
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	3b0c      	subs	r3, #12
 800a1c0:	607b      	str	r3, [r7, #4]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	3b0c      	subs	r3, #12
 800a1c8:	603b      	str	r3, [r7, #0]
 800a1ca:	e02a      	b.n	800a222 <timer_update+0x86>
        if (tmr->expires > k_tick_count) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a1d2:	4a1c      	ldr	r2, [pc, #112]	; (800a244 <timer_update+0xa8>)
 800a1d4:	e9d2 1200 	ldrd	r1, r2, [r2]
 800a1d8:	42a2      	cmp	r2, r4
 800a1da:	bf08      	it	eq
 800a1dc:	4299      	cmpeq	r1, r3
 800a1de:	d326      	bcc.n	800a22e <timer_update+0x92>
            break;
        }

        // time's up
        timer_takeoff(tmr);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff9d 	bl	800a120 <timer_takeoff>

        if (tmr->opt == TOS_OPT_TIMER_PERIODIC) {
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d109      	bne.n	800a202 <timer_update+0x66>
            tmr->expires = tmr->period;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	e9c2 3406 	strd	r3, r4, [r2, #24]
            timer_place(tmr);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff ff3a 	bl	800a074 <timer_place>
 800a200:	e003      	b.n	800a20a <timer_update+0x6e>
        } else {
            tmr->state = TIMER_STATE_COMPLETED;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2203      	movs	r2, #3
 800a206:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        }

        (*tmr->cb)(tmr->cb_arg);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	6892      	ldr	r2, [r2, #8]
 800a212:	4610      	mov	r0, r2
 800a214:	4798      	blx	r3
    TOS_LIST_FOR_EACH_ENTRY_SAFE(tmr, tmp, k_timer_t, list, &k_timer_ctl.list) {
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	607b      	str	r3, [r7, #4]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	3b0c      	subs	r3, #12
 800a220:	603b      	str	r3, [r7, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	330c      	adds	r3, #12
 800a226:	4a08      	ldr	r2, [pc, #32]	; (800a248 <timer_update+0xac>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d1cf      	bne.n	800a1cc <timer_update+0x30>
 800a22c:	e000      	b.n	800a230 <timer_update+0x94>
            break;
 800a22e:	bf00      	nop
    }

    tos_knl_sched_unlock();
 800a230:	f7fe ff40 	bl	80090b4 <tos_knl_sched_unlock>
 800a234:	e000      	b.n	800a238 <timer_update+0x9c>
        return;
 800a236:	bf00      	nop
}
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd90      	pop	{r4, r7, pc}
 800a23e:	bf00      	nop
 800a240:	200003c0 	.word	0x200003c0
 800a244:	20000680 	.word	0x20000680
 800a248:	200003c8 	.word	0x200003c8

0800a24c <timer_init>:
}

#endif

__KNL__ k_err_t timer_init(void)
{
 800a24c:	b480      	push	{r7}
 800a24e:	af00      	add	r7, sp, #0
#if TOS_CFG_TIMER_AS_PROC > 0u
    return K_ERR_NONE;
 800a250:	2300      	movs	r3, #0
            k_timer_task_prio,
            k_timer_task_stk_addr,
            k_timer_task_stk_size,
            0);
#endif
}
 800a252:	4618      	mov	r0, r3
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <tos_hal_uart_init>:

iComObjectDef comSim;

static void comSimGotData(void);

__API__ int tos_hal_uart_init(hal_uart_t *uart, hal_uart_port_t port) {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
	if (uart == NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d102      	bne.n	800a274 <tos_hal_uart_init+0x18>
		return -1;
 800a26e:	f04f 33ff 	mov.w	r3, #4294967295
 800a272:	e028      	b.n	800a2c6 <tos_hal_uart_init+0x6a>
	if (port == HAL_UART_PORT_2) {
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	2b02      	cmp	r3, #2
 800a278:	d123      	bne.n	800a2c2 <tos_hal_uart_init+0x66>
		comSim.bitrate = COM_BITRATE_115200;
 800a27a:	4b15      	ldr	r3, [pc, #84]	; (800a2d0 <tos_hal_uart_init+0x74>)
 800a27c:	2204      	movs	r2, #4
 800a27e:	709a      	strb	r2, [r3, #2]
		comSim.bufferLength = 2048;
 800a280:	4b13      	ldr	r3, [pc, #76]	; (800a2d0 <tos_hal_uart_init+0x74>)
 800a282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a286:	609a      	str	r2, [r3, #8]
		comSim.com = COM_1;
 800a288:	4b11      	ldr	r3, [pc, #68]	; (800a2d0 <tos_hal_uart_init+0x74>)
 800a28a:	2201      	movs	r2, #1
 800a28c:	701a      	strb	r2, [r3, #0]
		comSim.priority = 0;
 800a28e:	4b10      	ldr	r3, [pc, #64]	; (800a2d0 <tos_hal_uart_init+0x74>)
 800a290:	2200      	movs	r2, #0
 800a292:	605a      	str	r2, [r3, #4]
//		comSim.xferMode = COM_XFER_STANDARD;
//		comSim.xferMode = COM_XFER_INTERRUPT;
		comSim.xferMode = COM_XFER_DMA;
 800a294:	4b0e      	ldr	r3, [pc, #56]	; (800a2d0 <tos_hal_uart_init+0x74>)
 800a296:	2202      	movs	r2, #2
 800a298:	705a      	strb	r2, [r3, #1]
		comSim.GotFrameFromIrq = comSimGotData;
 800a29a:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <tos_hal_uart_init+0x74>)
 800a29c:	4a0d      	ldr	r2, [pc, #52]	; (800a2d4 <tos_hal_uart_init+0x78>)
 800a29e:	60da      	str	r2, [r3, #12]
//		comSim.GotFrameFromIrq = NULL;
		if (ICOM_SUCCESS != IComConstruct(&comSim)) {
 800a2a0:	480b      	ldr	r0, [pc, #44]	; (800a2d0 <tos_hal_uart_init+0x74>)
 800a2a2:	f7fa fbaf 	bl	8004a04 <IComConstruct>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <tos_hal_uart_init+0x56>
			return -1;
 800a2ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b0:	e009      	b.n	800a2c6 <tos_hal_uart_init+0x6a>
		}
		uart->private_uart = &comSim;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a06      	ldr	r2, [pc, #24]	; (800a2d0 <tos_hal_uart_init+0x74>)
 800a2b6:	605a      	str	r2, [r3, #4]
		IComStart(&comSim);
 800a2b8:	4805      	ldr	r0, [pc, #20]	; (800a2d0 <tos_hal_uart_init+0x74>)
 800a2ba:	f7fa fd9d 	bl	8004df8 <IComStart>
		return 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	e001      	b.n	800a2c6 <tos_hal_uart_init+0x6a>
	}

	return -1;
 800a2c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	2000e718 	.word	0x2000e718
 800a2d4:	0800a365 	.word	0x0800a365

0800a2d8 <tos_hal_uart_write>:

__API__ int tos_hal_uart_write(hal_uart_t *uart, const uint8_t *buf,
		size_t size, uint32_t timeout) {
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
	int res = -1;
 800a2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ea:	617b      	str	r3, [r7, #20]
	if (uart == NULL)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <tos_hal_uart_write+0x1e>
		return res;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	e015      	b.n	800a322 <tos_hal_uart_write+0x4a>
	if (uart->port == HAL_UART_PORT_0) {
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d110      	bne.n	800a320 <tos_hal_uart_write+0x48>
		if (ICOM_SUCCESS != IComTransmit(&comSim, buf, size)) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	b29b      	uxth	r3, r3
 800a302:	461a      	mov	r2, r3
 800a304:	68b9      	ldr	r1, [r7, #8]
 800a306:	4809      	ldr	r0, [pc, #36]	; (800a32c <tos_hal_uart_write+0x54>)
 800a308:	f7fa fdb0 	bl	8004e6c <IComTransmit>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <tos_hal_uart_write+0x40>
			res = -1;
 800a312:	f04f 33ff 	mov.w	r3, #4294967295
 800a316:	617b      	str	r3, [r7, #20]
		}
		res = size;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	617b      	str	r3, [r7, #20]
		return size;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	e000      	b.n	800a322 <tos_hal_uart_write+0x4a>
	}

	return 0;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	2000e718 	.word	0x2000e718

0800a330 <tos_hal_uart_deinit>:
		uint32_t timeout) {

	return 0;
}

__API__ int tos_hal_uart_deinit(hal_uart_t *uart) {
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
	if (uart == NULL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d102      	bne.n	800a344 <tos_hal_uart_deinit+0x14>
		return -1;
 800a33e:	f04f 33ff 	mov.w	r3, #4294967295
 800a342:	e00b      	b.n	800a35c <tos_hal_uart_deinit+0x2c>
	if (ICOM_SUCCESS != IComDestory(uart->private_uart)) {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fa fd27 	bl	8004d9c <IComDestory>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <tos_hal_uart_deinit+0x2a>
		return -1;
 800a354:	f04f 33ff 	mov.w	r3, #4294967295
 800a358:	e000      	b.n	800a35c <tos_hal_uart_deinit+0x2c>
	}

	return 0;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <comSimGotData>:

/**
 * 从sim模块收到数据
 */
static void comSimGotData(void) {
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
	uint8 data;

	while(!IComIsEmpty(&comSim))
 800a36a:	e00c      	b.n	800a386 <comSimGotData+0x22>
	{
		if (IComGetData(&comSim, &data, 1) > 0) {
 800a36c:	1dfb      	adds	r3, r7, #7
 800a36e:	2201      	movs	r2, #1
 800a370:	4619      	mov	r1, r3
 800a372:	480a      	ldr	r0, [pc, #40]	; (800a39c <comSimGotData+0x38>)
 800a374:	f7fa fe1f 	bl	8004fb6 <IComGetData>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <comSimGotData+0x22>
			tos_at_uart_input_byte(data);
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	4618      	mov	r0, r3
 800a382:	f000 ff5f 	bl	800b244 <tos_at_uart_input_byte>
	while(!IComIsEmpty(&comSim))
 800a386:	4805      	ldr	r0, [pc, #20]	; (800a39c <comSimGotData+0x38>)
 800a388:	f7fa fe38 	bl	8004ffc <IComIsEmpty>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0ec      	beq.n	800a36c <comSimGotData+0x8>
		}
	}
}
 800a392:	bf00      	nop
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	2000e718 	.word	0x2000e718

0800a3a0 <pm_init>:

    return K_ERR_NONE;
}

__KNL__ void pm_init(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
    memset(&k_pm_device_ctl, 0, sizeof(k_pm_device_ctl));
 800a3a4:	222c      	movs	r2, #44	; 0x2c
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	4803      	ldr	r0, [pc, #12]	; (800a3b8 <pm_init+0x18>)
 800a3aa:	f001 f8c6 	bl	800b53a <memset>
    k_pm_device_ctl.count = 0u;
 800a3ae:	4b02      	ldr	r3, [pc, #8]	; (800a3b8 <pm_init+0x18>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	701a      	strb	r2, [r3, #0]
}
 800a3b4:	bf00      	nop
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	20000694 	.word	0x20000694

0800a3bc <pm_cpu_sleep_mode_enter>:

__STATIC_INLINE__ void pm_cpu_sleep_mode_enter(void)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	af00      	add	r7, sp, #0
    cpu_sleep_mode_enter();
 800a3c0:	f7fb fd7a 	bl	8005eb8 <cpu_sleep_mode_enter>
}
 800a3c4:	bf00      	nop
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <pm_idle_pwr_mgr_mode_is_sleep>:
{
    k_idle_pwr_mgr_mode = idle_pwrmgr_mode;
}

__KNL__ int pm_idle_pwr_mgr_mode_is_sleep(void)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	af00      	add	r7, sp, #0
    return k_idle_pwr_mgr_mode == IDLE_POWER_MANAGER_MODE_SLEEP;
 800a3cc:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <pm_idle_pwr_mgr_mode_is_sleep+0x1c>)
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	bf0c      	ite	eq
 800a3d4:	2301      	moveq	r3, #1
 800a3d6:	2300      	movne	r3, #0
 800a3d8:	b2db      	uxtb	r3, r3
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	200006c0 	.word	0x200006c0

0800a3e8 <pm_power_manager>:
{
    return k_idle_pwr_mgr_mode == IDLE_POWER_MANAGER_MODE_TICKLESS;
}

__KNL__ void pm_power_manager(void)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0
    if (pm_idle_pwr_mgr_mode_is_sleep()) {
 800a3ec:	f7ff ffec 	bl	800a3c8 <pm_idle_pwr_mgr_mode_is_sleep>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <pm_power_manager+0x12>
        pm_cpu_sleep_mode_enter();
 800a3f6:	f7ff ffe1 	bl	800a3bc <pm_cpu_sleep_mode_enter>
#if TOS_CFG_TICKLESS_EN > 0u
    else if (pm_idle_pwr_mgr_mode_is_tickless()) {
        tickless_proc();
    }
#endif
}
 800a3fa:	bf00      	nop
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <tos_at_global_lock_pend>:
__STATIC__ at_agent_t at_agent;

__STATIC__ k_stack_t at_parser_task_stack[AT_PARSER_TASK_STACK_SIZE];

__API__ int tos_at_global_lock_pend(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	af00      	add	r7, sp, #0
    if (tos_mutex_pend(&AT_AGENT->global_lock) != K_ERR_NONE) {
 800a404:	4805      	ldr	r0, [pc, #20]	; (800a41c <tos_at_global_lock_pend+0x1c>)
 800a406:	f7fd fb63 	bl	8007ad0 <tos_mutex_pend>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <tos_at_global_lock_pend+0x16>
        return -1;
 800a410:	f04f 33ff 	mov.w	r3, #4294967295
 800a414:	e000      	b.n	800a418 <tos_at_global_lock_pend+0x18>
    }
    return 0;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	20000960 	.word	0x20000960

0800a420 <tos_at_global_lock_post>:

__API__ int tos_at_global_lock_post(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
    if (tos_mutex_post(&AT_AGENT->global_lock) != K_ERR_NONE) {
 800a424:	4805      	ldr	r0, [pc, #20]	; (800a43c <tos_at_global_lock_post+0x1c>)
 800a426:	f7fd fb63 	bl	8007af0 <tos_mutex_post>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <tos_at_global_lock_post+0x16>
        return -1;
 800a430:	f04f 33ff 	mov.w	r3, #4294967295
 800a434:	e000      	b.n	800a438 <tos_at_global_lock_post+0x18>
    }
    return 0;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20000960 	.word	0x20000960

0800a440 <at_uart_getchar>:

__STATIC__ int at_uart_getchar(uint8_t *data, k_tick_t timeout)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	e9c7 2300 	strd	r2, r3, [r7]
    k_err_t err;

    tos_stopwatch_delay(1);
 800a44c:	f04f 0001 	mov.w	r0, #1
 800a450:	f04f 0100 	mov.w	r1, #0
 800a454:	f7fe fcd1 	bl	8008dfa <tos_stopwatch_delay>

    if (tos_sem_pend(&AT_AGENT->uart_rx_sem, timeout) != K_ERR_NONE) {
 800a458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45c:	4812      	ldr	r0, [pc, #72]	; (800a4a8 <at_uart_getchar+0x68>)
 800a45e:	f7fe fbe7 	bl	8008c30 <tos_sem_pend>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <at_uart_getchar+0x2e>
        return -1;
 800a468:	f04f 33ff 	mov.w	r3, #4294967295
 800a46c:	e018      	b.n	800a4a0 <at_uart_getchar+0x60>
    }

    if (tos_mutex_pend(&AT_AGENT->uart_rx_lock) != K_ERR_NONE) {
 800a46e:	480f      	ldr	r0, [pc, #60]	; (800a4ac <at_uart_getchar+0x6c>)
 800a470:	f7fd fb2e 	bl	8007ad0 <tos_mutex_pend>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <at_uart_getchar+0x40>
        return -1;
 800a47a:	f04f 33ff 	mov.w	r3, #4294967295
 800a47e:	e00f      	b.n	800a4a0 <at_uart_getchar+0x60>
    }

    err = tos_chr_fifo_pop(&AT_AGENT->uart_rx_fifo, data);
 800a480:	68f9      	ldr	r1, [r7, #12]
 800a482:	480b      	ldr	r0, [pc, #44]	; (800a4b0 <at_uart_getchar+0x70>)
 800a484:	f7fc fb84 	bl	8006b90 <tos_chr_fifo_pop>
 800a488:	4603      	mov	r3, r0
 800a48a:	82fb      	strh	r3, [r7, #22]

    tos_mutex_post(&AT_AGENT->uart_rx_lock);
 800a48c:	4807      	ldr	r0, [pc, #28]	; (800a4ac <at_uart_getchar+0x6c>)
 800a48e:	f7fd fb2f 	bl	8007af0 <tos_mutex_post>

    return err == K_ERR_NONE ? 0 : -1;
 800a492:	8afb      	ldrh	r3, [r7, #22]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <at_uart_getchar+0x5c>
 800a498:	2300      	movs	r3, #0
 800a49a:	e001      	b.n	800a4a0 <at_uart_getchar+0x60>
 800a49c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3718      	adds	r7, #24
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	200009ec 	.word	0x200009ec
 800a4ac:	200009cc 	.word	0x200009cc
 800a4b0:	200009fc 	.word	0x200009fc

0800a4b4 <at_event_do_get>:

__STATIC__ at_event_t *at_event_do_get(char *buffer, size_t buffer_len)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b088      	sub	sp, #32
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
    int i = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	61fb      	str	r3, [r7, #28]
    at_event_t *event_table = K_NULL, *event = K_NULL;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	61bb      	str	r3, [r7, #24]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	617b      	str	r3, [r7, #20]
    size_t event_table_size = 0, event_len;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	613b      	str	r3, [r7, #16]

    event_table         = AT_AGENT->event_table;
 800a4ce:	4b19      	ldr	r3, [pc, #100]	; (800a534 <at_event_do_get+0x80>)
 800a4d0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800a4d4:	61bb      	str	r3, [r7, #24]
    event_table_size    = AT_AGENT->event_table_size;
 800a4d6:	4b17      	ldr	r3, [pc, #92]	; (800a534 <at_event_do_get+0x80>)
 800a4d8:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800a4dc:	613b      	str	r3, [r7, #16]

    for (i = 0; i < event_table_size; ++i) {
 800a4de:	2300      	movs	r3, #0
 800a4e0:	61fb      	str	r3, [r7, #28]
 800a4e2:	e01e      	b.n	800a522 <at_event_do_get+0x6e>
        event = &event_table[i];
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	617b      	str	r3, [r7, #20]
        event_len = strlen(event->event_header);
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7f5 fedc 	bl	80002b0 <strlen>
 800a4f8:	60f8      	str	r0, [r7, #12]

        if (buffer_len < event_len) {
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d30b      	bcc.n	800a51a <at_event_do_get+0x66>
            continue;
        }

        if (strncmp(event->event_header, buffer, event_len) == 0) {
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f001 f84a 	bl	800b5a4 <strncmp>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d102      	bne.n	800a51c <at_event_do_get+0x68>
            return event;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	e008      	b.n	800a52c <at_event_do_get+0x78>
            continue;
 800a51a:	bf00      	nop
    for (i = 0; i < event_table_size; ++i) {
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	3301      	adds	r3, #1
 800a520:	61fb      	str	r3, [r7, #28]
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	429a      	cmp	r2, r3
 800a528:	d8dc      	bhi.n	800a4e4 <at_event_do_get+0x30>
        }
    }

    return K_NULL;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3720      	adds	r7, #32
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	200006c8 	.word	0x200006c8

0800a538 <at_get_event>:

__STATIC__ at_event_t *at_get_event(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
    char *buffer;
    size_t buffer_len;
    at_cache_t *at_cache = K_NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	60fb      	str	r3, [r7, #12]

    at_cache = &AT_AGENT->recv_cache;
 800a542:	4b08      	ldr	r3, [pc, #32]	; (800a564 <at_get_event+0x2c>)
 800a544:	60fb      	str	r3, [r7, #12]

    buffer = (char *)at_cache->buffer;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60bb      	str	r3, [r7, #8]
    buffer_len = at_cache->recv_len;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	607b      	str	r3, [r7, #4]

    return at_event_do_get(buffer, buffer_len);
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	68b8      	ldr	r0, [r7, #8]
 800a556:	f7ff ffad 	bl	800a4b4 <at_event_do_get>
 800a55a:	4603      	mov	r3, r0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20000940 	.word	0x20000940

0800a568 <tos_at_uart_read>:

__API__ int tos_at_uart_read(uint8_t *buffer, size_t buffer_len)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
    uint8_t data;
    size_t read_len = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	60fb      	str	r3, [r7, #12]

    while (K_TRUE) {
        if (at_uart_getchar(&data, TOS_TIME_FOREVER) != 0) {
 800a576:	f107 010b 	add.w	r1, r7, #11
 800a57a:	f04f 32ff 	mov.w	r2, #4294967295
 800a57e:	f04f 33ff 	mov.w	r3, #4294967295
 800a582:	4608      	mov	r0, r1
 800a584:	f7ff ff5c 	bl	800a440 <at_uart_getchar>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <tos_at_uart_read+0x2a>
            return read_len;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	e00b      	b.n	800a5aa <tos_at_uart_read+0x42>
        }

        buffer[read_len++] = data;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	60fa      	str	r2, [r7, #12]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	4413      	add	r3, r2
 800a59c:	7afa      	ldrb	r2, [r7, #11]
 800a59e:	701a      	strb	r2, [r3, #0]

        if (read_len == buffer_len) {
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d1e6      	bne.n	800a576 <tos_at_uart_read+0xe>
            return buffer_len;
 800a5a8:	683b      	ldr	r3, [r7, #0]
        }
    }
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
	...

0800a5b4 <at_is_echo_expect>:
        }
    }
}

__STATIC__ int at_is_echo_expect(void)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af00      	add	r7, sp, #0
    char *recv_buffer, *expect;
    size_t recv_buffer_len, expect_len;
    at_echo_t *at_echo = K_NULL;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	617b      	str	r3, [r7, #20]
    at_cache_t *at_cache = K_NULL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	613b      	str	r3, [r7, #16]

    at_echo = AT_AGENT->echo;
 800a5c2:	4b20      	ldr	r3, [pc, #128]	; (800a644 <at_is_echo_expect+0x90>)
 800a5c4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800a5c8:	617b      	str	r3, [r7, #20]

    if (!at_echo || !at_echo->echo_expect) {
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d003      	beq.n	800a5d8 <at_is_echo_expect+0x24>
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <at_is_echo_expect+0x28>
        return 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e02f      	b.n	800a63c <at_is_echo_expect+0x88>
    }

    at_cache = &AT_AGENT->recv_cache;
 800a5dc:	4b1a      	ldr	r3, [pc, #104]	; (800a648 <at_is_echo_expect+0x94>)
 800a5de:	613b      	str	r3, [r7, #16]

    recv_buffer = (char *)at_cache->buffer;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	60fb      	str	r3, [r7, #12]
    recv_buffer_len = at_cache->recv_len;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	60bb      	str	r3, [r7, #8]

    expect = at_echo->echo_expect;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	607b      	str	r3, [r7, #4]
    expect_len = strlen(expect);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7f5 fe5c 	bl	80002b0 <strlen>
 800a5f8:	6038      	str	r0, [r7, #0]

    if (recv_buffer_len < expect_len) {
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d201      	bcs.n	800a606 <at_is_echo_expect+0x52>
        return 0;
 800a602:	2300      	movs	r3, #0
 800a604:	e01a      	b.n	800a63c <at_is_echo_expect+0x88>
    }

    if (at_echo->__is_fuzzy_match) {
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00b      	beq.n	800a626 <at_is_echo_expect+0x72>
        if (strstr(recv_buffer, expect) != NULL) {
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 ffee 	bl	800b5f2 <strstr>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <at_is_echo_expect+0x6c>
            return 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	e00d      	b.n	800a63c <at_is_echo_expect+0x88>
        }
        return -1;
 800a620:	f04f 33ff 	mov.w	r3, #4294967295
 800a624:	e00a      	b.n	800a63c <at_is_echo_expect+0x88>
    }

    if (strncmp(expect, recv_buffer, expect_len) == 0) {
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	68f9      	ldr	r1, [r7, #12]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 ffba 	bl	800b5a4 <strncmp>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d101      	bne.n	800a63a <at_is_echo_expect+0x86>
        return 1;
 800a636:	2301      	movs	r3, #1
 800a638:	e000      	b.n	800a63c <at_is_echo_expect+0x88>
    }

    return 0;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	200006c8 	.word	0x200006c8
 800a648:	20000940 	.word	0x20000940

0800a64c <at_uart_line_parse>:

__STATIC__ at_parse_status_t at_uart_line_parse(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
    size_t curr_len = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	60fb      	str	r3, [r7, #12]
    uint8_t data, last_data = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	72fb      	strb	r3, [r7, #11]
    at_cache_t *recv_cache = K_NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	607b      	str	r3, [r7, #4]

    recv_cache = &AT_AGENT->recv_cache;
 800a65e:	4b37      	ldr	r3, [pc, #220]	; (800a73c <at_uart_line_parse+0xf0>)
 800a660:	607b      	str	r3, [r7, #4]

    recv_cache->recv_len = 0;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	609a      	str	r2, [r3, #8]
    memset(recv_cache->buffer, 0, recv_cache->buffer_size);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6818      	ldr	r0, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	461a      	mov	r2, r3
 800a672:	2100      	movs	r1, #0
 800a674:	f000 ff61 	bl	800b53a <memset>

    while (K_TRUE) {
        if (at_uart_getchar(&data, TOS_TIME_FOREVER) != 0) {
 800a678:	1cf9      	adds	r1, r7, #3
 800a67a:	f04f 32ff 	mov.w	r2, #4294967295
 800a67e:	f04f 33ff 	mov.w	r3, #4294967295
 800a682:	4608      	mov	r0, r1
 800a684:	f7ff fedc 	bl	800a440 <at_uart_getchar>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d14e      	bne.n	800a72c <at_uart_line_parse+0xe0>
            continue;
        }

        if (data == '\0') {
 800a68e:	78fb      	ldrb	r3, [r7, #3]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d04d      	beq.n	800a730 <at_uart_line_parse+0xe4>
            continue;
        }

        if (curr_len < recv_cache->buffer_size) {
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d210      	bcs.n	800a6c0 <at_uart_line_parse+0x74>
            recv_cache->buffer[curr_len++] = data;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	1c59      	adds	r1, r3, #1
 800a6a6:	60f9      	str	r1, [r7, #12]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	78fa      	ldrb	r2, [r7, #3]
 800a6ac:	701a      	strb	r2, [r3, #0]
            recv_cache->recv_len = curr_len;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	609a      	str	r2, [r3, #8]
        } else {
            recv_cache->buffer[recv_cache->buffer_size - 1] = '\0';
            return AT_PARSE_STATUS_OVERFLOW;
        }

        if (at_get_event() != K_NULL) {
 800a6b4:	f7ff ff40 	bl	800a538 <at_get_event>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00c      	beq.n	800a6d8 <at_uart_line_parse+0x8c>
 800a6be:	e009      	b.n	800a6d4 <at_uart_line_parse+0x88>
            recv_cache->buffer[recv_cache->buffer_size - 1] = '\0';
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	4413      	add	r3, r2
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	701a      	strb	r2, [r3, #0]
            return AT_PARSE_STATUS_OVERFLOW;
 800a6d0:	2304      	movs	r3, #4
 800a6d2:	e02f      	b.n	800a734 <at_uart_line_parse+0xe8>
            return AT_PARSE_STATUS_EVENT;
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	e02d      	b.n	800a734 <at_uart_line_parse+0xe8>
        }

        if (at_is_echo_expect()) {
 800a6d8:	f7ff ff6c 	bl	800a5b4 <at_is_echo_expect>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <at_uart_line_parse+0x9a>
            return AT_PARSE_STATUS_EXPECT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e026      	b.n	800a734 <at_uart_line_parse+0xe8>
        }

        if (data == '\n' && last_data == '\r') { // 0xd 0xa
 800a6e6:	78fb      	ldrb	r3, [r7, #3]
 800a6e8:	2b0a      	cmp	r3, #10
 800a6ea:	d11c      	bne.n	800a726 <at_uart_line_parse+0xda>
 800a6ec:	7afb      	ldrb	r3, [r7, #11]
 800a6ee:	2b0d      	cmp	r3, #13
 800a6f0:	d119      	bne.n	800a726 <at_uart_line_parse+0xda>
            curr_len -= 1;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	60fb      	str	r3, [r7, #12]
            recv_cache->buffer[curr_len - 1] = '\n';
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	4413      	add	r3, r2
 800a702:	220a      	movs	r2, #10
 800a704:	701a      	strb	r2, [r3, #0]
            recv_cache->recv_len = curr_len;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	609a      	str	r2, [r3, #8]

            if (curr_len == 1) { // only a blank newline, ignore
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d107      	bne.n	800a722 <at_uart_line_parse+0xd6>
                last_data = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	72fb      	strb	r3, [r7, #11]
                curr_len = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
                recv_cache->recv_len = 0;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	609a      	str	r2, [r3, #8]
                continue;
 800a720:	e007      	b.n	800a732 <at_uart_line_parse+0xe6>
            }

            return AT_PARSE_STATUS_NEWLINE;
 800a722:	2301      	movs	r3, #1
 800a724:	e006      	b.n	800a734 <at_uart_line_parse+0xe8>
        }

        last_data = data;
 800a726:	78fb      	ldrb	r3, [r7, #3]
 800a728:	72fb      	strb	r3, [r7, #11]
 800a72a:	e7a5      	b.n	800a678 <at_uart_line_parse+0x2c>
            continue;
 800a72c:	bf00      	nop
 800a72e:	e7a3      	b.n	800a678 <at_uart_line_parse+0x2c>
            continue;
 800a730:	bf00      	nop
        if (at_uart_getchar(&data, TOS_TIME_FOREVER) != 0) {
 800a732:	e7a1      	b.n	800a678 <at_uart_line_parse+0x2c>
    }
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	20000940 	.word	0x20000940

0800a740 <at_echo_status_set>:

__STATIC__ void at_echo_status_set(at_echo_t *echo)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
    char *buffer;
    at_cache_t *at_cache;

    at_cache = &AT_AGENT->recv_cache;
 800a748:	4b14      	ldr	r3, [pc, #80]	; (800a79c <at_echo_status_set+0x5c>)
 800a74a:	60fb      	str	r3, [r7, #12]

    buffer = (char *)at_cache->buffer;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60bb      	str	r3, [r7, #8]

    if (strstr(buffer, AT_AGENT_ECHO_OK) != K_NULL) {
 800a752:	4913      	ldr	r1, [pc, #76]	; (800a7a0 <at_echo_status_set+0x60>)
 800a754:	68b8      	ldr	r0, [r7, #8]
 800a756:	f000 ff4c 	bl	800b5f2 <strstr>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d003      	beq.n	800a768 <at_echo_status_set+0x28>
        echo->status = AT_ECHO_STATUS_OK;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	741a      	strb	r2, [r3, #16]
    } else if (strstr(buffer, AT_AGENT_ECHO_ERROR) != K_NULL) {
        echo->status = AT_ECHO_STATUS_ERROR;
    } else if (strstr(buffer, AT_AGENT_ECHO_FAIL) != K_NULL) {
        echo->status = AT_ECHO_STATUS_FAIL;
    }
}
 800a766:	e014      	b.n	800a792 <at_echo_status_set+0x52>
    } else if (strstr(buffer, AT_AGENT_ECHO_ERROR) != K_NULL) {
 800a768:	490e      	ldr	r1, [pc, #56]	; (800a7a4 <at_echo_status_set+0x64>)
 800a76a:	68b8      	ldr	r0, [r7, #8]
 800a76c:	f000 ff41 	bl	800b5f2 <strstr>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <at_echo_status_set+0x3e>
        echo->status = AT_ECHO_STATUS_ERROR;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2203      	movs	r2, #3
 800a77a:	741a      	strb	r2, [r3, #16]
}
 800a77c:	e009      	b.n	800a792 <at_echo_status_set+0x52>
    } else if (strstr(buffer, AT_AGENT_ECHO_FAIL) != K_NULL) {
 800a77e:	490a      	ldr	r1, [pc, #40]	; (800a7a8 <at_echo_status_set+0x68>)
 800a780:	68b8      	ldr	r0, [r7, #8]
 800a782:	f000 ff36 	bl	800b5f2 <strstr>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <at_echo_status_set+0x52>
        echo->status = AT_ECHO_STATUS_FAIL;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	741a      	strb	r2, [r3, #16]
}
 800a792:	bf00      	nop
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20000940 	.word	0x20000940
 800a7a0:	0800cd44 	.word	0x0800cd44
 800a7a4:	0800cd48 	.word	0x0800cd48
 800a7a8:	0800cd50 	.word	0x0800cd50

0800a7ac <at_echo_buffer_copy>:

__STATIC__ void at_echo_buffer_copy(at_cache_t *at_cache, at_echo_t *echo)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
    uint8_t *recv_buffer = K_NULL;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	617b      	str	r3, [r7, #20]
    size_t recv_buffer_len, copy_len, remain_len;

    recv_buffer = at_cache->buffer;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	617b      	str	r3, [r7, #20]
    recv_buffer_len = at_cache->recv_len;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	613b      	str	r3, [r7, #16]

    remain_len = echo->buffer_size - echo->__w_idx;
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	60fb      	str	r3, [r7, #12]
    if (remain_len == 0) {
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01b      	beq.n	800a810 <at_echo_buffer_copy+0x64>
        return;
    }

    copy_len = remain_len < recv_buffer_len ? remain_len : recv_buffer_len;
 800a7d8:	693a      	ldr	r2, [r7, #16]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	bf28      	it	cs
 800a7e0:	4613      	movcs	r3, r2
 800a7e2:	60bb      	str	r3, [r7, #8]
    memcpy(echo->buffer + echo->__w_idx, recv_buffer, copy_len);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	6979      	ldr	r1, [r7, #20]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 fe96 	bl	800b524 <memcpy>
    echo->__w_idx += copy_len;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	695a      	ldr	r2, [r3, #20]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	441a      	add	r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	615a      	str	r2, [r3, #20]

    ++echo->line_num;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	60da      	str	r2, [r3, #12]
 800a80e:	e000      	b.n	800a812 <at_echo_buffer_copy+0x66>
        return;
 800a810:	bf00      	nop
}
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <at_parser>:

__STATIC__ void at_parser(void *arg)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
    at_echo_t *at_echo = K_NULL;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
    at_event_t *at_event = K_NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	613b      	str	r3, [r7, #16]
    at_cache_t *recv_cache = K_NULL;
 800a828:	2300      	movs	r3, #0
 800a82a:	60fb      	str	r3, [r7, #12]
    at_parse_status_t at_parse_status;

    recv_cache = &AT_AGENT->recv_cache;
 800a82c:	4b2d      	ldr	r3, [pc, #180]	; (800a8e4 <at_parser+0xcc>)
 800a82e:	60fb      	str	r3, [r7, #12]

    while (K_TRUE) {
        at_parse_status = at_uart_line_parse();
 800a830:	f7ff ff0c 	bl	800a64c <at_uart_line_parse>
 800a834:	4603      	mov	r3, r0
 800a836:	72fb      	strb	r3, [r7, #11]

        if (at_parse_status == AT_PARSE_STATUS_OVERFLOW) {
 800a838:	7afb      	ldrb	r3, [r7, #11]
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	d108      	bne.n	800a850 <at_parser+0x38>
            tos_kprintln("AT parse overflow!");
 800a83e:	492a      	ldr	r1, [pc, #168]	; (800a8e8 <at_parser+0xd0>)
 800a840:	2001      	movs	r0, #1
 800a842:	f7fa fcbb 	bl	80051bc <iDebugPrint>
 800a846:	4929      	ldr	r1, [pc, #164]	; (800a8ec <at_parser+0xd4>)
 800a848:	2001      	movs	r0, #1
 800a84a:	f7fa fcb7 	bl	80051bc <iDebugPrint>
            continue;
 800a84e:	e048      	b.n	800a8e2 <at_parser+0xca>
        }

        if (at_parse_status == AT_PARSE_STATUS_EVENT) {
 800a850:	7afb      	ldrb	r3, [r7, #11]
 800a852:	2b02      	cmp	r3, #2
 800a854:	d10d      	bne.n	800a872 <at_parser+0x5a>
            at_event = at_get_event();
 800a856:	f7ff fe6f 	bl	800a538 <at_get_event>
 800a85a:	6138      	str	r0, [r7, #16]
            if (at_event && at_event->event_callback) {
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d03c      	beq.n	800a8dc <at_parser+0xc4>
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d038      	beq.n	800a8dc <at_parser+0xc4>
                at_event->event_callback();
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	4798      	blx	r3
            }
            continue;
 800a870:	e034      	b.n	800a8dc <at_parser+0xc4>
        }

        at_echo = AT_AGENT->echo;
 800a872:	4b1f      	ldr	r3, [pc, #124]	; (800a8f0 <at_parser+0xd8>)
 800a874:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800a878:	617b      	str	r3, [r7, #20]
        if (!at_echo) {
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d02f      	beq.n	800a8e0 <at_parser+0xc8>
            continue;
        }

        if (at_parse_status == AT_PARSE_STATUS_EXPECT) {
 800a880:	7afb      	ldrb	r3, [r7, #11]
 800a882:	2b03      	cmp	r3, #3
 800a884:	d10c      	bne.n	800a8a0 <at_parser+0x88>
            at_echo->status = AT_ECHO_STATUS_EXPECT;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2204      	movs	r2, #4
 800a88a:	741a      	strb	r2, [r3, #16]
            if (at_echo->__is_expecting) {
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00f      	beq.n	800a8b4 <at_parser+0x9c>
                tos_sem_post(&at_echo->__expect_notify);
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	331c      	adds	r3, #28
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe f9bb 	bl	8008c14 <tos_sem_post>
 800a89e:	e009      	b.n	800a8b4 <at_parser+0x9c>
            }
        } else if (at_parse_status == AT_PARSE_STATUS_NEWLINE &&
 800a8a0:	7afb      	ldrb	r3, [r7, #11]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d106      	bne.n	800a8b4 <at_parser+0x9c>
                    at_echo->status == AT_ECHO_STATUS_NONE) {
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	7c1b      	ldrb	r3, [r3, #16]
        } else if (at_parse_status == AT_PARSE_STATUS_NEWLINE &&
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d102      	bne.n	800a8b4 <at_parser+0x9c>
            at_echo_status_set(at_echo);
 800a8ae:	6978      	ldr	r0, [r7, #20]
 800a8b0:	f7ff ff46 	bl	800a740 <at_echo_status_set>
        }

        if (at_echo->buffer) {
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <at_parser+0xac>
            at_echo_buffer_copy(recv_cache, at_echo);
 800a8bc:	6979      	ldr	r1, [r7, #20]
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7ff ff74 	bl	800a7ac <at_echo_buffer_copy>
        }

        tos_kprintln("--->%s", recv_cache->buffer);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	490a      	ldr	r1, [pc, #40]	; (800a8f4 <at_parser+0xdc>)
 800a8cc:	2001      	movs	r0, #1
 800a8ce:	f7fa fc75 	bl	80051bc <iDebugPrint>
 800a8d2:	4906      	ldr	r1, [pc, #24]	; (800a8ec <at_parser+0xd4>)
 800a8d4:	2001      	movs	r0, #1
 800a8d6:	f7fa fc71 	bl	80051bc <iDebugPrint>
 800a8da:	e7a9      	b.n	800a830 <at_parser+0x18>
            continue;
 800a8dc:	bf00      	nop
 800a8de:	e7a7      	b.n	800a830 <at_parser+0x18>
            continue;
 800a8e0:	bf00      	nop
        at_parse_status = at_uart_line_parse();
 800a8e2:	e7a5      	b.n	800a830 <at_parser+0x18>
 800a8e4:	20000940 	.word	0x20000940
 800a8e8:	0800cd58 	.word	0x0800cd58
 800a8ec:	0800cd6c 	.word	0x0800cd6c
 800a8f0:	200006c8 	.word	0x200006c8
 800a8f4:	0800cd70 	.word	0x0800cd70

0800a8f8 <at_uart_send>:
    }
}

__STATIC__ int at_uart_send(const uint8_t *buf, size_t size, uint32_t timeout)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
    int ret;

    tos_mutex_pend(&AT_AGENT->uart_tx_lock);
 800a904:	4808      	ldr	r0, [pc, #32]	; (800a928 <at_uart_send+0x30>)
 800a906:	f7fd f8e3 	bl	8007ad0 <tos_mutex_pend>
    ret = tos_hal_uart_write(&AT_AGENT->uart, buf, size, timeout);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	68f9      	ldr	r1, [r7, #12]
 800a910:	4806      	ldr	r0, [pc, #24]	; (800a92c <at_uart_send+0x34>)
 800a912:	f7ff fce1 	bl	800a2d8 <tos_hal_uart_write>
 800a916:	6178      	str	r0, [r7, #20]
    tos_mutex_post(&AT_AGENT->uart_tx_lock);
 800a918:	4803      	ldr	r0, [pc, #12]	; (800a928 <at_uart_send+0x30>)
 800a91a:	f7fd f8e9 	bl	8007af0 <tos_mutex_post>

    return ret;
 800a91e:	697b      	ldr	r3, [r7, #20]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	200009ac 	.word	0x200009ac
 800a92c:	200009a4 	.word	0x200009a4

0800a930 <tos_at_echo_create>:

__API__ int tos_at_echo_create(at_echo_t *echo, char *buffer, size_t buffer_size, char *echo_expect)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]
    if (!echo) {
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d102      	bne.n	800a94a <tos_at_echo_create+0x1a>
        return -1;
 800a944:	f04f 33ff 	mov.w	r3, #4294967295
 800a948:	e020      	b.n	800a98c <tos_at_echo_create+0x5c>
    }

    if (buffer) {
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <tos_at_echo_create+0x2a>
        memset(buffer, 0, buffer_size);
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	2100      	movs	r1, #0
 800a954:	68b8      	ldr	r0, [r7, #8]
 800a956:	f000 fdf0 	bl	800b53a <memset>
    }

    echo->buffer            = buffer;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	601a      	str	r2, [r3, #0]
    echo->buffer_size       = buffer_size;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	605a      	str	r2, [r3, #4]
    echo->echo_expect       = echo_expect;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	609a      	str	r2, [r3, #8]
    echo->line_num          = 0;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	60da      	str	r2, [r3, #12]
    echo->status            = AT_ECHO_STATUS_NONE;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	741a      	strb	r2, [r3, #16]
    echo->__w_idx           = 0;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	615a      	str	r2, [r3, #20]
    echo->__is_expecting    = K_FALSE;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	619a      	str	r2, [r3, #24]
    echo->__is_fuzzy_match  = K_FALSE;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	62da      	str	r2, [r3, #44]	; 0x2c
    return 0;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <at_echo_flush>:
    echo->__is_fuzzy_match  = K_TRUE;
    return 0;
}

__STATIC_INLINE__ void at_echo_flush(at_echo_t *echo)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
    echo->line_num  = 0;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	60da      	str	r2, [r3, #12]
    echo->status    = AT_ECHO_STATUS_NONE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	741a      	strb	r2, [r3, #16]
    echo->__w_idx   = 0;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	615a      	str	r2, [r3, #20]
}
 800a9ae:	bf00      	nop
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
	...

0800a9bc <at_echo_attach>:

__STATIC_INLINE__ void at_echo_attach(at_echo_t *echo)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
    at_echo_flush(echo);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff ffe5 	bl	800a994 <at_echo_flush>
    AT_AGENT->echo = echo;
 800a9ca:	4a04      	ldr	r2, [pc, #16]	; (800a9dc <at_echo_attach+0x20>)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8c2 31e8 	str.w	r3, [r2, #488]	; 0x1e8
}
 800a9d2:	bf00      	nop
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	200006c8 	.word	0x200006c8

0800a9e0 <tos_at_raw_data_send_until>:

    return ret;
}

__API__ int tos_at_raw_data_send_until(at_echo_t *echo, uint32_t timeout, const uint8_t *buf, size_t size)
{
 800a9e0:	b590      	push	{r4, r7, lr}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	617b      	str	r3, [r7, #20]

    if (!echo || !echo->echo_expect) {
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d003      	beq.n	800aa00 <tos_at_raw_data_send_until+0x20>
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <tos_at_raw_data_send_until+0x26>
        return -1;
 800aa00:	f04f 33ff 	mov.w	r3, #4294967295
 800aa04:	e033      	b.n	800aa6e <tos_at_raw_data_send_until+0x8e>
    }

    if (tos_sem_create(&echo->__expect_notify, 0) != K_ERR_NONE) {
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	331c      	adds	r3, #28
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fe f864 	bl	8008ada <tos_sem_create>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <tos_at_raw_data_send_until+0x3e>
        return -1;
 800aa18:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1c:	e027      	b.n	800aa6e <tos_at_raw_data_send_until+0x8e>
    }
    echo->__is_expecting = K_TRUE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2201      	movs	r2, #1
 800aa22:	619a      	str	r2, [r3, #24]
    at_echo_attach(echo);
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f7ff ffc9 	bl	800a9bc <at_echo_attach>

    ret = at_uart_send(buf, size, 0xFFFF);
 800aa2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff ff61 	bl	800a8f8 <at_uart_send>
 800aa36:	6178      	str	r0, [r7, #20]

    if (tos_sem_pend(&echo->__expect_notify, tos_millisec2tick(timeout)) != K_ERR_NONE) {
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f103 041c 	add.w	r4, r3, #28
 800aa3e:	68b8      	ldr	r0, [r7, #8]
 800aa40:	f7ff fa6e 	bl	8009f20 <tos_millisec2tick>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f7fe f8f1 	bl	8008c30 <tos_sem_pend>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d002      	beq.n	800aa5a <tos_at_raw_data_send_until+0x7a>
        ret = -1;
 800aa54:	f04f 33ff 	mov.w	r3, #4294967295
 800aa58:	617b      	str	r3, [r7, #20]
    }

    tos_sem_destroy(&echo->__expect_notify);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	331c      	adds	r3, #28
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fe f84d 	bl	8008afe <tos_sem_destroy>

    AT_AGENT->echo = K_NULL;
 800aa64:	4b04      	ldr	r3, [pc, #16]	; (800aa78 <tos_at_raw_data_send_until+0x98>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

    return ret;
 800aa6c:	697b      	ldr	r3, [r7, #20]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	371c      	adds	r7, #28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd90      	pop	{r4, r7, pc}
 800aa76:	bf00      	nop
 800aa78:	200006c8 	.word	0x200006c8

0800aa7c <at_cmd_do_exec>:

__STATIC__ int at_cmd_do_exec(const char *format, va_list args)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
    size_t cmd_len = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]

    if (tos_mutex_pend(&AT_AGENT->cmd_buf_lock) != K_ERR_NONE) {
 800aa8a:	4816      	ldr	r0, [pc, #88]	; (800aae4 <at_cmd_do_exec+0x68>)
 800aa8c:	f7fd f820 	bl	8007ad0 <tos_mutex_pend>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d002      	beq.n	800aa9c <at_cmd_do_exec+0x20>
        return -1;
 800aa96:	f04f 33ff 	mov.w	r3, #4294967295
 800aa9a:	e01f      	b.n	800aadc <at_cmd_do_exec+0x60>
    }

    cmd_len = vsnprintf(AT_AGENT->cmd_buf, AT_CMD_BUFFER_SIZE, format, args);
 800aa9c:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <at_cmd_do_exec+0x6c>)
 800aa9e:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aaaa:	f000 fde9 	bl	800b680 <vsniprintf>
 800aaae:	4603      	mov	r3, r0
 800aab0:	60fb      	str	r3, [r7, #12]

    printf("AT CMD:\n%s\n", AT_AGENT->cmd_buf);
 800aab2:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <at_cmd_do_exec+0x6c>)
 800aab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab8:	461a      	mov	r2, r3
 800aaba:	490c      	ldr	r1, [pc, #48]	; (800aaec <at_cmd_do_exec+0x70>)
 800aabc:	2001      	movs	r0, #1
 800aabe:	f7fa fb7d 	bl	80051bc <iDebugPrint>

    at_uart_send((uint8_t *)AT_AGENT->cmd_buf, cmd_len, 0xFFFF);
 800aac2:	4b09      	ldr	r3, [pc, #36]	; (800aae8 <at_cmd_do_exec+0x6c>)
 800aac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aacc:	68f9      	ldr	r1, [r7, #12]
 800aace:	4618      	mov	r0, r3
 800aad0:	f7ff ff12 	bl	800a8f8 <at_uart_send>

    tos_mutex_post(&AT_AGENT->cmd_buf_lock);
 800aad4:	4803      	ldr	r0, [pc, #12]	; (800aae4 <at_cmd_do_exec+0x68>)
 800aad6:	f7fd f80b 	bl	8007af0 <tos_mutex_post>

    return 0;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	20000984 	.word	0x20000984
 800aae8:	200006c8 	.word	0x200006c8
 800aaec:	0800cd78 	.word	0x0800cd78

0800aaf0 <tos_at_cmd_exec>:

__API__ int tos_at_cmd_exec(at_echo_t *echo, uint32_t timeout, const char *cmd, ...)
{
 800aaf0:	b40c      	push	{r2, r3}
 800aaf2:	b590      	push	{r4, r7, lr}
 800aaf4:	b085      	sub	sp, #20
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	60fb      	str	r3, [r7, #12]
    va_list args;

    if (echo) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d002      	beq.n	800ab0c <tos_at_cmd_exec+0x1c>
        at_echo_attach(echo);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7ff ff58 	bl	800a9bc <at_echo_attach>
    }

    va_start(args, cmd);
 800ab0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab10:	60bb      	str	r3, [r7, #8]
    ret = at_cmd_do_exec(cmd, args);
 800ab12:	68b9      	ldr	r1, [r7, #8]
 800ab14:	6a38      	ldr	r0, [r7, #32]
 800ab16:	f7ff ffb1 	bl	800aa7c <at_cmd_do_exec>
 800ab1a:	60f8      	str	r0, [r7, #12]
    va_end(args);

    if (ret != 0) {
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d006      	beq.n	800ab30 <tos_at_cmd_exec+0x40>
        AT_AGENT->echo = K_NULL;
 800ab22:	4b0e      	ldr	r3, [pc, #56]	; (800ab5c <tos_at_cmd_exec+0x6c>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
        return -1;
 800ab2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2e:	e00d      	b.n	800ab4c <tos_at_cmd_exec+0x5c>
    }

    tos_task_delay(tos_millisec2tick(timeout));
 800ab30:	6838      	ldr	r0, [r7, #0]
 800ab32:	f7ff f9f5 	bl	8009f20 <tos_millisec2tick>
 800ab36:	4603      	mov	r3, r0
 800ab38:	460c      	mov	r4, r1
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	f7fe ff71 	bl	8009a24 <tos_task_delay>

    AT_AGENT->echo = K_NULL;
 800ab42:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <tos_at_cmd_exec+0x6c>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

    return 0;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ab56:	b002      	add	sp, #8
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	200006c8 	.word	0x200006c8

0800ab60 <tos_at_cmd_exec_until>:

__API__ int tos_at_cmd_exec_until(at_echo_t *echo, uint32_t timeout, const char *cmd, ...)
{
 800ab60:	b40c      	push	{r2, r3}
 800ab62:	b590      	push	{r4, r7, lr}
 800ab64:	b085      	sub	sp, #20
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]
    va_list args;

    if (!echo || !echo->echo_expect) {
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d003      	beq.n	800ab7e <tos_at_cmd_exec_until+0x1e>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d102      	bne.n	800ab84 <tos_at_cmd_exec_until+0x24>
        return -1;
 800ab7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab82:	e03e      	b.n	800ac02 <tos_at_cmd_exec_until+0xa2>
    }

    if (tos_sem_create(&echo->__expect_notify, 0) != K_ERR_NONE) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	331c      	adds	r3, #28
 800ab88:	2100      	movs	r1, #0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fd ffa5 	bl	8008ada <tos_sem_create>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <tos_at_cmd_exec_until+0x3c>
        return -1;
 800ab96:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9a:	e032      	b.n	800ac02 <tos_at_cmd_exec_until+0xa2>
    }
    echo->__is_expecting = K_TRUE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	619a      	str	r2, [r3, #24]
    at_echo_attach(echo);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7ff ff0a 	bl	800a9bc <at_echo_attach>

    va_start(args, cmd);
 800aba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abac:	60bb      	str	r3, [r7, #8]
    ret = at_cmd_do_exec(cmd, args);
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	6a38      	ldr	r0, [r7, #32]
 800abb2:	f7ff ff63 	bl	800aa7c <at_cmd_do_exec>
 800abb6:	60f8      	str	r0, [r7, #12]
    va_end(args);

    if (ret != 0) {
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d006      	beq.n	800abcc <tos_at_cmd_exec_until+0x6c>
        AT_AGENT->echo = K_NULL;
 800abbe:	4b14      	ldr	r3, [pc, #80]	; (800ac10 <tos_at_cmd_exec_until+0xb0>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
        return -1;
 800abc6:	f04f 33ff 	mov.w	r3, #4294967295
 800abca:	e01a      	b.n	800ac02 <tos_at_cmd_exec_until+0xa2>
    }

    if (tos_sem_pend(&echo->__expect_notify, tos_millisec2tick(timeout)) != K_ERR_NONE) {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f103 041c 	add.w	r4, r3, #28
 800abd2:	6838      	ldr	r0, [r7, #0]
 800abd4:	f7ff f9a4 	bl	8009f20 <tos_millisec2tick>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4620      	mov	r0, r4
 800abde:	f7fe f827 	bl	8008c30 <tos_sem_pend>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <tos_at_cmd_exec_until+0x8e>
        ret = -1;
 800abe8:	f04f 33ff 	mov.w	r3, #4294967295
 800abec:	60fb      	str	r3, [r7, #12]
    }

    tos_sem_destroy(&echo->__expect_notify);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	331c      	adds	r3, #28
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fd ff83 	bl	8008afe <tos_sem_destroy>

    AT_AGENT->echo = K_NULL;
 800abf8:	4b05      	ldr	r3, [pc, #20]	; (800ac10 <tos_at_cmd_exec_until+0xb0>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

    return ret;
 800ac00:	68fb      	ldr	r3, [r7, #12]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ac0c:	b002      	add	sp, #8
 800ac0e:	4770      	bx	lr
 800ac10:	200006c8 	.word	0x200006c8

0800ac14 <at_recv_cache_init>:

__STATIC__ int at_recv_cache_init(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
    uint8_t *buffer = K_NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	607b      	str	r3, [r7, #4]

    buffer = tos_mmheap_alloc(AT_RECV_CACHE_SIZE);
 800ac1e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ac22:	f7fc fc8f 	bl	8007544 <tos_mmheap_alloc>
 800ac26:	6078      	str	r0, [r7, #4]
    if (!buffer) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d106      	bne.n	800ac3c <at_recv_cache_init+0x28>
        AT_AGENT->recv_cache.buffer = K_NULL;
 800ac2e:	4b0c      	ldr	r3, [pc, #48]	; (800ac60 <at_recv_cache_init+0x4c>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
        return - 1;
 800ac36:	f04f 33ff 	mov.w	r3, #4294967295
 800ac3a:	e00d      	b.n	800ac58 <at_recv_cache_init+0x44>
    }

    AT_AGENT->recv_cache.buffer         = buffer;
 800ac3c:	4a08      	ldr	r2, [pc, #32]	; (800ac60 <at_recv_cache_init+0x4c>)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8c2 3278 	str.w	r3, [r2, #632]	; 0x278
    AT_AGENT->recv_cache.buffer_size    = AT_RECV_CACHE_SIZE;
 800ac44:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <at_recv_cache_init+0x4c>)
 800ac46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac4a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    AT_AGENT->recv_cache.recv_len       = 0;
 800ac4e:	4b04      	ldr	r3, [pc, #16]	; (800ac60 <at_recv_cache_init+0x4c>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return 0;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	200006c8 	.word	0x200006c8

0800ac64 <at_recv_cache_deinit>:

__STATIC__ void at_recv_cache_deinit(void)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
    uint8_t *buffer = K_NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	607b      	str	r3, [r7, #4]

    buffer = AT_AGENT->recv_cache.buffer;
 800ac6e:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <at_recv_cache_deinit+0x40>)
 800ac70:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800ac74:	607b      	str	r3, [r7, #4]
    if (buffer) {
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <at_recv_cache_deinit+0x1e>
        tos_mmheap_free(buffer);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7fc fc7c 	bl	800757a <tos_mmheap_free>
    }

    AT_AGENT->recv_cache.buffer         = K_NULL;
 800ac82:	4b08      	ldr	r3, [pc, #32]	; (800aca4 <at_recv_cache_deinit+0x40>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
    AT_AGENT->recv_cache.buffer_size    = 0;
 800ac8a:	4b06      	ldr	r3, [pc, #24]	; (800aca4 <at_recv_cache_deinit+0x40>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    AT_AGENT->recv_cache.recv_len       = 0;
 800ac92:	4b04      	ldr	r3, [pc, #16]	; (800aca4 <at_recv_cache_deinit+0x40>)
 800ac94:	2200      	movs	r2, #0
 800ac96:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
}
 800ac9a:	bf00      	nop
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	200006c8 	.word	0x200006c8

0800aca8 <at_channel_get>:

__STATIC__ at_data_channel_t *at_channel_get(int channel_id, int is_alloc)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
        if is_alloc is K_TRUE, means we are allocating a channel with certain id,
            data_channel[channel_id] must be free if return none K_NULL.
        otherwise if is_alloc is K_FALSE, means we are trying to get a channel with
            certain id, data_channel[channel_id] must be not free if return none K_NULL.
     */
    at_data_channel_t *data_channel = K_NULL;
 800acb2:	2300      	movs	r3, #0
 800acb4:	60fb      	str	r3, [r7, #12]

    if (channel_id < 0 || channel_id >= AT_DATA_CHANNEL_NUM) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	db02      	blt.n	800acc2 <at_channel_get+0x1a>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b05      	cmp	r3, #5
 800acc0:	dd01      	ble.n	800acc6 <at_channel_get+0x1e>
        return K_NULL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	e01a      	b.n	800acfc <at_channel_get+0x54>
    }

    data_channel = &AT_AGENT->data_channel[channel_id];
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	4613      	mov	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	011b      	lsls	r3, r3, #4
 800acd0:	4a0d      	ldr	r2, [pc, #52]	; (800ad08 <at_channel_get+0x60>)
 800acd2:	4413      	add	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]

    if (is_alloc && data_channel->is_free) {
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d005      	beq.n	800ace8 <at_channel_get+0x40>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <at_channel_get+0x40>
        return data_channel;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	e009      	b.n	800acfc <at_channel_get+0x54>
    }

    if (!is_alloc && !data_channel->is_free) {
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d105      	bne.n	800acfa <at_channel_get+0x52>
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <at_channel_get+0x52>
        return data_channel;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	e000      	b.n	800acfc <at_channel_get+0x54>
    }

    return K_NULL;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	200006c8 	.word	0x200006c8

0800ad0c <tos_at_channel_read_timed>:
        }
    }
}

__API__ int tos_at_channel_read_timed(int channel_id, uint8_t *buffer, size_t buffer_len, uint32_t timeout)
{
 800ad0c:	b590      	push	{r4, r7, lr}
 800ad0e:	b08d      	sub	sp, #52	; 0x34
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	603b      	str	r3, [r7, #0]
    int read_len = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t total_read_len = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	62bb      	str	r3, [r7, #40]	; 0x28
    k_tick_t tick, remain_tick;
    at_data_channel_t *data_channel = K_NULL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	627b      	str	r3, [r7, #36]	; 0x24

    data_channel = at_channel_get(channel_id, K_FALSE);
 800ad26:	2100      	movs	r1, #0
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7ff ffbd 	bl	800aca8 <at_channel_get>
 800ad2e:	6278      	str	r0, [r7, #36]	; 0x24
    if (!data_channel || data_channel->status == AT_CHANNEL_STATUS_BROKEN) {
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d004      	beq.n	800ad40 <tos_at_channel_read_timed+0x34>
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad3c:	2b03      	cmp	r3, #3
 800ad3e:	d102      	bne.n	800ad46 <tos_at_channel_read_timed+0x3a>
        return -1;
 800ad40:	f04f 33ff 	mov.w	r3, #4294967295
 800ad44:	e045      	b.n	800add2 <tos_at_channel_read_timed+0xc6>
    }

    tick = tos_millisec2tick(timeout);
 800ad46:	6838      	ldr	r0, [r7, #0]
 800ad48:	f7ff f8ea 	bl	8009f20 <tos_millisec2tick>
 800ad4c:	e9c7 0106 	strd	r0, r1, [r7, #24]

    tos_stopwatch_countdown(&AT_AGENT->timer, tick);
 800ad50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad54:	4821      	ldr	r0, [pc, #132]	; (800addc <tos_at_channel_read_timed+0xd0>)
 800ad56:	f7fe f81d 	bl	8008d94 <tos_stopwatch_countdown>
    while (!tos_stopwatch_is_expired(&AT_AGENT->timer)) {
 800ad5a:	e033      	b.n	800adc4 <tos_at_channel_read_timed+0xb8>
        remain_tick = tos_stopwatch_remain(&AT_AGENT->timer);
 800ad5c:	481f      	ldr	r0, [pc, #124]	; (800addc <tos_at_channel_read_timed+0xd0>)
 800ad5e:	f7fe f86d 	bl	8008e3c <tos_stopwatch_remain>
 800ad62:	e9c7 0104 	strd	r0, r1, [r7, #16]
        if (remain_tick == (k_tick_t)0u) {
 800ad66:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ad6a:	4323      	orrs	r3, r4
 800ad6c:	d101      	bne.n	800ad72 <tos_at_channel_read_timed+0x66>
            return total_read_len;
 800ad6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad70:	e02f      	b.n	800add2 <tos_at_channel_read_timed+0xc6>
        }

        if (tos_mutex_pend_timed(&data_channel->rx_lock, remain_tick) != K_ERR_NONE) {
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ad78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	f7fc fe07 	bl	8007990 <tos_mutex_pend_timed>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <tos_at_channel_read_timed+0x80>
            return total_read_len;
 800ad88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8a:	e022      	b.n	800add2 <tos_at_channel_read_timed+0xc6>
        }

        read_len = tos_chr_fifo_pop_stream(&data_channel->rx_fifo, buffer + read_len, buffer_len - total_read_len);
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	1d18      	adds	r0, r3, #4
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	18d1      	adds	r1, r2, r3
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f7fb ff1f 	bl	8006be0 <tos_chr_fifo_pop_stream>
 800ada2:	62f8      	str	r0, [r7, #44]	; 0x2c

        tos_mutex_post(&data_channel->rx_lock);
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	3324      	adds	r3, #36	; 0x24
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fc fea1 	bl	8007af0 <tos_mutex_post>

        total_read_len += read_len;
 800adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb2:	4413      	add	r3, r2
 800adb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if (total_read_len < buffer_len) {
 800adb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d200      	bcs.n	800adc0 <tos_at_channel_read_timed+0xb4>
            continue;
 800adbe:	e001      	b.n	800adc4 <tos_at_channel_read_timed+0xb8>
        } else {
            return buffer_len;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	e006      	b.n	800add2 <tos_at_channel_read_timed+0xc6>
    while (!tos_stopwatch_is_expired(&AT_AGENT->timer)) {
 800adc4:	4805      	ldr	r0, [pc, #20]	; (800addc <tos_at_channel_read_timed+0xd0>)
 800adc6:	f7fe f87a 	bl	8008ebe <tos_stopwatch_is_expired>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d0c5      	beq.n	800ad5c <tos_at_channel_read_timed+0x50>
        }
    }

    return total_read_len;
 800add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800add2:	4618      	mov	r0, r3
 800add4:	3734      	adds	r7, #52	; 0x34
 800add6:	46bd      	mov	sp, r7
 800add8:	bd90      	pop	{r4, r7, pc}
 800adda:	bf00      	nop
 800addc:	20000950 	.word	0x20000950

0800ade0 <tos_at_channel_write>:

__API__ int tos_at_channel_write(int channel_id, uint8_t *buffer, size_t buffer_len)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
    int ret;
    at_data_channel_t *data_channel = K_NULL;
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]

    data_channel = at_channel_get(channel_id, K_FALSE);
 800adf0:	2100      	movs	r1, #0
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7ff ff58 	bl	800aca8 <at_channel_get>
 800adf8:	6178      	str	r0, [r7, #20]
    if (!data_channel) {
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <tos_at_channel_write+0x26>
        return -1;
 800ae00:	f04f 33ff 	mov.w	r3, #4294967295
 800ae04:	e018      	b.n	800ae38 <tos_at_channel_write+0x58>
    }

    if (tos_mutex_pend(&data_channel->rx_lock) != K_ERR_NONE) {
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	3324      	adds	r3, #36	; 0x24
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fc fe60 	bl	8007ad0 <tos_mutex_pend>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d002      	beq.n	800ae1c <tos_at_channel_write+0x3c>
        return -1;
 800ae16:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1a:	e00d      	b.n	800ae38 <tos_at_channel_write+0x58>
    }

    ret = tos_chr_fifo_push_stream(&data_channel->rx_fifo, buffer, buffer_len);
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	3304      	adds	r3, #4
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	68b9      	ldr	r1, [r7, #8]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fb fe6e 	bl	8006b06 <tos_chr_fifo_push_stream>
 800ae2a:	6138      	str	r0, [r7, #16]

    tos_mutex_post(&data_channel->rx_lock);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	3324      	adds	r3, #36	; 0x24
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fc fe5d 	bl	8007af0 <tos_mutex_post>

    return ret;
 800ae36:	693b      	ldr	r3, [r7, #16]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3718      	adds	r7, #24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <at_channel_construct>:

__STATIC_INLINE__ int at_channel_construct(at_data_channel_t *data_channel, const char *ip, const char *port)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
    uint8_t *fifo_buffer = K_NULL;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	617b      	str	r3, [r7, #20]

    fifo_buffer = tos_mmheap_alloc(AT_DATA_CHANNEL_FIFO_BUFFER_SIZE);
 800ae50:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800ae54:	f7fc fb76 	bl	8007544 <tos_mmheap_alloc>
 800ae58:	6178      	str	r0, [r7, #20]
    if (!fifo_buffer) {
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d102      	bne.n	800ae66 <at_channel_construct+0x26>
        return -1;
 800ae60:	f04f 33ff 	mov.w	r3, #4294967295
 800ae64:	e027      	b.n	800aeb6 <at_channel_construct+0x76>
    }

    if (tos_mutex_create(&data_channel->rx_lock) != K_ERR_NONE) {
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3324      	adds	r3, #36	; 0x24
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fc fd08 	bl	8007880 <tos_mutex_create>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d119      	bne.n	800aeaa <at_channel_construct+0x6a>
        goto errout;
    }

    data_channel->rx_fifo_buffer = fifo_buffer;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	621a      	str	r2, [r3, #32]
    tos_chr_fifo_create(&data_channel->rx_fifo, fifo_buffer, AT_DATA_CHANNEL_FIFO_BUFFER_SIZE);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3304      	adds	r3, #4
 800ae80:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800ae84:	6979      	ldr	r1, [r7, #20]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fb fd9d 	bl	80069c6 <tos_chr_fifo_create>
    data_channel->remote_ip = ip;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	649a      	str	r2, [r3, #72]	; 0x48
    data_channel->remote_port = port;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	64da      	str	r2, [r3, #76]	; 0x4c

    data_channel->is_free   = K_FALSE;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	701a      	strb	r2, [r3, #0]
    data_channel->status    = AT_CHANNEL_STATUS_WORKING;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2202      	movs	r2, #2
 800aea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	e005      	b.n	800aeb6 <at_channel_construct+0x76>
        goto errout;
 800aeaa:	bf00      	nop

errout:
    tos_mmheap_free(fifo_buffer);
 800aeac:	6978      	ldr	r0, [r7, #20]
 800aeae:	f7fc fb64 	bl	800757a <tos_mmheap_free>
    return -1;
 800aeb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <tos_at_channel_alloc>:

    return channel_id;
}

__API__ int tos_at_channel_alloc(const char *ip, const char *port)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
    int id = 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	60fb      	str	r3, [r7, #12]
    at_data_channel_t *data_channel = K_NULL;
 800aece:	2300      	movs	r3, #0
 800aed0:	60bb      	str	r3, [r7, #8]

    for (id = 0; id < AT_DATA_CHANNEL_NUM; ++id) {
 800aed2:	2300      	movs	r3, #0
 800aed4:	60fb      	str	r3, [r7, #12]
 800aed6:	e00e      	b.n	800aef6 <tos_at_channel_alloc+0x36>
        data_channel = &AT_AGENT->data_channel[id];
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	4613      	mov	r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4413      	add	r3, r2
 800aee0:	011b      	lsls	r3, r3, #4
 800aee2:	4a14      	ldr	r2, [pc, #80]	; (800af34 <tos_at_channel_alloc+0x74>)
 800aee4:	4413      	add	r3, r2
 800aee6:	60bb      	str	r3, [r7, #8]
        if (data_channel->is_free) {
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d106      	bne.n	800aefe <tos_at_channel_alloc+0x3e>
    for (id = 0; id < AT_DATA_CHANNEL_NUM; ++id) {
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3301      	adds	r3, #1
 800aef4:	60fb      	str	r3, [r7, #12]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b05      	cmp	r3, #5
 800aefa:	dded      	ble.n	800aed8 <tos_at_channel_alloc+0x18>
 800aefc:	e000      	b.n	800af00 <tos_at_channel_alloc+0x40>
            break;
 800aefe:	bf00      	nop
        }
    }

    if (id == AT_DATA_CHANNEL_NUM || !data_channel) {
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b06      	cmp	r3, #6
 800af04:	d002      	beq.n	800af0c <tos_at_channel_alloc+0x4c>
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d102      	bne.n	800af12 <tos_at_channel_alloc+0x52>
        return -1;
 800af0c:	f04f 33ff 	mov.w	r3, #4294967295
 800af10:	e00b      	b.n	800af2a <tos_at_channel_alloc+0x6a>
    }

    if (at_channel_construct(data_channel, ip, port) != 0) {
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	68b8      	ldr	r0, [r7, #8]
 800af18:	f7ff ff92 	bl	800ae40 <at_channel_construct>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <tos_at_channel_alloc+0x68>
        return -1;
 800af22:	f04f 33ff 	mov.w	r3, #4294967295
 800af26:	e000      	b.n	800af2a <tos_at_channel_alloc+0x6a>
    }

    return id;
 800af28:	68fb      	ldr	r3, [r7, #12]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	200006c8 	.word	0x200006c8

0800af38 <tos_at_channel_free>:

__API__ int tos_at_channel_free(int channel_id)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
    at_data_channel_t *data_channel = K_NULL;
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]

    data_channel = at_channel_get(channel_id, K_FALSE);
 800af44:	2100      	movs	r1, #0
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff feae 	bl	800aca8 <at_channel_get>
 800af4c:	60f8      	str	r0, [r7, #12]
    if (!data_channel) {
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d102      	bne.n	800af5a <tos_at_channel_free+0x22>
        return -1;
 800af54:	f04f 33ff 	mov.w	r3, #4294967295
 800af58:	e01b      	b.n	800af92 <tos_at_channel_free+0x5a>
    }

    tos_mutex_destroy(&data_channel->rx_lock);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3324      	adds	r3, #36	; 0x24
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fc fcc8 	bl	80078f4 <tos_mutex_destroy>

    tos_mmheap_free(data_channel->rx_fifo_buffer);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a1b      	ldr	r3, [r3, #32]
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fc fb06 	bl	800757a <tos_mmheap_free>
    tos_chr_fifo_destroy(&data_channel->rx_fifo);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3304      	adds	r3, #4
 800af72:	4618      	mov	r0, r3
 800af74:	f7fb fd60 	bl	8006a38 <tos_chr_fifo_destroy>

    memset(data_channel, 0, sizeof(at_data_channel_t));
 800af78:	2250      	movs	r2, #80	; 0x50
 800af7a:	2100      	movs	r1, #0
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f000 fadc 	bl	800b53a <memset>

    data_channel->is_free   = K_TRUE;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2201      	movs	r2, #1
 800af86:	701a      	strb	r2, [r3, #0]
    data_channel->status    = AT_CHANNEL_STATUS_HANGING;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return 0;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <tos_at_channel_set_broken>:

__API__ int tos_at_channel_set_broken(int channel_id)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b084      	sub	sp, #16
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
    at_data_channel_t *data_channel = K_NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]

    data_channel = at_channel_get(channel_id, K_FALSE);
 800afa6:	2100      	movs	r1, #0
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7ff fe7d 	bl	800aca8 <at_channel_get>
 800afae:	60f8      	str	r0, [r7, #12]
    if (!data_channel) {
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d102      	bne.n	800afbc <tos_at_channel_set_broken+0x22>
        return -1;
 800afb6:	f04f 33ff 	mov.w	r3, #4294967295
 800afba:	e004      	b.n	800afc6 <tos_at_channel_set_broken+0x2c>
    }

    data_channel->status = AT_CHANNEL_STATUS_BROKEN;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2203      	movs	r2, #3
 800afc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    return 0;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <tos_at_channel_is_working>:

__API__ int tos_at_channel_is_working(int channel_id)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
    at_data_channel_t *data_channel = K_NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	60fb      	str	r3, [r7, #12]

    data_channel = at_channel_get(channel_id, K_FALSE);
 800afda:	2100      	movs	r1, #0
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff fe63 	bl	800aca8 <at_channel_get>
 800afe2:	60f8      	str	r0, [r7, #12]
    return data_channel && data_channel->status == AT_CHANNEL_STATUS_WORKING;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d006      	beq.n	800aff8 <tos_at_channel_is_working+0x2a>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d101      	bne.n	800aff8 <tos_at_channel_is_working+0x2a>
 800aff4:	2301      	movs	r3, #1
 800aff6:	e000      	b.n	800affa <tos_at_channel_is_working+0x2c>
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
	...

0800b004 <at_channel_init>:

__STATIC__ void at_channel_init(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
    int i = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	607b      	str	r3, [r7, #4]

    for (i = 0; i < AT_DATA_CHANNEL_NUM; ++i) {
 800b00e:	2300      	movs	r3, #0
 800b010:	607b      	str	r3, [r7, #4]
 800b012:	e021      	b.n	800b058 <at_channel_init+0x54>
        memset(&AT_AGENT->data_channel[i], 0, sizeof(at_data_channel_t));
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	4613      	mov	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	011b      	lsls	r3, r3, #4
 800b01e:	4a12      	ldr	r2, [pc, #72]	; (800b068 <at_channel_init+0x64>)
 800b020:	4413      	add	r3, r2
 800b022:	2250      	movs	r2, #80	; 0x50
 800b024:	2100      	movs	r1, #0
 800b026:	4618      	mov	r0, r3
 800b028:	f000 fa87 	bl	800b53a <memset>
        AT_AGENT->data_channel[i].is_free   = K_TRUE;
 800b02c:	490e      	ldr	r1, [pc, #56]	; (800b068 <at_channel_init+0x64>)
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	4613      	mov	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	011b      	lsls	r3, r3, #4
 800b038:	440b      	add	r3, r1
 800b03a:	2201      	movs	r2, #1
 800b03c:	701a      	strb	r2, [r3, #0]
        AT_AGENT->data_channel[i].status    = AT_CHANNEL_STATUS_HANGING;
 800b03e:	490a      	ldr	r1, [pc, #40]	; (800b068 <at_channel_init+0x64>)
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	4613      	mov	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	011b      	lsls	r3, r3, #4
 800b04a:	440b      	add	r3, r1
 800b04c:	3344      	adds	r3, #68	; 0x44
 800b04e:	2201      	movs	r2, #1
 800b050:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < AT_DATA_CHANNEL_NUM; ++i) {
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	3301      	adds	r3, #1
 800b056:	607b      	str	r3, [r7, #4]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b05      	cmp	r3, #5
 800b05c:	ddda      	ble.n	800b014 <at_channel_init+0x10>
    }
}
 800b05e:	bf00      	nop
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	200006c8 	.word	0x200006c8

0800b06c <at_event_table_set>:

    return data_channel[channel_id].remote_port;
}

__STATIC__ void at_event_table_set(at_event_t *event_table, size_t event_table_size)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
    AT_AGENT->event_table       = event_table;
 800b076:	4a07      	ldr	r2, [pc, #28]	; (800b094 <at_event_table_set+0x28>)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
    AT_AGENT->event_table_size  = event_table_size;
 800b07e:	4a05      	ldr	r2, [pc, #20]	; (800b094 <at_event_table_set+0x28>)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
}
 800b086:	bf00      	nop
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	200006c8 	.word	0x200006c8

0800b098 <tos_at_init>:

__API__ int tos_at_init(hal_uart_port_t uart_port, at_event_t *event_table, size_t event_table_size)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b08a      	sub	sp, #40	; 0x28
 800b09c:	af04      	add	r7, sp, #16
 800b09e:	4603      	mov	r3, r0
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
 800b0a4:	73fb      	strb	r3, [r7, #15]
    void *buffer = K_NULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	617b      	str	r3, [r7, #20]

    memset(AT_AGENT, 0, sizeof(at_agent_t));
 800b0aa:	f44f 7256 	mov.w	r2, #856	; 0x358
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	4857      	ldr	r0, [pc, #348]	; (800b210 <tos_at_init+0x178>)
 800b0b2:	f000 fa42 	bl	800b53a <memset>

    at_event_table_set(event_table, event_table_size);
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	68b8      	ldr	r0, [r7, #8]
 800b0ba:	f7ff ffd7 	bl	800b06c <at_event_table_set>

    at_channel_init();
 800b0be:	f7ff ffa1 	bl	800b004 <at_channel_init>

    tos_stopwatch_create(&AT_AGENT->timer);
 800b0c2:	4854      	ldr	r0, [pc, #336]	; (800b214 <tos_at_init+0x17c>)
 800b0c4:	f7fd fe45 	bl	8008d52 <tos_stopwatch_create>

    buffer = tos_mmheap_alloc(AT_UART_RX_FIFO_BUFFER_SIZE);
 800b0c8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b0cc:	f7fc fa3a 	bl	8007544 <tos_mmheap_alloc>
 800b0d0:	6178      	str	r0, [r7, #20]
    if (!buffer) {
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <tos_at_init+0x46>
        return -1;
 800b0d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0dc:	e093      	b.n	800b206 <tos_at_init+0x16e>
    }

    AT_AGENT->uart_rx_fifo_buffer = (uint8_t *)buffer;
 800b0de:	4a4c      	ldr	r2, [pc, #304]	; (800b210 <tos_at_init+0x178>)
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	f8c2 3350 	str.w	r3, [r2, #848]	; 0x350
    tos_chr_fifo_create(&AT_AGENT->uart_rx_fifo, buffer, AT_UART_RX_FIFO_BUFFER_SIZE);
 800b0e6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b0ea:	6979      	ldr	r1, [r7, #20]
 800b0ec:	484a      	ldr	r0, [pc, #296]	; (800b218 <tos_at_init+0x180>)
 800b0ee:	f7fb fc6a 	bl	80069c6 <tos_chr_fifo_create>

    buffer = tos_mmheap_alloc(AT_CMD_BUFFER_SIZE);
 800b0f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b0f6:	f7fc fa25 	bl	8007544 <tos_mmheap_alloc>
 800b0fa:	6178      	str	r0, [r7, #20]
    if (!buffer) {
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d071      	beq.n	800b1e6 <tos_at_init+0x14e>
        goto errout0;
    }
    AT_AGENT->cmd_buf = (char *)buffer;
 800b102:	4a43      	ldr	r2, [pc, #268]	; (800b210 <tos_at_init+0x178>)
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f8c2 32b8 	str.w	r3, [r2, #696]	; 0x2b8

    if (tos_mutex_create(&AT_AGENT->cmd_buf_lock) != K_ERR_NONE) {
 800b10a:	4844      	ldr	r0, [pc, #272]	; (800b21c <tos_at_init+0x184>)
 800b10c:	f7fc fbb8 	bl	8007880 <tos_mutex_create>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d15b      	bne.n	800b1ce <tos_at_init+0x136>
        goto errout1;
    }

    if (at_recv_cache_init() != 0) {
 800b116:	f7ff fd7d 	bl	800ac14 <at_recv_cache_init>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d151      	bne.n	800b1c4 <tos_at_init+0x12c>
        goto errout2;
    }

    if (tos_sem_create(&AT_AGENT->uart_rx_sem, (k_sem_cnt_t)0u) != K_ERR_NONE) {
 800b120:	2100      	movs	r1, #0
 800b122:	483f      	ldr	r0, [pc, #252]	; (800b220 <tos_at_init+0x188>)
 800b124:	f7fd fcd9 	bl	8008ada <tos_sem_create>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d146      	bne.n	800b1bc <tos_at_init+0x124>
        goto errout3;
    }

    if (tos_mutex_create(&AT_AGENT->uart_rx_lock) != K_ERR_NONE) {
 800b12e:	483d      	ldr	r0, [pc, #244]	; (800b224 <tos_at_init+0x18c>)
 800b130:	f7fc fba6 	bl	8007880 <tos_mutex_create>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d13b      	bne.n	800b1b2 <tos_at_init+0x11a>
        goto errout4;
    }

    if (tos_mutex_create(&AT_AGENT->uart_tx_lock) != K_ERR_NONE) {
 800b13a:	483b      	ldr	r0, [pc, #236]	; (800b228 <tos_at_init+0x190>)
 800b13c:	f7fc fba0 	bl	8007880 <tos_mutex_create>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d130      	bne.n	800b1a8 <tos_at_init+0x110>
        goto errout5;
    }

    if (tos_task_create(&AT_AGENT->parser, "at_parser", at_parser,
 800b146:	2300      	movs	r3, #0
 800b148:	9303      	str	r3, [sp, #12]
 800b14a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b14e:	9302      	str	r3, [sp, #8]
 800b150:	4b36      	ldr	r3, [pc, #216]	; (800b22c <tos_at_init+0x194>)
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	2302      	movs	r3, #2
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	2300      	movs	r3, #0
 800b15a:	4a35      	ldr	r2, [pc, #212]	; (800b230 <tos_at_init+0x198>)
 800b15c:	4935      	ldr	r1, [pc, #212]	; (800b234 <tos_at_init+0x19c>)
 800b15e:	4836      	ldr	r0, [pc, #216]	; (800b238 <tos_at_init+0x1a0>)
 800b160:	f7fe fa32 	bl	80095c8 <tos_task_create>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d119      	bne.n	800b19e <tos_at_init+0x106>
                        K_NULL, AT_PARSER_TASK_PRIO, at_parser_task_stack,
                        AT_PARSER_TASK_STACK_SIZE, 0) != K_ERR_NONE) {
        goto errout6;
    }

    if (tos_hal_uart_init(&AT_AGENT->uart, uart_port) != 0) {
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	4619      	mov	r1, r3
 800b16e:	4833      	ldr	r0, [pc, #204]	; (800b23c <tos_at_init+0x1a4>)
 800b170:	f7ff f874 	bl	800a25c <tos_hal_uart_init>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10c      	bne.n	800b194 <tos_at_init+0xfc>
        goto errout7;
    }

    if (tos_mutex_create(&AT_AGENT->global_lock) != K_ERR_NONE) {
 800b17a:	4831      	ldr	r0, [pc, #196]	; (800b240 <tos_at_init+0x1a8>)
 800b17c:	f7fc fb80 	bl	8007880 <tos_mutex_create>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <tos_at_init+0xf2>
        goto errout8;
    }

    return 0;
 800b186:	2300      	movs	r3, #0
 800b188:	e03d      	b.n	800b206 <tos_at_init+0x16e>
        goto errout8;
 800b18a:	bf00      	nop

errout8:
    tos_hal_uart_deinit(&AT_AGENT->uart);
 800b18c:	482b      	ldr	r0, [pc, #172]	; (800b23c <tos_at_init+0x1a4>)
 800b18e:	f7ff f8cf 	bl	800a330 <tos_hal_uart_deinit>
 800b192:	e000      	b.n	800b196 <tos_at_init+0xfe>
        goto errout7;
 800b194:	bf00      	nop

errout7:
    tos_task_destroy(&AT_AGENT->parser);
 800b196:	4828      	ldr	r0, [pc, #160]	; (800b238 <tos_at_init+0x1a0>)
 800b198:	f7fe fb42 	bl	8009820 <tos_task_destroy>
 800b19c:	e000      	b.n	800b1a0 <tos_at_init+0x108>
        goto errout6;
 800b19e:	bf00      	nop

errout6:
    tos_mutex_destroy(&AT_AGENT->uart_tx_lock);
 800b1a0:	4821      	ldr	r0, [pc, #132]	; (800b228 <tos_at_init+0x190>)
 800b1a2:	f7fc fba7 	bl	80078f4 <tos_mutex_destroy>
 800b1a6:	e000      	b.n	800b1aa <tos_at_init+0x112>
        goto errout5;
 800b1a8:	bf00      	nop

errout5:
    tos_mutex_destroy(&AT_AGENT->uart_rx_lock);
 800b1aa:	481e      	ldr	r0, [pc, #120]	; (800b224 <tos_at_init+0x18c>)
 800b1ac:	f7fc fba2 	bl	80078f4 <tos_mutex_destroy>
 800b1b0:	e000      	b.n	800b1b4 <tos_at_init+0x11c>
        goto errout4;
 800b1b2:	bf00      	nop

errout4:
    tos_sem_destroy(&AT_AGENT->uart_rx_sem);
 800b1b4:	481a      	ldr	r0, [pc, #104]	; (800b220 <tos_at_init+0x188>)
 800b1b6:	f7fd fca2 	bl	8008afe <tos_sem_destroy>
 800b1ba:	e000      	b.n	800b1be <tos_at_init+0x126>
        goto errout3;
 800b1bc:	bf00      	nop

errout3:
    at_recv_cache_deinit();
 800b1be:	f7ff fd51 	bl	800ac64 <at_recv_cache_deinit>
 800b1c2:	e000      	b.n	800b1c6 <tos_at_init+0x12e>
        goto errout2;
 800b1c4:	bf00      	nop

errout2:
    tos_mutex_destroy(&AT_AGENT->cmd_buf_lock);
 800b1c6:	4815      	ldr	r0, [pc, #84]	; (800b21c <tos_at_init+0x184>)
 800b1c8:	f7fc fb94 	bl	80078f4 <tos_mutex_destroy>
 800b1cc:	e000      	b.n	800b1d0 <tos_at_init+0x138>
        goto errout1;
 800b1ce:	bf00      	nop

errout1:
    tos_mmheap_free(AT_AGENT->cmd_buf);
 800b1d0:	4b0f      	ldr	r3, [pc, #60]	; (800b210 <tos_at_init+0x178>)
 800b1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fc f9cf 	bl	800757a <tos_mmheap_free>
    AT_AGENT->cmd_buf = K_NULL;
 800b1dc:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <tos_at_init+0x178>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 800b1e4:	e000      	b.n	800b1e8 <tos_at_init+0x150>
        goto errout0;
 800b1e6:	bf00      	nop

errout0:
    tos_mmheap_free(AT_AGENT->uart_rx_fifo_buffer);
 800b1e8:	4b09      	ldr	r3, [pc, #36]	; (800b210 <tos_at_init+0x178>)
 800b1ea:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fc f9c3 	bl	800757a <tos_mmheap_free>
    AT_AGENT->uart_rx_fifo_buffer = K_NULL;
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <tos_at_init+0x178>)
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    tos_chr_fifo_destroy(&AT_AGENT->uart_rx_fifo);
 800b1fc:	4806      	ldr	r0, [pc, #24]	; (800b218 <tos_at_init+0x180>)
 800b1fe:	f7fb fc1b 	bl	8006a38 <tos_chr_fifo_destroy>

    return -1;
 800b202:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	200006c8 	.word	0x200006c8
 800b214:	20000950 	.word	0x20000950
 800b218:	200009fc 	.word	0x200009fc
 800b21c:	20000984 	.word	0x20000984
 800b220:	200009ec 	.word	0x200009ec
 800b224:	200009cc 	.word	0x200009cc
 800b228:	200009ac 	.word	0x200009ac
 800b22c:	20000a20 	.word	0x20000a20
 800b230:	0800a819 	.word	0x0800a819
 800b234:	0800cd84 	.word	0x0800cd84
 800b238:	200008b8 	.word	0x200008b8
 800b23c:	200009a4 	.word	0x200009a4
 800b240:	20000960 	.word	0x20000960

0800b244 <tos_at_uart_input_byte>:
}

/* To completely decouple the uart intterupt and at agent, we need a more powerful
   hal(driver framework), that would be a huge work, we place it in future plans. */
__API__ void tos_at_uart_input_byte(uint8_t data)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	71fb      	strb	r3, [r7, #7]
    if (tos_chr_fifo_push(&AT_AGENT->uart_rx_fifo, data) == K_ERR_NONE) {
 800b24e:	79fb      	ldrb	r3, [r7, #7]
 800b250:	4619      	mov	r1, r3
 800b252:	4806      	ldr	r0, [pc, #24]	; (800b26c <tos_at_uart_input_byte+0x28>)
 800b254:	f7fb fc2e 	bl	8006ab4 <tos_chr_fifo_push>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d102      	bne.n	800b264 <tos_at_uart_input_byte+0x20>
        tos_sem_post(&AT_AGENT->uart_rx_sem);
 800b25e:	4804      	ldr	r0, [pc, #16]	; (800b270 <tos_at_uart_input_byte+0x2c>)
 800b260:	f7fd fcd8 	bl	8008c14 <tos_sem_post>
    }
}
 800b264:	bf00      	nop
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	200009fc 	.word	0x200009fc
 800b270:	200009ec 	.word	0x200009ec

0800b274 <tos_sal_module_register>:
#include "sal_module_wrapper.h"

static sal_module_t *g_sal_module = NULL;

int tos_sal_module_register(sal_module_t *module)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
    if (!g_sal_module) {
 800b27c:	4b08      	ldr	r3, [pc, #32]	; (800b2a0 <tos_sal_module_register+0x2c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d104      	bne.n	800b28e <tos_sal_module_register+0x1a>
        g_sal_module = module;
 800b284:	4a06      	ldr	r2, [pc, #24]	; (800b2a0 <tos_sal_module_register+0x2c>)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6013      	str	r3, [r2, #0]
        return 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	e001      	b.n	800b292 <tos_sal_module_register+0x1e>
    }

    return -1;
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b292:	4618      	mov	r0, r3
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	20001220 	.word	0x20001220

0800b2a4 <tos_sal_module_init>:

    return 0;
}

int tos_sal_module_init(void)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	af00      	add	r7, sp, #0
    if (g_sal_module && g_sal_module->init) {
 800b2a8:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <tos_sal_module_init+0x2c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00a      	beq.n	800b2c6 <tos_sal_module_init+0x22>
 800b2b0:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <tos_sal_module_init+0x2c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d005      	beq.n	800b2c6 <tos_sal_module_init+0x22>
        return g_sal_module->init();
 800b2ba:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <tos_sal_module_init+0x2c>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4798      	blx	r3
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	e001      	b.n	800b2ca <tos_sal_module_init+0x26>
    }
    return -1;
 800b2c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20001220 	.word	0x20001220

0800b2d4 <tos_sal_module_connect>:
    }
    return -1;
}

int tos_sal_module_connect(const char *ip, const char *port, sal_proto_t proto)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	71fb      	strb	r3, [r7, #7]
    if (g_sal_module && g_sal_module->connect) {
 800b2e2:	4b0c      	ldr	r3, [pc, #48]	; (800b314 <tos_sal_module_connect+0x40>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00d      	beq.n	800b306 <tos_sal_module_connect+0x32>
 800b2ea:	4b0a      	ldr	r3, [pc, #40]	; (800b314 <tos_sal_module_connect+0x40>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d008      	beq.n	800b306 <tos_sal_module_connect+0x32>
        return g_sal_module->connect(ip, port, proto);
 800b2f4:	4b07      	ldr	r3, [pc, #28]	; (800b314 <tos_sal_module_connect+0x40>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	79fa      	ldrb	r2, [r7, #7]
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	4798      	blx	r3
 800b302:	4603      	mov	r3, r0
 800b304:	e001      	b.n	800b30a <tos_sal_module_connect+0x36>
    }
    return -1;
 800b306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	20001220 	.word	0x20001220

0800b318 <tos_sal_module_send>:

int tos_sal_module_send(int sock, const void *buf, size_t len)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
    if (g_sal_module && g_sal_module->send) {
 800b324:	4b0b      	ldr	r3, [pc, #44]	; (800b354 <tos_sal_module_send+0x3c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00d      	beq.n	800b348 <tos_sal_module_send+0x30>
 800b32c:	4b09      	ldr	r3, [pc, #36]	; (800b354 <tos_sal_module_send+0x3c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d008      	beq.n	800b348 <tos_sal_module_send+0x30>
        return g_sal_module->send(sock, buf, len);
 800b336:	4b07      	ldr	r3, [pc, #28]	; (800b354 <tos_sal_module_send+0x3c>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	68b9      	ldr	r1, [r7, #8]
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	4798      	blx	r3
 800b344:	4603      	mov	r3, r0
 800b346:	e001      	b.n	800b34c <tos_sal_module_send+0x34>
    }
    return -1;
 800b348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20001220 	.word	0x20001220

0800b358 <tos_sal_module_recv_timeout>:
    }
    return -1;
}

int tos_sal_module_recv_timeout(int sock, void *buf, size_t len, uint32_t timeout)
{
 800b358:	b590      	push	{r4, r7, lr}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
 800b364:	603b      	str	r3, [r7, #0]
    if (g_sal_module && g_sal_module->recv_timeout) {
 800b366:	4b0c      	ldr	r3, [pc, #48]	; (800b398 <tos_sal_module_recv_timeout+0x40>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00e      	beq.n	800b38c <tos_sal_module_recv_timeout+0x34>
 800b36e:	4b0a      	ldr	r3, [pc, #40]	; (800b398 <tos_sal_module_recv_timeout+0x40>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d009      	beq.n	800b38c <tos_sal_module_recv_timeout+0x34>
        return g_sal_module->recv_timeout(sock, buf, len, timeout);
 800b378:	4b07      	ldr	r3, [pc, #28]	; (800b398 <tos_sal_module_recv_timeout+0x40>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	699c      	ldr	r4, [r3, #24]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	47a0      	blx	r4
 800b388:	4603      	mov	r3, r0
 800b38a:	e001      	b.n	800b390 <tos_sal_module_recv_timeout+0x38>
    }
    return -1;
 800b38c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	bd90      	pop	{r4, r7, pc}
 800b398:	20001220 	.word	0x20001220

0800b39c <tos_sal_module_close>:
    }
    return -1;
}

int tos_sal_module_close(int sock)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
    if (g_sal_module && g_sal_module->close) {
 800b3a4:	4b0a      	ldr	r3, [pc, #40]	; (800b3d0 <tos_sal_module_close+0x34>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <tos_sal_module_close+0x28>
 800b3ac:	4b08      	ldr	r3, [pc, #32]	; (800b3d0 <tos_sal_module_close+0x34>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d006      	beq.n	800b3c4 <tos_sal_module_close+0x28>
        return g_sal_module->close(sock);
 800b3b6:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <tos_sal_module_close+0x34>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	4798      	blx	r3
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	e001      	b.n	800b3c8 <tos_sal_module_close+0x2c>
    }
    return -1;
 800b3c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	20001220 	.word	0x20001220

0800b3d4 <priority_cmsis2knl>:
#include <string.h>
#include "cmsis_os.h"

static k_prio_t priority_cmsis2knl(osPriority prio)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	80fb      	strh	r3, [r7, #6]
    if (prio == osPriorityError) {
 800b3de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3e2:	2b84      	cmp	r3, #132	; 0x84
 800b3e4:	d101      	bne.n	800b3ea <priority_cmsis2knl+0x16>
        return K_TASK_PRIO_INVALID;
 800b3e6:	230a      	movs	r3, #10
 800b3e8:	e004      	b.n	800b3f4 <priority_cmsis2knl+0x20>
    }

    return (k_prio_t)(3 - prio);
 800b3ea:	88fb      	ldrh	r3, [r7, #6]
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	f1c3 0303 	rsb	r3, r3, #3
 800b3f2:	b2db      	uxtb	r3, r3
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <errno_knl2cmsis>:
{
    return (osPriority)(3 - prio);
}

static osStatus errno_knl2cmsis(k_err_t err)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	80fb      	strh	r3, [r7, #6]
    return err == K_ERR_NONE ? osOK : osErrorOS;
 800b40a:	88fb      	ldrh	r3, [r7, #6]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <errno_knl2cmsis+0x14>
 800b410:	2300      	movs	r3, #0
 800b412:	e000      	b.n	800b416 <errno_knl2cmsis+0x16>
 800b414:	23ff      	movs	r3, #255	; 0xff
}
 800b416:	4618      	mov	r0, r3
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <osKernelStart>:

//  ==== Kernel Control Functions ====
osStatus osKernelStart(void)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	af00      	add	r7, sp, #0
    return errno_knl2cmsis(tos_knl_start());
 800b426:	f7fd fe7d 	bl	8009124 <tos_knl_start>
 800b42a:	4603      	mov	r3, r0
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7ff ffe7 	bl	800b400 <errno_knl2cmsis>
 800b432:	4603      	mov	r3, r0
}
 800b434:	4618      	mov	r0, r3
 800b436:	bd80      	pop	{r7, pc}

0800b438 <osKernelInitialize>:
/**
 * @brief Initialize the RTOS Kernel for creating objects.
 * @return status code that indicates the execution status of the function.
 */
osStatus osKernelInitialize(void)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	af00      	add	r7, sp, #0
    return errno_knl2cmsis(tos_knl_init());
 800b43c:	f7fd fd6c 	bl	8008f18 <tos_knl_init>
 800b440:	4603      	mov	r3, r0
 800b442:	4618      	mov	r0, r3
 800b444:	f7ff ffdc 	bl	800b400 <errno_knl2cmsis>
 800b448:	4603      	mov	r3, r0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <osThreadCreate>:
 * @param[in]   thread_def  thread definition referenced with \ref osThread.
 * @param[in]   argument    pointer that is passed to the thread function as start argument.
 * @return  thread ID for reference by other functions or NULL in case of error.
 */
osThreadId osThreadCreate(const osThreadDef_t *thread_def, void *argument)
{
 800b44e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b450:	b089      	sub	sp, #36	; 0x24
 800b452:	af04      	add	r7, sp, #16
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	6039      	str	r1, [r7, #0]
    k_err_t err;

    if (!thread_def) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <osThreadCreate+0x14>
        return NULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	e026      	b.n	800b4b0 <osThreadCreate+0x62>
                                thread_def->stacksize, thread_def->timeslice);
        return err == K_ERR_NONE ? task : NULL;
    }
#endif

    err = tos_task_create((k_task_t *)thread_def->task, thread_def->name, (k_task_entry_t)thread_def->pthread,
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	69dc      	ldr	r4, [r3, #28]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681d      	ldr	r5, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685e      	ldr	r6, [r3, #4]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff ffad 	bl	800b3d4 <priority_cmsis2knl>
 800b47a:	4603      	mov	r3, r0
 800b47c:	4618      	mov	r0, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	691b      	ldr	r3, [r3, #16]
                            argument, priority_cmsis2knl(thread_def->tpriority), thread_def->stackbase,
                            thread_def->stacksize, thread_def->timeslice);
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	6952      	ldr	r2, [r2, #20]
    err = tos_task_create((k_task_t *)thread_def->task, thread_def->name, (k_task_entry_t)thread_def->pthread,
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	6989      	ldr	r1, [r1, #24]
 800b48a:	9103      	str	r1, [sp, #12]
 800b48c:	9202      	str	r2, [sp, #8]
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	9000      	str	r0, [sp, #0]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	4632      	mov	r2, r6
 800b496:	4629      	mov	r1, r5
 800b498:	4620      	mov	r0, r4
 800b49a:	f7fe f895 	bl	80095c8 <tos_task_create>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	81fb      	strh	r3, [r7, #14]

    return err == K_ERR_NONE ? thread_def->task : NULL;
 800b4a2:	89fb      	ldrh	r3, [r7, #14]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d102      	bne.n	800b4ae <osThreadCreate+0x60>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	e000      	b.n	800b4b0 <osThreadCreate+0x62>
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4b8 <osThreadGetId>:
/**
 * @brief Return the thread ID of the current running thread.
 * @return thread ID for reference by other functions or NULL in case of error.
 */
osThreadId osThreadGetId(void)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	af00      	add	r7, sp, #0
    return k_curr_task;
 800b4bc:	4b03      	ldr	r3, [pc, #12]	; (800b4cc <osThreadGetId+0x14>)
 800b4be:	681b      	ldr	r3, [r3, #0]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	20000688 	.word	0x20000688

0800b4d0 <__errno>:
 800b4d0:	4b01      	ldr	r3, [pc, #4]	; (800b4d8 <__errno+0x8>)
 800b4d2:	6818      	ldr	r0, [r3, #0]
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	200003d0 	.word	0x200003d0

0800b4dc <__libc_init_array>:
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	4e0d      	ldr	r6, [pc, #52]	; (800b514 <__libc_init_array+0x38>)
 800b4e0:	4c0d      	ldr	r4, [pc, #52]	; (800b518 <__libc_init_array+0x3c>)
 800b4e2:	1ba4      	subs	r4, r4, r6
 800b4e4:	10a4      	asrs	r4, r4, #2
 800b4e6:	2500      	movs	r5, #0
 800b4e8:	42a5      	cmp	r5, r4
 800b4ea:	d109      	bne.n	800b500 <__libc_init_array+0x24>
 800b4ec:	4e0b      	ldr	r6, [pc, #44]	; (800b51c <__libc_init_array+0x40>)
 800b4ee:	4c0c      	ldr	r4, [pc, #48]	; (800b520 <__libc_init_array+0x44>)
 800b4f0:	f001 f96a 	bl	800c7c8 <_init>
 800b4f4:	1ba4      	subs	r4, r4, r6
 800b4f6:	10a4      	asrs	r4, r4, #2
 800b4f8:	2500      	movs	r5, #0
 800b4fa:	42a5      	cmp	r5, r4
 800b4fc:	d105      	bne.n	800b50a <__libc_init_array+0x2e>
 800b4fe:	bd70      	pop	{r4, r5, r6, pc}
 800b500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b504:	4798      	blx	r3
 800b506:	3501      	adds	r5, #1
 800b508:	e7ee      	b.n	800b4e8 <__libc_init_array+0xc>
 800b50a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b50e:	4798      	blx	r3
 800b510:	3501      	adds	r5, #1
 800b512:	e7f2      	b.n	800b4fa <__libc_init_array+0x1e>
 800b514:	0800d068 	.word	0x0800d068
 800b518:	0800d068 	.word	0x0800d068
 800b51c:	0800d068 	.word	0x0800d068
 800b520:	0800d06c 	.word	0x0800d06c

0800b524 <memcpy>:
 800b524:	b510      	push	{r4, lr}
 800b526:	1e43      	subs	r3, r0, #1
 800b528:	440a      	add	r2, r1
 800b52a:	4291      	cmp	r1, r2
 800b52c:	d100      	bne.n	800b530 <memcpy+0xc>
 800b52e:	bd10      	pop	{r4, pc}
 800b530:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b534:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b538:	e7f7      	b.n	800b52a <memcpy+0x6>

0800b53a <memset>:
 800b53a:	4402      	add	r2, r0
 800b53c:	4603      	mov	r3, r0
 800b53e:	4293      	cmp	r3, r2
 800b540:	d100      	bne.n	800b544 <memset+0xa>
 800b542:	4770      	bx	lr
 800b544:	f803 1b01 	strb.w	r1, [r3], #1
 800b548:	e7f9      	b.n	800b53e <memset+0x4>
	...

0800b54c <siscanf>:
 800b54c:	b40e      	push	{r1, r2, r3}
 800b54e:	b530      	push	{r4, r5, lr}
 800b550:	b09c      	sub	sp, #112	; 0x70
 800b552:	ac1f      	add	r4, sp, #124	; 0x7c
 800b554:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b558:	f854 5b04 	ldr.w	r5, [r4], #4
 800b55c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b560:	9002      	str	r0, [sp, #8]
 800b562:	9006      	str	r0, [sp, #24]
 800b564:	f7f4 fea4 	bl	80002b0 <strlen>
 800b568:	4b0b      	ldr	r3, [pc, #44]	; (800b598 <siscanf+0x4c>)
 800b56a:	9003      	str	r0, [sp, #12]
 800b56c:	9007      	str	r0, [sp, #28]
 800b56e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b570:	480a      	ldr	r0, [pc, #40]	; (800b59c <siscanf+0x50>)
 800b572:	9401      	str	r4, [sp, #4]
 800b574:	2300      	movs	r3, #0
 800b576:	930f      	str	r3, [sp, #60]	; 0x3c
 800b578:	9314      	str	r3, [sp, #80]	; 0x50
 800b57a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b57e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b582:	462a      	mov	r2, r5
 800b584:	4623      	mov	r3, r4
 800b586:	a902      	add	r1, sp, #8
 800b588:	6800      	ldr	r0, [r0, #0]
 800b58a:	f000 fa33 	bl	800b9f4 <__ssvfiscanf_r>
 800b58e:	b01c      	add	sp, #112	; 0x70
 800b590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b594:	b003      	add	sp, #12
 800b596:	4770      	bx	lr
 800b598:	0800b5a1 	.word	0x0800b5a1
 800b59c:	200003d0 	.word	0x200003d0

0800b5a0 <__seofread>:
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	4770      	bx	lr

0800b5a4 <strncmp>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	b16a      	cbz	r2, 800b5c4 <strncmp+0x20>
 800b5a8:	3901      	subs	r1, #1
 800b5aa:	1884      	adds	r4, r0, r2
 800b5ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b5b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d103      	bne.n	800b5c0 <strncmp+0x1c>
 800b5b8:	42a0      	cmp	r0, r4
 800b5ba:	d001      	beq.n	800b5c0 <strncmp+0x1c>
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1f5      	bne.n	800b5ac <strncmp+0x8>
 800b5c0:	1a98      	subs	r0, r3, r2
 800b5c2:	bd10      	pop	{r4, pc}
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	e7fc      	b.n	800b5c2 <strncmp+0x1e>

0800b5c8 <strncpy>:
 800b5c8:	b570      	push	{r4, r5, r6, lr}
 800b5ca:	3901      	subs	r1, #1
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	b902      	cbnz	r2, 800b5d2 <strncpy+0xa>
 800b5d0:	bd70      	pop	{r4, r5, r6, pc}
 800b5d2:	4623      	mov	r3, r4
 800b5d4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800b5d8:	f803 5b01 	strb.w	r5, [r3], #1
 800b5dc:	1e56      	subs	r6, r2, #1
 800b5de:	b92d      	cbnz	r5, 800b5ec <strncpy+0x24>
 800b5e0:	4414      	add	r4, r2
 800b5e2:	42a3      	cmp	r3, r4
 800b5e4:	d0f4      	beq.n	800b5d0 <strncpy+0x8>
 800b5e6:	f803 5b01 	strb.w	r5, [r3], #1
 800b5ea:	e7fa      	b.n	800b5e2 <strncpy+0x1a>
 800b5ec:	461c      	mov	r4, r3
 800b5ee:	4632      	mov	r2, r6
 800b5f0:	e7ed      	b.n	800b5ce <strncpy+0x6>

0800b5f2 <strstr>:
 800b5f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5f4:	7803      	ldrb	r3, [r0, #0]
 800b5f6:	b17b      	cbz	r3, 800b618 <strstr+0x26>
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	7823      	ldrb	r3, [r4, #0]
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	1c66      	adds	r6, r4, #1
 800b600:	b17b      	cbz	r3, 800b622 <strstr+0x30>
 800b602:	1e4a      	subs	r2, r1, #1
 800b604:	1e63      	subs	r3, r4, #1
 800b606:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b60a:	b14d      	cbz	r5, 800b620 <strstr+0x2e>
 800b60c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800b610:	42af      	cmp	r7, r5
 800b612:	4634      	mov	r4, r6
 800b614:	d0f7      	beq.n	800b606 <strstr+0x14>
 800b616:	e7f0      	b.n	800b5fa <strstr+0x8>
 800b618:	780b      	ldrb	r3, [r1, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	bf18      	it	ne
 800b61e:	2000      	movne	r0, #0
 800b620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b622:	4618      	mov	r0, r3
 800b624:	e7fc      	b.n	800b620 <strstr+0x2e>

0800b626 <_vsniprintf_r>:
 800b626:	b530      	push	{r4, r5, lr}
 800b628:	1e14      	subs	r4, r2, #0
 800b62a:	4605      	mov	r5, r0
 800b62c:	b09b      	sub	sp, #108	; 0x6c
 800b62e:	4618      	mov	r0, r3
 800b630:	da05      	bge.n	800b63e <_vsniprintf_r+0x18>
 800b632:	238b      	movs	r3, #139	; 0x8b
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	f04f 30ff 	mov.w	r0, #4294967295
 800b63a:	b01b      	add	sp, #108	; 0x6c
 800b63c:	bd30      	pop	{r4, r5, pc}
 800b63e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b642:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b646:	bf14      	ite	ne
 800b648:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b64c:	4623      	moveq	r3, r4
 800b64e:	9302      	str	r3, [sp, #8]
 800b650:	9305      	str	r3, [sp, #20]
 800b652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b656:	9100      	str	r1, [sp, #0]
 800b658:	9104      	str	r1, [sp, #16]
 800b65a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b65e:	4602      	mov	r2, r0
 800b660:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b662:	4669      	mov	r1, sp
 800b664:	4628      	mov	r0, r5
 800b666:	f000 f873 	bl	800b750 <_svfiprintf_r>
 800b66a:	1c43      	adds	r3, r0, #1
 800b66c:	bfbc      	itt	lt
 800b66e:	238b      	movlt	r3, #139	; 0x8b
 800b670:	602b      	strlt	r3, [r5, #0]
 800b672:	2c00      	cmp	r4, #0
 800b674:	d0e1      	beq.n	800b63a <_vsniprintf_r+0x14>
 800b676:	9b00      	ldr	r3, [sp, #0]
 800b678:	2200      	movs	r2, #0
 800b67a:	701a      	strb	r2, [r3, #0]
 800b67c:	e7dd      	b.n	800b63a <_vsniprintf_r+0x14>
	...

0800b680 <vsniprintf>:
 800b680:	b507      	push	{r0, r1, r2, lr}
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	4613      	mov	r3, r2
 800b686:	460a      	mov	r2, r1
 800b688:	4601      	mov	r1, r0
 800b68a:	4803      	ldr	r0, [pc, #12]	; (800b698 <vsniprintf+0x18>)
 800b68c:	6800      	ldr	r0, [r0, #0]
 800b68e:	f7ff ffca 	bl	800b626 <_vsniprintf_r>
 800b692:	b003      	add	sp, #12
 800b694:	f85d fb04 	ldr.w	pc, [sp], #4
 800b698:	200003d0 	.word	0x200003d0

0800b69c <__ssputs_r>:
 800b69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a0:	688e      	ldr	r6, [r1, #8]
 800b6a2:	429e      	cmp	r6, r3
 800b6a4:	4682      	mov	sl, r0
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	4690      	mov	r8, r2
 800b6aa:	4699      	mov	r9, r3
 800b6ac:	d837      	bhi.n	800b71e <__ssputs_r+0x82>
 800b6ae:	898a      	ldrh	r2, [r1, #12]
 800b6b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6b4:	d031      	beq.n	800b71a <__ssputs_r+0x7e>
 800b6b6:	6825      	ldr	r5, [r4, #0]
 800b6b8:	6909      	ldr	r1, [r1, #16]
 800b6ba:	1a6f      	subs	r7, r5, r1
 800b6bc:	6965      	ldr	r5, [r4, #20]
 800b6be:	2302      	movs	r3, #2
 800b6c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6c4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b6c8:	f109 0301 	add.w	r3, r9, #1
 800b6cc:	443b      	add	r3, r7
 800b6ce:	429d      	cmp	r5, r3
 800b6d0:	bf38      	it	cc
 800b6d2:	461d      	movcc	r5, r3
 800b6d4:	0553      	lsls	r3, r2, #21
 800b6d6:	d530      	bpl.n	800b73a <__ssputs_r+0x9e>
 800b6d8:	4629      	mov	r1, r5
 800b6da:	f000 ffcd 	bl	800c678 <_malloc_r>
 800b6de:	4606      	mov	r6, r0
 800b6e0:	b950      	cbnz	r0, 800b6f8 <__ssputs_r+0x5c>
 800b6e2:	230c      	movs	r3, #12
 800b6e4:	f8ca 3000 	str.w	r3, [sl]
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ee:	81a3      	strh	r3, [r4, #12]
 800b6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f8:	463a      	mov	r2, r7
 800b6fa:	6921      	ldr	r1, [r4, #16]
 800b6fc:	f7ff ff12 	bl	800b524 <memcpy>
 800b700:	89a3      	ldrh	r3, [r4, #12]
 800b702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b70a:	81a3      	strh	r3, [r4, #12]
 800b70c:	6126      	str	r6, [r4, #16]
 800b70e:	6165      	str	r5, [r4, #20]
 800b710:	443e      	add	r6, r7
 800b712:	1bed      	subs	r5, r5, r7
 800b714:	6026      	str	r6, [r4, #0]
 800b716:	60a5      	str	r5, [r4, #8]
 800b718:	464e      	mov	r6, r9
 800b71a:	454e      	cmp	r6, r9
 800b71c:	d900      	bls.n	800b720 <__ssputs_r+0x84>
 800b71e:	464e      	mov	r6, r9
 800b720:	4632      	mov	r2, r6
 800b722:	4641      	mov	r1, r8
 800b724:	6820      	ldr	r0, [r4, #0]
 800b726:	f000 ff3f 	bl	800c5a8 <memmove>
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	1b9b      	subs	r3, r3, r6
 800b72e:	60a3      	str	r3, [r4, #8]
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	441e      	add	r6, r3
 800b734:	6026      	str	r6, [r4, #0]
 800b736:	2000      	movs	r0, #0
 800b738:	e7dc      	b.n	800b6f4 <__ssputs_r+0x58>
 800b73a:	462a      	mov	r2, r5
 800b73c:	f000 fff6 	bl	800c72c <_realloc_r>
 800b740:	4606      	mov	r6, r0
 800b742:	2800      	cmp	r0, #0
 800b744:	d1e2      	bne.n	800b70c <__ssputs_r+0x70>
 800b746:	6921      	ldr	r1, [r4, #16]
 800b748:	4650      	mov	r0, sl
 800b74a:	f000 ff47 	bl	800c5dc <_free_r>
 800b74e:	e7c8      	b.n	800b6e2 <__ssputs_r+0x46>

0800b750 <_svfiprintf_r>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	461d      	mov	r5, r3
 800b756:	898b      	ldrh	r3, [r1, #12]
 800b758:	061f      	lsls	r7, r3, #24
 800b75a:	b09d      	sub	sp, #116	; 0x74
 800b75c:	4680      	mov	r8, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	4616      	mov	r6, r2
 800b762:	d50f      	bpl.n	800b784 <_svfiprintf_r+0x34>
 800b764:	690b      	ldr	r3, [r1, #16]
 800b766:	b96b      	cbnz	r3, 800b784 <_svfiprintf_r+0x34>
 800b768:	2140      	movs	r1, #64	; 0x40
 800b76a:	f000 ff85 	bl	800c678 <_malloc_r>
 800b76e:	6020      	str	r0, [r4, #0]
 800b770:	6120      	str	r0, [r4, #16]
 800b772:	b928      	cbnz	r0, 800b780 <_svfiprintf_r+0x30>
 800b774:	230c      	movs	r3, #12
 800b776:	f8c8 3000 	str.w	r3, [r8]
 800b77a:	f04f 30ff 	mov.w	r0, #4294967295
 800b77e:	e0c8      	b.n	800b912 <_svfiprintf_r+0x1c2>
 800b780:	2340      	movs	r3, #64	; 0x40
 800b782:	6163      	str	r3, [r4, #20]
 800b784:	2300      	movs	r3, #0
 800b786:	9309      	str	r3, [sp, #36]	; 0x24
 800b788:	2320      	movs	r3, #32
 800b78a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b78e:	2330      	movs	r3, #48	; 0x30
 800b790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b794:	9503      	str	r5, [sp, #12]
 800b796:	f04f 0b01 	mov.w	fp, #1
 800b79a:	4637      	mov	r7, r6
 800b79c:	463d      	mov	r5, r7
 800b79e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7a2:	b10b      	cbz	r3, 800b7a8 <_svfiprintf_r+0x58>
 800b7a4:	2b25      	cmp	r3, #37	; 0x25
 800b7a6:	d13e      	bne.n	800b826 <_svfiprintf_r+0xd6>
 800b7a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b7ac:	d00b      	beq.n	800b7c6 <_svfiprintf_r+0x76>
 800b7ae:	4653      	mov	r3, sl
 800b7b0:	4632      	mov	r2, r6
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	f7ff ff71 	bl	800b69c <__ssputs_r>
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	f000 80a4 	beq.w	800b908 <_svfiprintf_r+0x1b8>
 800b7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c2:	4453      	add	r3, sl
 800b7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c6:	783b      	ldrb	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 809d 	beq.w	800b908 <_svfiprintf_r+0x1b8>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	9307      	str	r3, [sp, #28]
 800b7dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7e0:	931a      	str	r3, [sp, #104]	; 0x68
 800b7e2:	462f      	mov	r7, r5
 800b7e4:	2205      	movs	r2, #5
 800b7e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b7ea:	4850      	ldr	r0, [pc, #320]	; (800b92c <_svfiprintf_r+0x1dc>)
 800b7ec:	f7f4 fd68 	bl	80002c0 <memchr>
 800b7f0:	9b04      	ldr	r3, [sp, #16]
 800b7f2:	b9d0      	cbnz	r0, 800b82a <_svfiprintf_r+0xda>
 800b7f4:	06d9      	lsls	r1, r3, #27
 800b7f6:	bf44      	itt	mi
 800b7f8:	2220      	movmi	r2, #32
 800b7fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b7fe:	071a      	lsls	r2, r3, #28
 800b800:	bf44      	itt	mi
 800b802:	222b      	movmi	r2, #43	; 0x2b
 800b804:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b808:	782a      	ldrb	r2, [r5, #0]
 800b80a:	2a2a      	cmp	r2, #42	; 0x2a
 800b80c:	d015      	beq.n	800b83a <_svfiprintf_r+0xea>
 800b80e:	9a07      	ldr	r2, [sp, #28]
 800b810:	462f      	mov	r7, r5
 800b812:	2000      	movs	r0, #0
 800b814:	250a      	movs	r5, #10
 800b816:	4639      	mov	r1, r7
 800b818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b81c:	3b30      	subs	r3, #48	; 0x30
 800b81e:	2b09      	cmp	r3, #9
 800b820:	d94d      	bls.n	800b8be <_svfiprintf_r+0x16e>
 800b822:	b1b8      	cbz	r0, 800b854 <_svfiprintf_r+0x104>
 800b824:	e00f      	b.n	800b846 <_svfiprintf_r+0xf6>
 800b826:	462f      	mov	r7, r5
 800b828:	e7b8      	b.n	800b79c <_svfiprintf_r+0x4c>
 800b82a:	4a40      	ldr	r2, [pc, #256]	; (800b92c <_svfiprintf_r+0x1dc>)
 800b82c:	1a80      	subs	r0, r0, r2
 800b82e:	fa0b f000 	lsl.w	r0, fp, r0
 800b832:	4318      	orrs	r0, r3
 800b834:	9004      	str	r0, [sp, #16]
 800b836:	463d      	mov	r5, r7
 800b838:	e7d3      	b.n	800b7e2 <_svfiprintf_r+0x92>
 800b83a:	9a03      	ldr	r2, [sp, #12]
 800b83c:	1d11      	adds	r1, r2, #4
 800b83e:	6812      	ldr	r2, [r2, #0]
 800b840:	9103      	str	r1, [sp, #12]
 800b842:	2a00      	cmp	r2, #0
 800b844:	db01      	blt.n	800b84a <_svfiprintf_r+0xfa>
 800b846:	9207      	str	r2, [sp, #28]
 800b848:	e004      	b.n	800b854 <_svfiprintf_r+0x104>
 800b84a:	4252      	negs	r2, r2
 800b84c:	f043 0302 	orr.w	r3, r3, #2
 800b850:	9207      	str	r2, [sp, #28]
 800b852:	9304      	str	r3, [sp, #16]
 800b854:	783b      	ldrb	r3, [r7, #0]
 800b856:	2b2e      	cmp	r3, #46	; 0x2e
 800b858:	d10c      	bne.n	800b874 <_svfiprintf_r+0x124>
 800b85a:	787b      	ldrb	r3, [r7, #1]
 800b85c:	2b2a      	cmp	r3, #42	; 0x2a
 800b85e:	d133      	bne.n	800b8c8 <_svfiprintf_r+0x178>
 800b860:	9b03      	ldr	r3, [sp, #12]
 800b862:	1d1a      	adds	r2, r3, #4
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	9203      	str	r2, [sp, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	bfb8      	it	lt
 800b86c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b870:	3702      	adds	r7, #2
 800b872:	9305      	str	r3, [sp, #20]
 800b874:	4d2e      	ldr	r5, [pc, #184]	; (800b930 <_svfiprintf_r+0x1e0>)
 800b876:	7839      	ldrb	r1, [r7, #0]
 800b878:	2203      	movs	r2, #3
 800b87a:	4628      	mov	r0, r5
 800b87c:	f7f4 fd20 	bl	80002c0 <memchr>
 800b880:	b138      	cbz	r0, 800b892 <_svfiprintf_r+0x142>
 800b882:	2340      	movs	r3, #64	; 0x40
 800b884:	1b40      	subs	r0, r0, r5
 800b886:	fa03 f000 	lsl.w	r0, r3, r0
 800b88a:	9b04      	ldr	r3, [sp, #16]
 800b88c:	4303      	orrs	r3, r0
 800b88e:	3701      	adds	r7, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	7839      	ldrb	r1, [r7, #0]
 800b894:	4827      	ldr	r0, [pc, #156]	; (800b934 <_svfiprintf_r+0x1e4>)
 800b896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b89a:	2206      	movs	r2, #6
 800b89c:	1c7e      	adds	r6, r7, #1
 800b89e:	f7f4 fd0f 	bl	80002c0 <memchr>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d038      	beq.n	800b918 <_svfiprintf_r+0x1c8>
 800b8a6:	4b24      	ldr	r3, [pc, #144]	; (800b938 <_svfiprintf_r+0x1e8>)
 800b8a8:	bb13      	cbnz	r3, 800b8f0 <_svfiprintf_r+0x1a0>
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	3307      	adds	r3, #7
 800b8ae:	f023 0307 	bic.w	r3, r3, #7
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	9303      	str	r3, [sp, #12]
 800b8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b8:	444b      	add	r3, r9
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	e76d      	b.n	800b79a <_svfiprintf_r+0x4a>
 800b8be:	fb05 3202 	mla	r2, r5, r2, r3
 800b8c2:	2001      	movs	r0, #1
 800b8c4:	460f      	mov	r7, r1
 800b8c6:	e7a6      	b.n	800b816 <_svfiprintf_r+0xc6>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	3701      	adds	r7, #1
 800b8cc:	9305      	str	r3, [sp, #20]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	250a      	movs	r5, #10
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8d8:	3a30      	subs	r2, #48	; 0x30
 800b8da:	2a09      	cmp	r2, #9
 800b8dc:	d903      	bls.n	800b8e6 <_svfiprintf_r+0x196>
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d0c8      	beq.n	800b874 <_svfiprintf_r+0x124>
 800b8e2:	9105      	str	r1, [sp, #20]
 800b8e4:	e7c6      	b.n	800b874 <_svfiprintf_r+0x124>
 800b8e6:	fb05 2101 	mla	r1, r5, r1, r2
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	e7f0      	b.n	800b8d2 <_svfiprintf_r+0x182>
 800b8f0:	ab03      	add	r3, sp, #12
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	4622      	mov	r2, r4
 800b8f6:	4b11      	ldr	r3, [pc, #68]	; (800b93c <_svfiprintf_r+0x1ec>)
 800b8f8:	a904      	add	r1, sp, #16
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	f3af 8000 	nop.w
 800b900:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b904:	4681      	mov	r9, r0
 800b906:	d1d6      	bne.n	800b8b6 <_svfiprintf_r+0x166>
 800b908:	89a3      	ldrh	r3, [r4, #12]
 800b90a:	065b      	lsls	r3, r3, #25
 800b90c:	f53f af35 	bmi.w	800b77a <_svfiprintf_r+0x2a>
 800b910:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b912:	b01d      	add	sp, #116	; 0x74
 800b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b918:	ab03      	add	r3, sp, #12
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	4622      	mov	r2, r4
 800b91e:	4b07      	ldr	r3, [pc, #28]	; (800b93c <_svfiprintf_r+0x1ec>)
 800b920:	a904      	add	r1, sp, #16
 800b922:	4640      	mov	r0, r8
 800b924:	f000 fa2c 	bl	800bd80 <_printf_i>
 800b928:	e7ea      	b.n	800b900 <_svfiprintf_r+0x1b0>
 800b92a:	bf00      	nop
 800b92c:	0800cea4 	.word	0x0800cea4
 800b930:	0800ceaa 	.word	0x0800ceaa
 800b934:	0800ceae 	.word	0x0800ceae
 800b938:	00000000 	.word	0x00000000
 800b93c:	0800b69d 	.word	0x0800b69d

0800b940 <_sungetc_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	1c4b      	adds	r3, r1, #1
 800b944:	4614      	mov	r4, r2
 800b946:	d103      	bne.n	800b950 <_sungetc_r+0x10>
 800b948:	f04f 35ff 	mov.w	r5, #4294967295
 800b94c:	4628      	mov	r0, r5
 800b94e:	bd38      	pop	{r3, r4, r5, pc}
 800b950:	8993      	ldrh	r3, [r2, #12]
 800b952:	f023 0320 	bic.w	r3, r3, #32
 800b956:	8193      	strh	r3, [r2, #12]
 800b958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b95a:	6852      	ldr	r2, [r2, #4]
 800b95c:	b2cd      	uxtb	r5, r1
 800b95e:	b18b      	cbz	r3, 800b984 <_sungetc_r+0x44>
 800b960:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b962:	4293      	cmp	r3, r2
 800b964:	dd08      	ble.n	800b978 <_sungetc_r+0x38>
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	1e5a      	subs	r2, r3, #1
 800b96a:	6022      	str	r2, [r4, #0]
 800b96c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b970:	6863      	ldr	r3, [r4, #4]
 800b972:	3301      	adds	r3, #1
 800b974:	6063      	str	r3, [r4, #4]
 800b976:	e7e9      	b.n	800b94c <_sungetc_r+0xc>
 800b978:	4621      	mov	r1, r4
 800b97a:	f000 fdb7 	bl	800c4ec <__submore>
 800b97e:	2800      	cmp	r0, #0
 800b980:	d0f1      	beq.n	800b966 <_sungetc_r+0x26>
 800b982:	e7e1      	b.n	800b948 <_sungetc_r+0x8>
 800b984:	6921      	ldr	r1, [r4, #16]
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	b151      	cbz	r1, 800b9a0 <_sungetc_r+0x60>
 800b98a:	4299      	cmp	r1, r3
 800b98c:	d208      	bcs.n	800b9a0 <_sungetc_r+0x60>
 800b98e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b992:	42a9      	cmp	r1, r5
 800b994:	d104      	bne.n	800b9a0 <_sungetc_r+0x60>
 800b996:	3b01      	subs	r3, #1
 800b998:	3201      	adds	r2, #1
 800b99a:	6023      	str	r3, [r4, #0]
 800b99c:	6062      	str	r2, [r4, #4]
 800b99e:	e7d5      	b.n	800b94c <_sungetc_r+0xc>
 800b9a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b9a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	63a3      	str	r3, [r4, #56]	; 0x38
 800b9ae:	4623      	mov	r3, r4
 800b9b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e7dc      	b.n	800b974 <_sungetc_r+0x34>

0800b9ba <__ssrefill_r>:
 800b9ba:	b510      	push	{r4, lr}
 800b9bc:	460c      	mov	r4, r1
 800b9be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b9c0:	b169      	cbz	r1, 800b9de <__ssrefill_r+0x24>
 800b9c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9c6:	4299      	cmp	r1, r3
 800b9c8:	d001      	beq.n	800b9ce <__ssrefill_r+0x14>
 800b9ca:	f000 fe07 	bl	800c5dc <_free_r>
 800b9ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9d0:	6063      	str	r3, [r4, #4]
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	6360      	str	r0, [r4, #52]	; 0x34
 800b9d6:	b113      	cbz	r3, 800b9de <__ssrefill_r+0x24>
 800b9d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	6923      	ldr	r3, [r4, #16]
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	6063      	str	r3, [r4, #4]
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f043 0320 	orr.w	r3, r3, #32
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f2:	e7f3      	b.n	800b9dc <__ssrefill_r+0x22>

0800b9f4 <__ssvfiscanf_r>:
 800b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b9fc:	460c      	mov	r4, r1
 800b9fe:	2100      	movs	r1, #0
 800ba00:	9144      	str	r1, [sp, #272]	; 0x110
 800ba02:	9145      	str	r1, [sp, #276]	; 0x114
 800ba04:	499f      	ldr	r1, [pc, #636]	; (800bc84 <__ssvfiscanf_r+0x290>)
 800ba06:	91a0      	str	r1, [sp, #640]	; 0x280
 800ba08:	f10d 0804 	add.w	r8, sp, #4
 800ba0c:	499e      	ldr	r1, [pc, #632]	; (800bc88 <__ssvfiscanf_r+0x294>)
 800ba0e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800bc8c <__ssvfiscanf_r+0x298>
 800ba12:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ba16:	4606      	mov	r6, r0
 800ba18:	4692      	mov	sl, r2
 800ba1a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	270a      	movs	r7, #10
 800ba20:	f89a 3000 	ldrb.w	r3, [sl]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 812a 	beq.w	800bc7e <__ssvfiscanf_r+0x28a>
 800ba2a:	4655      	mov	r5, sl
 800ba2c:	f000 fd9c 	bl	800c568 <__locale_ctype_ptr>
 800ba30:	f815 bb01 	ldrb.w	fp, [r5], #1
 800ba34:	4458      	add	r0, fp
 800ba36:	7843      	ldrb	r3, [r0, #1]
 800ba38:	f013 0308 	ands.w	r3, r3, #8
 800ba3c:	d01c      	beq.n	800ba78 <__ssvfiscanf_r+0x84>
 800ba3e:	6863      	ldr	r3, [r4, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	dd12      	ble.n	800ba6a <__ssvfiscanf_r+0x76>
 800ba44:	f000 fd90 	bl	800c568 <__locale_ctype_ptr>
 800ba48:	6823      	ldr	r3, [r4, #0]
 800ba4a:	781a      	ldrb	r2, [r3, #0]
 800ba4c:	4410      	add	r0, r2
 800ba4e:	7842      	ldrb	r2, [r0, #1]
 800ba50:	0712      	lsls	r2, r2, #28
 800ba52:	d401      	bmi.n	800ba58 <__ssvfiscanf_r+0x64>
 800ba54:	46aa      	mov	sl, r5
 800ba56:	e7e3      	b.n	800ba20 <__ssvfiscanf_r+0x2c>
 800ba58:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba5a:	3201      	adds	r2, #1
 800ba5c:	9245      	str	r2, [sp, #276]	; 0x114
 800ba5e:	6862      	ldr	r2, [r4, #4]
 800ba60:	3301      	adds	r3, #1
 800ba62:	3a01      	subs	r2, #1
 800ba64:	6062      	str	r2, [r4, #4]
 800ba66:	6023      	str	r3, [r4, #0]
 800ba68:	e7e9      	b.n	800ba3e <__ssvfiscanf_r+0x4a>
 800ba6a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4798      	blx	r3
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d0e6      	beq.n	800ba44 <__ssvfiscanf_r+0x50>
 800ba76:	e7ed      	b.n	800ba54 <__ssvfiscanf_r+0x60>
 800ba78:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800ba7c:	f040 8082 	bne.w	800bb84 <__ssvfiscanf_r+0x190>
 800ba80:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba82:	9341      	str	r3, [sp, #260]	; 0x104
 800ba84:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ba88:	2b2a      	cmp	r3, #42	; 0x2a
 800ba8a:	d103      	bne.n	800ba94 <__ssvfiscanf_r+0xa0>
 800ba8c:	2310      	movs	r3, #16
 800ba8e:	9341      	str	r3, [sp, #260]	; 0x104
 800ba90:	f10a 0502 	add.w	r5, sl, #2
 800ba94:	46aa      	mov	sl, r5
 800ba96:	f815 1b01 	ldrb.w	r1, [r5], #1
 800ba9a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ba9e:	2a09      	cmp	r2, #9
 800baa0:	d922      	bls.n	800bae8 <__ssvfiscanf_r+0xf4>
 800baa2:	2203      	movs	r2, #3
 800baa4:	4879      	ldr	r0, [pc, #484]	; (800bc8c <__ssvfiscanf_r+0x298>)
 800baa6:	f7f4 fc0b 	bl	80002c0 <memchr>
 800baaa:	b138      	cbz	r0, 800babc <__ssvfiscanf_r+0xc8>
 800baac:	eba0 0309 	sub.w	r3, r0, r9
 800bab0:	2001      	movs	r0, #1
 800bab2:	4098      	lsls	r0, r3
 800bab4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bab6:	4318      	orrs	r0, r3
 800bab8:	9041      	str	r0, [sp, #260]	; 0x104
 800baba:	46aa      	mov	sl, r5
 800babc:	f89a 3000 	ldrb.w	r3, [sl]
 800bac0:	2b67      	cmp	r3, #103	; 0x67
 800bac2:	f10a 0501 	add.w	r5, sl, #1
 800bac6:	d82b      	bhi.n	800bb20 <__ssvfiscanf_r+0x12c>
 800bac8:	2b65      	cmp	r3, #101	; 0x65
 800baca:	f080 809f 	bcs.w	800bc0c <__ssvfiscanf_r+0x218>
 800bace:	2b47      	cmp	r3, #71	; 0x47
 800bad0:	d810      	bhi.n	800baf4 <__ssvfiscanf_r+0x100>
 800bad2:	2b45      	cmp	r3, #69	; 0x45
 800bad4:	f080 809a 	bcs.w	800bc0c <__ssvfiscanf_r+0x218>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d06c      	beq.n	800bbb6 <__ssvfiscanf_r+0x1c2>
 800badc:	2b25      	cmp	r3, #37	; 0x25
 800bade:	d051      	beq.n	800bb84 <__ssvfiscanf_r+0x190>
 800bae0:	2303      	movs	r3, #3
 800bae2:	9347      	str	r3, [sp, #284]	; 0x11c
 800bae4:	9742      	str	r7, [sp, #264]	; 0x108
 800bae6:	e027      	b.n	800bb38 <__ssvfiscanf_r+0x144>
 800bae8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800baea:	fb07 1303 	mla	r3, r7, r3, r1
 800baee:	3b30      	subs	r3, #48	; 0x30
 800baf0:	9343      	str	r3, [sp, #268]	; 0x10c
 800baf2:	e7cf      	b.n	800ba94 <__ssvfiscanf_r+0xa0>
 800baf4:	2b5b      	cmp	r3, #91	; 0x5b
 800baf6:	d06a      	beq.n	800bbce <__ssvfiscanf_r+0x1da>
 800baf8:	d80c      	bhi.n	800bb14 <__ssvfiscanf_r+0x120>
 800bafa:	2b58      	cmp	r3, #88	; 0x58
 800bafc:	d1f0      	bne.n	800bae0 <__ssvfiscanf_r+0xec>
 800bafe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bb00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb04:	9241      	str	r2, [sp, #260]	; 0x104
 800bb06:	2210      	movs	r2, #16
 800bb08:	9242      	str	r2, [sp, #264]	; 0x108
 800bb0a:	2b6e      	cmp	r3, #110	; 0x6e
 800bb0c:	bf8c      	ite	hi
 800bb0e:	2304      	movhi	r3, #4
 800bb10:	2303      	movls	r3, #3
 800bb12:	e010      	b.n	800bb36 <__ssvfiscanf_r+0x142>
 800bb14:	2b63      	cmp	r3, #99	; 0x63
 800bb16:	d065      	beq.n	800bbe4 <__ssvfiscanf_r+0x1f0>
 800bb18:	2b64      	cmp	r3, #100	; 0x64
 800bb1a:	d1e1      	bne.n	800bae0 <__ssvfiscanf_r+0xec>
 800bb1c:	9742      	str	r7, [sp, #264]	; 0x108
 800bb1e:	e7f4      	b.n	800bb0a <__ssvfiscanf_r+0x116>
 800bb20:	2b70      	cmp	r3, #112	; 0x70
 800bb22:	d04b      	beq.n	800bbbc <__ssvfiscanf_r+0x1c8>
 800bb24:	d826      	bhi.n	800bb74 <__ssvfiscanf_r+0x180>
 800bb26:	2b6e      	cmp	r3, #110	; 0x6e
 800bb28:	d062      	beq.n	800bbf0 <__ssvfiscanf_r+0x1fc>
 800bb2a:	d84c      	bhi.n	800bbc6 <__ssvfiscanf_r+0x1d2>
 800bb2c:	2b69      	cmp	r3, #105	; 0x69
 800bb2e:	d1d7      	bne.n	800bae0 <__ssvfiscanf_r+0xec>
 800bb30:	2300      	movs	r3, #0
 800bb32:	9342      	str	r3, [sp, #264]	; 0x108
 800bb34:	2303      	movs	r3, #3
 800bb36:	9347      	str	r3, [sp, #284]	; 0x11c
 800bb38:	6863      	ldr	r3, [r4, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	dd68      	ble.n	800bc10 <__ssvfiscanf_r+0x21c>
 800bb3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb40:	0659      	lsls	r1, r3, #25
 800bb42:	d407      	bmi.n	800bb54 <__ssvfiscanf_r+0x160>
 800bb44:	f000 fd10 	bl	800c568 <__locale_ctype_ptr>
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	781a      	ldrb	r2, [r3, #0]
 800bb4c:	4410      	add	r0, r2
 800bb4e:	7842      	ldrb	r2, [r0, #1]
 800bb50:	0712      	lsls	r2, r2, #28
 800bb52:	d464      	bmi.n	800bc1e <__ssvfiscanf_r+0x22a>
 800bb54:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	dc73      	bgt.n	800bc42 <__ssvfiscanf_r+0x24e>
 800bb5a:	466b      	mov	r3, sp
 800bb5c:	4622      	mov	r2, r4
 800bb5e:	a941      	add	r1, sp, #260	; 0x104
 800bb60:	4630      	mov	r0, r6
 800bb62:	f000 fa1f 	bl	800bfa4 <_scanf_chars>
 800bb66:	2801      	cmp	r0, #1
 800bb68:	f000 8089 	beq.w	800bc7e <__ssvfiscanf_r+0x28a>
 800bb6c:	2802      	cmp	r0, #2
 800bb6e:	f47f af71 	bne.w	800ba54 <__ssvfiscanf_r+0x60>
 800bb72:	e01d      	b.n	800bbb0 <__ssvfiscanf_r+0x1bc>
 800bb74:	2b75      	cmp	r3, #117	; 0x75
 800bb76:	d0d1      	beq.n	800bb1c <__ssvfiscanf_r+0x128>
 800bb78:	2b78      	cmp	r3, #120	; 0x78
 800bb7a:	d0c0      	beq.n	800bafe <__ssvfiscanf_r+0x10a>
 800bb7c:	2b73      	cmp	r3, #115	; 0x73
 800bb7e:	d1af      	bne.n	800bae0 <__ssvfiscanf_r+0xec>
 800bb80:	2302      	movs	r3, #2
 800bb82:	e7d8      	b.n	800bb36 <__ssvfiscanf_r+0x142>
 800bb84:	6863      	ldr	r3, [r4, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	dd0c      	ble.n	800bba4 <__ssvfiscanf_r+0x1b0>
 800bb8a:	6823      	ldr	r3, [r4, #0]
 800bb8c:	781a      	ldrb	r2, [r3, #0]
 800bb8e:	455a      	cmp	r2, fp
 800bb90:	d175      	bne.n	800bc7e <__ssvfiscanf_r+0x28a>
 800bb92:	3301      	adds	r3, #1
 800bb94:	6862      	ldr	r2, [r4, #4]
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bb9a:	3a01      	subs	r2, #1
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	6062      	str	r2, [r4, #4]
 800bba0:	9345      	str	r3, [sp, #276]	; 0x114
 800bba2:	e757      	b.n	800ba54 <__ssvfiscanf_r+0x60>
 800bba4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bba6:	4621      	mov	r1, r4
 800bba8:	4630      	mov	r0, r6
 800bbaa:	4798      	blx	r3
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d0ec      	beq.n	800bb8a <__ssvfiscanf_r+0x196>
 800bbb0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d159      	bne.n	800bc6a <__ssvfiscanf_r+0x276>
 800bbb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbba:	e05c      	b.n	800bc76 <__ssvfiscanf_r+0x282>
 800bbbc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bbbe:	f042 0220 	orr.w	r2, r2, #32
 800bbc2:	9241      	str	r2, [sp, #260]	; 0x104
 800bbc4:	e79b      	b.n	800bafe <__ssvfiscanf_r+0x10a>
 800bbc6:	2308      	movs	r3, #8
 800bbc8:	9342      	str	r3, [sp, #264]	; 0x108
 800bbca:	2304      	movs	r3, #4
 800bbcc:	e7b3      	b.n	800bb36 <__ssvfiscanf_r+0x142>
 800bbce:	4629      	mov	r1, r5
 800bbd0:	4640      	mov	r0, r8
 800bbd2:	f000 fb3f 	bl	800c254 <__sccl>
 800bbd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbdc:	9341      	str	r3, [sp, #260]	; 0x104
 800bbde:	4605      	mov	r5, r0
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e7a8      	b.n	800bb36 <__ssvfiscanf_r+0x142>
 800bbe4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbea:	9341      	str	r3, [sp, #260]	; 0x104
 800bbec:	2300      	movs	r3, #0
 800bbee:	e7a2      	b.n	800bb36 <__ssvfiscanf_r+0x142>
 800bbf0:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bbf2:	06c3      	lsls	r3, r0, #27
 800bbf4:	f53f af2e 	bmi.w	800ba54 <__ssvfiscanf_r+0x60>
 800bbf8:	9b00      	ldr	r3, [sp, #0]
 800bbfa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bbfc:	1d19      	adds	r1, r3, #4
 800bbfe:	9100      	str	r1, [sp, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	07c0      	lsls	r0, r0, #31
 800bc04:	bf4c      	ite	mi
 800bc06:	801a      	strhmi	r2, [r3, #0]
 800bc08:	601a      	strpl	r2, [r3, #0]
 800bc0a:	e723      	b.n	800ba54 <__ssvfiscanf_r+0x60>
 800bc0c:	2305      	movs	r3, #5
 800bc0e:	e792      	b.n	800bb36 <__ssvfiscanf_r+0x142>
 800bc10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc12:	4621      	mov	r1, r4
 800bc14:	4630      	mov	r0, r6
 800bc16:	4798      	blx	r3
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d090      	beq.n	800bb3e <__ssvfiscanf_r+0x14a>
 800bc1c:	e7c8      	b.n	800bbb0 <__ssvfiscanf_r+0x1bc>
 800bc1e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc20:	3201      	adds	r2, #1
 800bc22:	9245      	str	r2, [sp, #276]	; 0x114
 800bc24:	6862      	ldr	r2, [r4, #4]
 800bc26:	3a01      	subs	r2, #1
 800bc28:	2a00      	cmp	r2, #0
 800bc2a:	6062      	str	r2, [r4, #4]
 800bc2c:	dd02      	ble.n	800bc34 <__ssvfiscanf_r+0x240>
 800bc2e:	3301      	adds	r3, #1
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	e787      	b.n	800bb44 <__ssvfiscanf_r+0x150>
 800bc34:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc36:	4621      	mov	r1, r4
 800bc38:	4630      	mov	r0, r6
 800bc3a:	4798      	blx	r3
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d081      	beq.n	800bb44 <__ssvfiscanf_r+0x150>
 800bc40:	e7b6      	b.n	800bbb0 <__ssvfiscanf_r+0x1bc>
 800bc42:	2b04      	cmp	r3, #4
 800bc44:	dc06      	bgt.n	800bc54 <__ssvfiscanf_r+0x260>
 800bc46:	466b      	mov	r3, sp
 800bc48:	4622      	mov	r2, r4
 800bc4a:	a941      	add	r1, sp, #260	; 0x104
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f000 fa0d 	bl	800c06c <_scanf_i>
 800bc52:	e788      	b.n	800bb66 <__ssvfiscanf_r+0x172>
 800bc54:	4b0e      	ldr	r3, [pc, #56]	; (800bc90 <__ssvfiscanf_r+0x29c>)
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f43f aefc 	beq.w	800ba54 <__ssvfiscanf_r+0x60>
 800bc5c:	466b      	mov	r3, sp
 800bc5e:	4622      	mov	r2, r4
 800bc60:	a941      	add	r1, sp, #260	; 0x104
 800bc62:	4630      	mov	r0, r6
 800bc64:	f3af 8000 	nop.w
 800bc68:	e77d      	b.n	800bb66 <__ssvfiscanf_r+0x172>
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bc70:	bf18      	it	ne
 800bc72:	f04f 30ff 	movne.w	r0, #4294967295
 800bc76:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bc80:	e7f9      	b.n	800bc76 <__ssvfiscanf_r+0x282>
 800bc82:	bf00      	nop
 800bc84:	0800b941 	.word	0x0800b941
 800bc88:	0800b9bb 	.word	0x0800b9bb
 800bc8c:	0800ceaa 	.word	0x0800ceaa
 800bc90:	00000000 	.word	0x00000000

0800bc94 <_printf_common>:
 800bc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc98:	4691      	mov	r9, r2
 800bc9a:	461f      	mov	r7, r3
 800bc9c:	688a      	ldr	r2, [r1, #8]
 800bc9e:	690b      	ldr	r3, [r1, #16]
 800bca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bca4:	4293      	cmp	r3, r2
 800bca6:	bfb8      	it	lt
 800bca8:	4613      	movlt	r3, r2
 800bcaa:	f8c9 3000 	str.w	r3, [r9]
 800bcae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	b112      	cbz	r2, 800bcbe <_printf_common+0x2a>
 800bcb8:	3301      	adds	r3, #1
 800bcba:	f8c9 3000 	str.w	r3, [r9]
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	0699      	lsls	r1, r3, #26
 800bcc2:	bf42      	ittt	mi
 800bcc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bcc8:	3302      	addmi	r3, #2
 800bcca:	f8c9 3000 	strmi.w	r3, [r9]
 800bcce:	6825      	ldr	r5, [r4, #0]
 800bcd0:	f015 0506 	ands.w	r5, r5, #6
 800bcd4:	d107      	bne.n	800bce6 <_printf_common+0x52>
 800bcd6:	f104 0a19 	add.w	sl, r4, #25
 800bcda:	68e3      	ldr	r3, [r4, #12]
 800bcdc:	f8d9 2000 	ldr.w	r2, [r9]
 800bce0:	1a9b      	subs	r3, r3, r2
 800bce2:	42ab      	cmp	r3, r5
 800bce4:	dc28      	bgt.n	800bd38 <_printf_common+0xa4>
 800bce6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bcea:	6822      	ldr	r2, [r4, #0]
 800bcec:	3300      	adds	r3, #0
 800bcee:	bf18      	it	ne
 800bcf0:	2301      	movne	r3, #1
 800bcf2:	0692      	lsls	r2, r2, #26
 800bcf4:	d42d      	bmi.n	800bd52 <_printf_common+0xbe>
 800bcf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	47c0      	blx	r8
 800bd00:	3001      	adds	r0, #1
 800bd02:	d020      	beq.n	800bd46 <_printf_common+0xb2>
 800bd04:	6823      	ldr	r3, [r4, #0]
 800bd06:	68e5      	ldr	r5, [r4, #12]
 800bd08:	f8d9 2000 	ldr.w	r2, [r9]
 800bd0c:	f003 0306 	and.w	r3, r3, #6
 800bd10:	2b04      	cmp	r3, #4
 800bd12:	bf08      	it	eq
 800bd14:	1aad      	subeq	r5, r5, r2
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	6922      	ldr	r2, [r4, #16]
 800bd1a:	bf0c      	ite	eq
 800bd1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd20:	2500      	movne	r5, #0
 800bd22:	4293      	cmp	r3, r2
 800bd24:	bfc4      	itt	gt
 800bd26:	1a9b      	subgt	r3, r3, r2
 800bd28:	18ed      	addgt	r5, r5, r3
 800bd2a:	f04f 0900 	mov.w	r9, #0
 800bd2e:	341a      	adds	r4, #26
 800bd30:	454d      	cmp	r5, r9
 800bd32:	d11a      	bne.n	800bd6a <_printf_common+0xd6>
 800bd34:	2000      	movs	r0, #0
 800bd36:	e008      	b.n	800bd4a <_printf_common+0xb6>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	4652      	mov	r2, sl
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4630      	mov	r0, r6
 800bd40:	47c0      	blx	r8
 800bd42:	3001      	adds	r0, #1
 800bd44:	d103      	bne.n	800bd4e <_printf_common+0xba>
 800bd46:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4e:	3501      	adds	r5, #1
 800bd50:	e7c3      	b.n	800bcda <_printf_common+0x46>
 800bd52:	18e1      	adds	r1, r4, r3
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	2030      	movs	r0, #48	; 0x30
 800bd58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd5c:	4422      	add	r2, r4
 800bd5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd66:	3302      	adds	r3, #2
 800bd68:	e7c5      	b.n	800bcf6 <_printf_common+0x62>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	4639      	mov	r1, r7
 800bd70:	4630      	mov	r0, r6
 800bd72:	47c0      	blx	r8
 800bd74:	3001      	adds	r0, #1
 800bd76:	d0e6      	beq.n	800bd46 <_printf_common+0xb2>
 800bd78:	f109 0901 	add.w	r9, r9, #1
 800bd7c:	e7d8      	b.n	800bd30 <_printf_common+0x9c>
	...

0800bd80 <_printf_i>:
 800bd80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bd88:	460c      	mov	r4, r1
 800bd8a:	7e09      	ldrb	r1, [r1, #24]
 800bd8c:	b085      	sub	sp, #20
 800bd8e:	296e      	cmp	r1, #110	; 0x6e
 800bd90:	4617      	mov	r7, r2
 800bd92:	4606      	mov	r6, r0
 800bd94:	4698      	mov	r8, r3
 800bd96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd98:	f000 80b3 	beq.w	800bf02 <_printf_i+0x182>
 800bd9c:	d822      	bhi.n	800bde4 <_printf_i+0x64>
 800bd9e:	2963      	cmp	r1, #99	; 0x63
 800bda0:	d036      	beq.n	800be10 <_printf_i+0x90>
 800bda2:	d80a      	bhi.n	800bdba <_printf_i+0x3a>
 800bda4:	2900      	cmp	r1, #0
 800bda6:	f000 80b9 	beq.w	800bf1c <_printf_i+0x19c>
 800bdaa:	2958      	cmp	r1, #88	; 0x58
 800bdac:	f000 8083 	beq.w	800beb6 <_printf_i+0x136>
 800bdb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bdb8:	e032      	b.n	800be20 <_printf_i+0xa0>
 800bdba:	2964      	cmp	r1, #100	; 0x64
 800bdbc:	d001      	beq.n	800bdc2 <_printf_i+0x42>
 800bdbe:	2969      	cmp	r1, #105	; 0x69
 800bdc0:	d1f6      	bne.n	800bdb0 <_printf_i+0x30>
 800bdc2:	6820      	ldr	r0, [r4, #0]
 800bdc4:	6813      	ldr	r3, [r2, #0]
 800bdc6:	0605      	lsls	r5, r0, #24
 800bdc8:	f103 0104 	add.w	r1, r3, #4
 800bdcc:	d52a      	bpl.n	800be24 <_printf_i+0xa4>
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6011      	str	r1, [r2, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	da03      	bge.n	800bdde <_printf_i+0x5e>
 800bdd6:	222d      	movs	r2, #45	; 0x2d
 800bdd8:	425b      	negs	r3, r3
 800bdda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bdde:	486f      	ldr	r0, [pc, #444]	; (800bf9c <_printf_i+0x21c>)
 800bde0:	220a      	movs	r2, #10
 800bde2:	e039      	b.n	800be58 <_printf_i+0xd8>
 800bde4:	2973      	cmp	r1, #115	; 0x73
 800bde6:	f000 809d 	beq.w	800bf24 <_printf_i+0x1a4>
 800bdea:	d808      	bhi.n	800bdfe <_printf_i+0x7e>
 800bdec:	296f      	cmp	r1, #111	; 0x6f
 800bdee:	d020      	beq.n	800be32 <_printf_i+0xb2>
 800bdf0:	2970      	cmp	r1, #112	; 0x70
 800bdf2:	d1dd      	bne.n	800bdb0 <_printf_i+0x30>
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	f043 0320 	orr.w	r3, r3, #32
 800bdfa:	6023      	str	r3, [r4, #0]
 800bdfc:	e003      	b.n	800be06 <_printf_i+0x86>
 800bdfe:	2975      	cmp	r1, #117	; 0x75
 800be00:	d017      	beq.n	800be32 <_printf_i+0xb2>
 800be02:	2978      	cmp	r1, #120	; 0x78
 800be04:	d1d4      	bne.n	800bdb0 <_printf_i+0x30>
 800be06:	2378      	movs	r3, #120	; 0x78
 800be08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be0c:	4864      	ldr	r0, [pc, #400]	; (800bfa0 <_printf_i+0x220>)
 800be0e:	e055      	b.n	800bebc <_printf_i+0x13c>
 800be10:	6813      	ldr	r3, [r2, #0]
 800be12:	1d19      	adds	r1, r3, #4
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6011      	str	r1, [r2, #0]
 800be18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be20:	2301      	movs	r3, #1
 800be22:	e08c      	b.n	800bf3e <_printf_i+0x1be>
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6011      	str	r1, [r2, #0]
 800be28:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be2c:	bf18      	it	ne
 800be2e:	b21b      	sxthne	r3, r3
 800be30:	e7cf      	b.n	800bdd2 <_printf_i+0x52>
 800be32:	6813      	ldr	r3, [r2, #0]
 800be34:	6825      	ldr	r5, [r4, #0]
 800be36:	1d18      	adds	r0, r3, #4
 800be38:	6010      	str	r0, [r2, #0]
 800be3a:	0628      	lsls	r0, r5, #24
 800be3c:	d501      	bpl.n	800be42 <_printf_i+0xc2>
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	e002      	b.n	800be48 <_printf_i+0xc8>
 800be42:	0668      	lsls	r0, r5, #25
 800be44:	d5fb      	bpl.n	800be3e <_printf_i+0xbe>
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	4854      	ldr	r0, [pc, #336]	; (800bf9c <_printf_i+0x21c>)
 800be4a:	296f      	cmp	r1, #111	; 0x6f
 800be4c:	bf14      	ite	ne
 800be4e:	220a      	movne	r2, #10
 800be50:	2208      	moveq	r2, #8
 800be52:	2100      	movs	r1, #0
 800be54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be58:	6865      	ldr	r5, [r4, #4]
 800be5a:	60a5      	str	r5, [r4, #8]
 800be5c:	2d00      	cmp	r5, #0
 800be5e:	f2c0 8095 	blt.w	800bf8c <_printf_i+0x20c>
 800be62:	6821      	ldr	r1, [r4, #0]
 800be64:	f021 0104 	bic.w	r1, r1, #4
 800be68:	6021      	str	r1, [r4, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d13d      	bne.n	800beea <_printf_i+0x16a>
 800be6e:	2d00      	cmp	r5, #0
 800be70:	f040 808e 	bne.w	800bf90 <_printf_i+0x210>
 800be74:	4665      	mov	r5, ip
 800be76:	2a08      	cmp	r2, #8
 800be78:	d10b      	bne.n	800be92 <_printf_i+0x112>
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	07db      	lsls	r3, r3, #31
 800be7e:	d508      	bpl.n	800be92 <_printf_i+0x112>
 800be80:	6923      	ldr	r3, [r4, #16]
 800be82:	6862      	ldr	r2, [r4, #4]
 800be84:	429a      	cmp	r2, r3
 800be86:	bfde      	ittt	le
 800be88:	2330      	movle	r3, #48	; 0x30
 800be8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be92:	ebac 0305 	sub.w	r3, ip, r5
 800be96:	6123      	str	r3, [r4, #16]
 800be98:	f8cd 8000 	str.w	r8, [sp]
 800be9c:	463b      	mov	r3, r7
 800be9e:	aa03      	add	r2, sp, #12
 800bea0:	4621      	mov	r1, r4
 800bea2:	4630      	mov	r0, r6
 800bea4:	f7ff fef6 	bl	800bc94 <_printf_common>
 800bea8:	3001      	adds	r0, #1
 800beaa:	d14d      	bne.n	800bf48 <_printf_i+0x1c8>
 800beac:	f04f 30ff 	mov.w	r0, #4294967295
 800beb0:	b005      	add	sp, #20
 800beb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beb6:	4839      	ldr	r0, [pc, #228]	; (800bf9c <_printf_i+0x21c>)
 800beb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bebc:	6813      	ldr	r3, [r2, #0]
 800bebe:	6821      	ldr	r1, [r4, #0]
 800bec0:	1d1d      	adds	r5, r3, #4
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6015      	str	r5, [r2, #0]
 800bec6:	060a      	lsls	r2, r1, #24
 800bec8:	d50b      	bpl.n	800bee2 <_printf_i+0x162>
 800beca:	07ca      	lsls	r2, r1, #31
 800becc:	bf44      	itt	mi
 800bece:	f041 0120 	orrmi.w	r1, r1, #32
 800bed2:	6021      	strmi	r1, [r4, #0]
 800bed4:	b91b      	cbnz	r3, 800bede <_printf_i+0x15e>
 800bed6:	6822      	ldr	r2, [r4, #0]
 800bed8:	f022 0220 	bic.w	r2, r2, #32
 800bedc:	6022      	str	r2, [r4, #0]
 800bede:	2210      	movs	r2, #16
 800bee0:	e7b7      	b.n	800be52 <_printf_i+0xd2>
 800bee2:	064d      	lsls	r5, r1, #25
 800bee4:	bf48      	it	mi
 800bee6:	b29b      	uxthmi	r3, r3
 800bee8:	e7ef      	b.n	800beca <_printf_i+0x14a>
 800beea:	4665      	mov	r5, ip
 800beec:	fbb3 f1f2 	udiv	r1, r3, r2
 800bef0:	fb02 3311 	mls	r3, r2, r1, r3
 800bef4:	5cc3      	ldrb	r3, [r0, r3]
 800bef6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800befa:	460b      	mov	r3, r1
 800befc:	2900      	cmp	r1, #0
 800befe:	d1f5      	bne.n	800beec <_printf_i+0x16c>
 800bf00:	e7b9      	b.n	800be76 <_printf_i+0xf6>
 800bf02:	6813      	ldr	r3, [r2, #0]
 800bf04:	6825      	ldr	r5, [r4, #0]
 800bf06:	6961      	ldr	r1, [r4, #20]
 800bf08:	1d18      	adds	r0, r3, #4
 800bf0a:	6010      	str	r0, [r2, #0]
 800bf0c:	0628      	lsls	r0, r5, #24
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	d501      	bpl.n	800bf16 <_printf_i+0x196>
 800bf12:	6019      	str	r1, [r3, #0]
 800bf14:	e002      	b.n	800bf1c <_printf_i+0x19c>
 800bf16:	066a      	lsls	r2, r5, #25
 800bf18:	d5fb      	bpl.n	800bf12 <_printf_i+0x192>
 800bf1a:	8019      	strh	r1, [r3, #0]
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	6123      	str	r3, [r4, #16]
 800bf20:	4665      	mov	r5, ip
 800bf22:	e7b9      	b.n	800be98 <_printf_i+0x118>
 800bf24:	6813      	ldr	r3, [r2, #0]
 800bf26:	1d19      	adds	r1, r3, #4
 800bf28:	6011      	str	r1, [r2, #0]
 800bf2a:	681d      	ldr	r5, [r3, #0]
 800bf2c:	6862      	ldr	r2, [r4, #4]
 800bf2e:	2100      	movs	r1, #0
 800bf30:	4628      	mov	r0, r5
 800bf32:	f7f4 f9c5 	bl	80002c0 <memchr>
 800bf36:	b108      	cbz	r0, 800bf3c <_printf_i+0x1bc>
 800bf38:	1b40      	subs	r0, r0, r5
 800bf3a:	6060      	str	r0, [r4, #4]
 800bf3c:	6863      	ldr	r3, [r4, #4]
 800bf3e:	6123      	str	r3, [r4, #16]
 800bf40:	2300      	movs	r3, #0
 800bf42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf46:	e7a7      	b.n	800be98 <_printf_i+0x118>
 800bf48:	6923      	ldr	r3, [r4, #16]
 800bf4a:	462a      	mov	r2, r5
 800bf4c:	4639      	mov	r1, r7
 800bf4e:	4630      	mov	r0, r6
 800bf50:	47c0      	blx	r8
 800bf52:	3001      	adds	r0, #1
 800bf54:	d0aa      	beq.n	800beac <_printf_i+0x12c>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	079b      	lsls	r3, r3, #30
 800bf5a:	d413      	bmi.n	800bf84 <_printf_i+0x204>
 800bf5c:	68e0      	ldr	r0, [r4, #12]
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	4298      	cmp	r0, r3
 800bf62:	bfb8      	it	lt
 800bf64:	4618      	movlt	r0, r3
 800bf66:	e7a3      	b.n	800beb0 <_printf_i+0x130>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	464a      	mov	r2, r9
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	4630      	mov	r0, r6
 800bf70:	47c0      	blx	r8
 800bf72:	3001      	adds	r0, #1
 800bf74:	d09a      	beq.n	800beac <_printf_i+0x12c>
 800bf76:	3501      	adds	r5, #1
 800bf78:	68e3      	ldr	r3, [r4, #12]
 800bf7a:	9a03      	ldr	r2, [sp, #12]
 800bf7c:	1a9b      	subs	r3, r3, r2
 800bf7e:	42ab      	cmp	r3, r5
 800bf80:	dcf2      	bgt.n	800bf68 <_printf_i+0x1e8>
 800bf82:	e7eb      	b.n	800bf5c <_printf_i+0x1dc>
 800bf84:	2500      	movs	r5, #0
 800bf86:	f104 0919 	add.w	r9, r4, #25
 800bf8a:	e7f5      	b.n	800bf78 <_printf_i+0x1f8>
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d1ac      	bne.n	800beea <_printf_i+0x16a>
 800bf90:	7803      	ldrb	r3, [r0, #0]
 800bf92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf9a:	e76c      	b.n	800be76 <_printf_i+0xf6>
 800bf9c:	0800ceb5 	.word	0x0800ceb5
 800bfa0:	0800cec6 	.word	0x0800cec6

0800bfa4 <_scanf_chars>:
 800bfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa8:	4615      	mov	r5, r2
 800bfaa:	688a      	ldr	r2, [r1, #8]
 800bfac:	4680      	mov	r8, r0
 800bfae:	460c      	mov	r4, r1
 800bfb0:	b932      	cbnz	r2, 800bfc0 <_scanf_chars+0x1c>
 800bfb2:	698a      	ldr	r2, [r1, #24]
 800bfb4:	2a00      	cmp	r2, #0
 800bfb6:	bf14      	ite	ne
 800bfb8:	f04f 32ff 	movne.w	r2, #4294967295
 800bfbc:	2201      	moveq	r2, #1
 800bfbe:	608a      	str	r2, [r1, #8]
 800bfc0:	6822      	ldr	r2, [r4, #0]
 800bfc2:	06d1      	lsls	r1, r2, #27
 800bfc4:	bf5f      	itttt	pl
 800bfc6:	681a      	ldrpl	r2, [r3, #0]
 800bfc8:	1d11      	addpl	r1, r2, #4
 800bfca:	6019      	strpl	r1, [r3, #0]
 800bfcc:	6817      	ldrpl	r7, [r2, #0]
 800bfce:	2600      	movs	r6, #0
 800bfd0:	69a3      	ldr	r3, [r4, #24]
 800bfd2:	b1db      	cbz	r3, 800c00c <_scanf_chars+0x68>
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d107      	bne.n	800bfe8 <_scanf_chars+0x44>
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	6962      	ldr	r2, [r4, #20]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	5cd3      	ldrb	r3, [r2, r3]
 800bfe0:	b9a3      	cbnz	r3, 800c00c <_scanf_chars+0x68>
 800bfe2:	2e00      	cmp	r6, #0
 800bfe4:	d132      	bne.n	800c04c <_scanf_chars+0xa8>
 800bfe6:	e006      	b.n	800bff6 <_scanf_chars+0x52>
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d007      	beq.n	800bffc <_scanf_chars+0x58>
 800bfec:	2e00      	cmp	r6, #0
 800bfee:	d12d      	bne.n	800c04c <_scanf_chars+0xa8>
 800bff0:	69a3      	ldr	r3, [r4, #24]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d12a      	bne.n	800c04c <_scanf_chars+0xa8>
 800bff6:	2001      	movs	r0, #1
 800bff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffc:	f000 fab4 	bl	800c568 <__locale_ctype_ptr>
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	4418      	add	r0, r3
 800c006:	7843      	ldrb	r3, [r0, #1]
 800c008:	071b      	lsls	r3, r3, #28
 800c00a:	d4ef      	bmi.n	800bfec <_scanf_chars+0x48>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	06da      	lsls	r2, r3, #27
 800c010:	bf5e      	ittt	pl
 800c012:	682b      	ldrpl	r3, [r5, #0]
 800c014:	781b      	ldrbpl	r3, [r3, #0]
 800c016:	703b      	strbpl	r3, [r7, #0]
 800c018:	682a      	ldr	r2, [r5, #0]
 800c01a:	686b      	ldr	r3, [r5, #4]
 800c01c:	f102 0201 	add.w	r2, r2, #1
 800c020:	602a      	str	r2, [r5, #0]
 800c022:	68a2      	ldr	r2, [r4, #8]
 800c024:	f103 33ff 	add.w	r3, r3, #4294967295
 800c028:	f102 32ff 	add.w	r2, r2, #4294967295
 800c02c:	606b      	str	r3, [r5, #4]
 800c02e:	f106 0601 	add.w	r6, r6, #1
 800c032:	bf58      	it	pl
 800c034:	3701      	addpl	r7, #1
 800c036:	60a2      	str	r2, [r4, #8]
 800c038:	b142      	cbz	r2, 800c04c <_scanf_chars+0xa8>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	dcc8      	bgt.n	800bfd0 <_scanf_chars+0x2c>
 800c03e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c042:	4629      	mov	r1, r5
 800c044:	4640      	mov	r0, r8
 800c046:	4798      	blx	r3
 800c048:	2800      	cmp	r0, #0
 800c04a:	d0c1      	beq.n	800bfd0 <_scanf_chars+0x2c>
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	f013 0310 	ands.w	r3, r3, #16
 800c052:	d105      	bne.n	800c060 <_scanf_chars+0xbc>
 800c054:	68e2      	ldr	r2, [r4, #12]
 800c056:	3201      	adds	r2, #1
 800c058:	60e2      	str	r2, [r4, #12]
 800c05a:	69a2      	ldr	r2, [r4, #24]
 800c05c:	b102      	cbz	r2, 800c060 <_scanf_chars+0xbc>
 800c05e:	703b      	strb	r3, [r7, #0]
 800c060:	6923      	ldr	r3, [r4, #16]
 800c062:	441e      	add	r6, r3
 800c064:	6126      	str	r6, [r4, #16]
 800c066:	2000      	movs	r0, #0
 800c068:	e7c6      	b.n	800bff8 <_scanf_chars+0x54>
	...

0800c06c <_scanf_i>:
 800c06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c070:	469a      	mov	sl, r3
 800c072:	4b74      	ldr	r3, [pc, #464]	; (800c244 <_scanf_i+0x1d8>)
 800c074:	460c      	mov	r4, r1
 800c076:	4683      	mov	fp, r0
 800c078:	4616      	mov	r6, r2
 800c07a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c07e:	b087      	sub	sp, #28
 800c080:	ab03      	add	r3, sp, #12
 800c082:	68a7      	ldr	r7, [r4, #8]
 800c084:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c088:	4b6f      	ldr	r3, [pc, #444]	; (800c248 <_scanf_i+0x1dc>)
 800c08a:	69a1      	ldr	r1, [r4, #24]
 800c08c:	4a6f      	ldr	r2, [pc, #444]	; (800c24c <_scanf_i+0x1e0>)
 800c08e:	2903      	cmp	r1, #3
 800c090:	bf08      	it	eq
 800c092:	461a      	moveq	r2, r3
 800c094:	1e7b      	subs	r3, r7, #1
 800c096:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800c09a:	bf84      	itt	hi
 800c09c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c0a0:	60a3      	strhi	r3, [r4, #8]
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	9200      	str	r2, [sp, #0]
 800c0a6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c0aa:	bf88      	it	hi
 800c0ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c0b0:	f104 091c 	add.w	r9, r4, #28
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	bf8c      	ite	hi
 800c0b8:	197f      	addhi	r7, r7, r5
 800c0ba:	2700      	movls	r7, #0
 800c0bc:	464b      	mov	r3, r9
 800c0be:	f04f 0800 	mov.w	r8, #0
 800c0c2:	9301      	str	r3, [sp, #4]
 800c0c4:	6831      	ldr	r1, [r6, #0]
 800c0c6:	ab03      	add	r3, sp, #12
 800c0c8:	2202      	movs	r2, #2
 800c0ca:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c0ce:	7809      	ldrb	r1, [r1, #0]
 800c0d0:	f7f4 f8f6 	bl	80002c0 <memchr>
 800c0d4:	9b01      	ldr	r3, [sp, #4]
 800c0d6:	b330      	cbz	r0, 800c126 <_scanf_i+0xba>
 800c0d8:	f1b8 0f01 	cmp.w	r8, #1
 800c0dc:	d15a      	bne.n	800c194 <_scanf_i+0x128>
 800c0de:	6862      	ldr	r2, [r4, #4]
 800c0e0:	b92a      	cbnz	r2, 800c0ee <_scanf_i+0x82>
 800c0e2:	6822      	ldr	r2, [r4, #0]
 800c0e4:	2108      	movs	r1, #8
 800c0e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0ea:	6061      	str	r1, [r4, #4]
 800c0ec:	6022      	str	r2, [r4, #0]
 800c0ee:	6822      	ldr	r2, [r4, #0]
 800c0f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c0f4:	6022      	str	r2, [r4, #0]
 800c0f6:	68a2      	ldr	r2, [r4, #8]
 800c0f8:	1e51      	subs	r1, r2, #1
 800c0fa:	60a1      	str	r1, [r4, #8]
 800c0fc:	b19a      	cbz	r2, 800c126 <_scanf_i+0xba>
 800c0fe:	6832      	ldr	r2, [r6, #0]
 800c100:	1c51      	adds	r1, r2, #1
 800c102:	6031      	str	r1, [r6, #0]
 800c104:	7812      	ldrb	r2, [r2, #0]
 800c106:	701a      	strb	r2, [r3, #0]
 800c108:	1c5d      	adds	r5, r3, #1
 800c10a:	6873      	ldr	r3, [r6, #4]
 800c10c:	3b01      	subs	r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	6073      	str	r3, [r6, #4]
 800c112:	dc07      	bgt.n	800c124 <_scanf_i+0xb8>
 800c114:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c118:	4631      	mov	r1, r6
 800c11a:	4658      	mov	r0, fp
 800c11c:	4798      	blx	r3
 800c11e:	2800      	cmp	r0, #0
 800c120:	f040 8086 	bne.w	800c230 <_scanf_i+0x1c4>
 800c124:	462b      	mov	r3, r5
 800c126:	f108 0801 	add.w	r8, r8, #1
 800c12a:	f1b8 0f03 	cmp.w	r8, #3
 800c12e:	d1c8      	bne.n	800c0c2 <_scanf_i+0x56>
 800c130:	6862      	ldr	r2, [r4, #4]
 800c132:	b90a      	cbnz	r2, 800c138 <_scanf_i+0xcc>
 800c134:	220a      	movs	r2, #10
 800c136:	6062      	str	r2, [r4, #4]
 800c138:	6862      	ldr	r2, [r4, #4]
 800c13a:	4945      	ldr	r1, [pc, #276]	; (800c250 <_scanf_i+0x1e4>)
 800c13c:	6960      	ldr	r0, [r4, #20]
 800c13e:	9301      	str	r3, [sp, #4]
 800c140:	1a89      	subs	r1, r1, r2
 800c142:	f000 f887 	bl	800c254 <__sccl>
 800c146:	9b01      	ldr	r3, [sp, #4]
 800c148:	f04f 0800 	mov.w	r8, #0
 800c14c:	461d      	mov	r5, r3
 800c14e:	68a3      	ldr	r3, [r4, #8]
 800c150:	6822      	ldr	r2, [r4, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d03a      	beq.n	800c1cc <_scanf_i+0x160>
 800c156:	6831      	ldr	r1, [r6, #0]
 800c158:	6960      	ldr	r0, [r4, #20]
 800c15a:	f891 c000 	ldrb.w	ip, [r1]
 800c15e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c162:	2800      	cmp	r0, #0
 800c164:	d032      	beq.n	800c1cc <_scanf_i+0x160>
 800c166:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c16a:	d121      	bne.n	800c1b0 <_scanf_i+0x144>
 800c16c:	0510      	lsls	r0, r2, #20
 800c16e:	d51f      	bpl.n	800c1b0 <_scanf_i+0x144>
 800c170:	f108 0801 	add.w	r8, r8, #1
 800c174:	b117      	cbz	r7, 800c17c <_scanf_i+0x110>
 800c176:	3301      	adds	r3, #1
 800c178:	3f01      	subs	r7, #1
 800c17a:	60a3      	str	r3, [r4, #8]
 800c17c:	6873      	ldr	r3, [r6, #4]
 800c17e:	3b01      	subs	r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	6073      	str	r3, [r6, #4]
 800c184:	dd1b      	ble.n	800c1be <_scanf_i+0x152>
 800c186:	6833      	ldr	r3, [r6, #0]
 800c188:	3301      	adds	r3, #1
 800c18a:	6033      	str	r3, [r6, #0]
 800c18c:	68a3      	ldr	r3, [r4, #8]
 800c18e:	3b01      	subs	r3, #1
 800c190:	60a3      	str	r3, [r4, #8]
 800c192:	e7dc      	b.n	800c14e <_scanf_i+0xe2>
 800c194:	f1b8 0f02 	cmp.w	r8, #2
 800c198:	d1ad      	bne.n	800c0f6 <_scanf_i+0x8a>
 800c19a:	6822      	ldr	r2, [r4, #0]
 800c19c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c1a0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c1a4:	d1bf      	bne.n	800c126 <_scanf_i+0xba>
 800c1a6:	2110      	movs	r1, #16
 800c1a8:	6061      	str	r1, [r4, #4]
 800c1aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1ae:	e7a1      	b.n	800c0f4 <_scanf_i+0x88>
 800c1b0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c1b4:	6022      	str	r2, [r4, #0]
 800c1b6:	780b      	ldrb	r3, [r1, #0]
 800c1b8:	702b      	strb	r3, [r5, #0]
 800c1ba:	3501      	adds	r5, #1
 800c1bc:	e7de      	b.n	800c17c <_scanf_i+0x110>
 800c1be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c1c2:	4631      	mov	r1, r6
 800c1c4:	4658      	mov	r0, fp
 800c1c6:	4798      	blx	r3
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d0df      	beq.n	800c18c <_scanf_i+0x120>
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	05d9      	lsls	r1, r3, #23
 800c1d0:	d50c      	bpl.n	800c1ec <_scanf_i+0x180>
 800c1d2:	454d      	cmp	r5, r9
 800c1d4:	d908      	bls.n	800c1e8 <_scanf_i+0x17c>
 800c1d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c1da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1de:	4632      	mov	r2, r6
 800c1e0:	4658      	mov	r0, fp
 800c1e2:	4798      	blx	r3
 800c1e4:	1e6f      	subs	r7, r5, #1
 800c1e6:	463d      	mov	r5, r7
 800c1e8:	454d      	cmp	r5, r9
 800c1ea:	d029      	beq.n	800c240 <_scanf_i+0x1d4>
 800c1ec:	6822      	ldr	r2, [r4, #0]
 800c1ee:	f012 0210 	ands.w	r2, r2, #16
 800c1f2:	d113      	bne.n	800c21c <_scanf_i+0x1b0>
 800c1f4:	702a      	strb	r2, [r5, #0]
 800c1f6:	6863      	ldr	r3, [r4, #4]
 800c1f8:	9e00      	ldr	r6, [sp, #0]
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	4658      	mov	r0, fp
 800c1fe:	47b0      	blx	r6
 800c200:	f8da 3000 	ldr.w	r3, [sl]
 800c204:	6821      	ldr	r1, [r4, #0]
 800c206:	1d1a      	adds	r2, r3, #4
 800c208:	f8ca 2000 	str.w	r2, [sl]
 800c20c:	f011 0f20 	tst.w	r1, #32
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	d010      	beq.n	800c236 <_scanf_i+0x1ca>
 800c214:	6018      	str	r0, [r3, #0]
 800c216:	68e3      	ldr	r3, [r4, #12]
 800c218:	3301      	adds	r3, #1
 800c21a:	60e3      	str	r3, [r4, #12]
 800c21c:	eba5 0509 	sub.w	r5, r5, r9
 800c220:	44a8      	add	r8, r5
 800c222:	6925      	ldr	r5, [r4, #16]
 800c224:	4445      	add	r5, r8
 800c226:	6125      	str	r5, [r4, #16]
 800c228:	2000      	movs	r0, #0
 800c22a:	b007      	add	sp, #28
 800c22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c230:	f04f 0800 	mov.w	r8, #0
 800c234:	e7ca      	b.n	800c1cc <_scanf_i+0x160>
 800c236:	07ca      	lsls	r2, r1, #31
 800c238:	bf4c      	ite	mi
 800c23a:	8018      	strhmi	r0, [r3, #0]
 800c23c:	6018      	strpl	r0, [r3, #0]
 800c23e:	e7ea      	b.n	800c216 <_scanf_i+0x1aa>
 800c240:	2001      	movs	r0, #1
 800c242:	e7f2      	b.n	800c22a <_scanf_i+0x1be>
 800c244:	0800cd90 	.word	0x0800cd90
 800c248:	0800c3b1 	.word	0x0800c3b1
 800c24c:	0800c4c9 	.word	0x0800c4c9
 800c250:	0800cee7 	.word	0x0800cee7

0800c254 <__sccl>:
 800c254:	b570      	push	{r4, r5, r6, lr}
 800c256:	780b      	ldrb	r3, [r1, #0]
 800c258:	2b5e      	cmp	r3, #94	; 0x5e
 800c25a:	bf13      	iteet	ne
 800c25c:	1c4a      	addne	r2, r1, #1
 800c25e:	1c8a      	addeq	r2, r1, #2
 800c260:	784b      	ldrbeq	r3, [r1, #1]
 800c262:	2100      	movne	r1, #0
 800c264:	bf08      	it	eq
 800c266:	2101      	moveq	r1, #1
 800c268:	1e44      	subs	r4, r0, #1
 800c26a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c26e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c272:	42ac      	cmp	r4, r5
 800c274:	d1fb      	bne.n	800c26e <__sccl+0x1a>
 800c276:	b913      	cbnz	r3, 800c27e <__sccl+0x2a>
 800c278:	3a01      	subs	r2, #1
 800c27a:	4610      	mov	r0, r2
 800c27c:	bd70      	pop	{r4, r5, r6, pc}
 800c27e:	f081 0401 	eor.w	r4, r1, #1
 800c282:	54c4      	strb	r4, [r0, r3]
 800c284:	1c51      	adds	r1, r2, #1
 800c286:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800c28a:	2d2d      	cmp	r5, #45	; 0x2d
 800c28c:	f101 36ff 	add.w	r6, r1, #4294967295
 800c290:	460a      	mov	r2, r1
 800c292:	d006      	beq.n	800c2a2 <__sccl+0x4e>
 800c294:	2d5d      	cmp	r5, #93	; 0x5d
 800c296:	d0f0      	beq.n	800c27a <__sccl+0x26>
 800c298:	b90d      	cbnz	r5, 800c29e <__sccl+0x4a>
 800c29a:	4632      	mov	r2, r6
 800c29c:	e7ed      	b.n	800c27a <__sccl+0x26>
 800c29e:	462b      	mov	r3, r5
 800c2a0:	e7ef      	b.n	800c282 <__sccl+0x2e>
 800c2a2:	780e      	ldrb	r6, [r1, #0]
 800c2a4:	2e5d      	cmp	r6, #93	; 0x5d
 800c2a6:	d0fa      	beq.n	800c29e <__sccl+0x4a>
 800c2a8:	42b3      	cmp	r3, r6
 800c2aa:	dcf8      	bgt.n	800c29e <__sccl+0x4a>
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	429e      	cmp	r6, r3
 800c2b0:	54c4      	strb	r4, [r0, r3]
 800c2b2:	dcfb      	bgt.n	800c2ac <__sccl+0x58>
 800c2b4:	3102      	adds	r1, #2
 800c2b6:	e7e6      	b.n	800c286 <__sccl+0x32>

0800c2b8 <_strtol_l.isra.0>:
 800c2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2bc:	4680      	mov	r8, r0
 800c2be:	4689      	mov	r9, r1
 800c2c0:	4692      	mov	sl, r2
 800c2c2:	461e      	mov	r6, r3
 800c2c4:	460f      	mov	r7, r1
 800c2c6:	463d      	mov	r5, r7
 800c2c8:	9808      	ldr	r0, [sp, #32]
 800c2ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2ce:	f000 f947 	bl	800c560 <__locale_ctype_ptr_l>
 800c2d2:	4420      	add	r0, r4
 800c2d4:	7843      	ldrb	r3, [r0, #1]
 800c2d6:	f013 0308 	ands.w	r3, r3, #8
 800c2da:	d132      	bne.n	800c342 <_strtol_l.isra.0+0x8a>
 800c2dc:	2c2d      	cmp	r4, #45	; 0x2d
 800c2de:	d132      	bne.n	800c346 <_strtol_l.isra.0+0x8e>
 800c2e0:	787c      	ldrb	r4, [r7, #1]
 800c2e2:	1cbd      	adds	r5, r7, #2
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	2e00      	cmp	r6, #0
 800c2e8:	d05d      	beq.n	800c3a6 <_strtol_l.isra.0+0xee>
 800c2ea:	2e10      	cmp	r6, #16
 800c2ec:	d109      	bne.n	800c302 <_strtol_l.isra.0+0x4a>
 800c2ee:	2c30      	cmp	r4, #48	; 0x30
 800c2f0:	d107      	bne.n	800c302 <_strtol_l.isra.0+0x4a>
 800c2f2:	782b      	ldrb	r3, [r5, #0]
 800c2f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c2f8:	2b58      	cmp	r3, #88	; 0x58
 800c2fa:	d14f      	bne.n	800c39c <_strtol_l.isra.0+0xe4>
 800c2fc:	786c      	ldrb	r4, [r5, #1]
 800c2fe:	2610      	movs	r6, #16
 800c300:	3502      	adds	r5, #2
 800c302:	2a00      	cmp	r2, #0
 800c304:	bf14      	ite	ne
 800c306:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c30a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c30e:	2700      	movs	r7, #0
 800c310:	fbb1 fcf6 	udiv	ip, r1, r6
 800c314:	4638      	mov	r0, r7
 800c316:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c31a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c31e:	2b09      	cmp	r3, #9
 800c320:	d817      	bhi.n	800c352 <_strtol_l.isra.0+0x9a>
 800c322:	461c      	mov	r4, r3
 800c324:	42a6      	cmp	r6, r4
 800c326:	dd23      	ble.n	800c370 <_strtol_l.isra.0+0xb8>
 800c328:	1c7b      	adds	r3, r7, #1
 800c32a:	d007      	beq.n	800c33c <_strtol_l.isra.0+0x84>
 800c32c:	4584      	cmp	ip, r0
 800c32e:	d31c      	bcc.n	800c36a <_strtol_l.isra.0+0xb2>
 800c330:	d101      	bne.n	800c336 <_strtol_l.isra.0+0x7e>
 800c332:	45a6      	cmp	lr, r4
 800c334:	db19      	blt.n	800c36a <_strtol_l.isra.0+0xb2>
 800c336:	fb00 4006 	mla	r0, r0, r6, r4
 800c33a:	2701      	movs	r7, #1
 800c33c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c340:	e7eb      	b.n	800c31a <_strtol_l.isra.0+0x62>
 800c342:	462f      	mov	r7, r5
 800c344:	e7bf      	b.n	800c2c6 <_strtol_l.isra.0+0xe>
 800c346:	2c2b      	cmp	r4, #43	; 0x2b
 800c348:	bf04      	itt	eq
 800c34a:	1cbd      	addeq	r5, r7, #2
 800c34c:	787c      	ldrbeq	r4, [r7, #1]
 800c34e:	461a      	mov	r2, r3
 800c350:	e7c9      	b.n	800c2e6 <_strtol_l.isra.0+0x2e>
 800c352:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c356:	2b19      	cmp	r3, #25
 800c358:	d801      	bhi.n	800c35e <_strtol_l.isra.0+0xa6>
 800c35a:	3c37      	subs	r4, #55	; 0x37
 800c35c:	e7e2      	b.n	800c324 <_strtol_l.isra.0+0x6c>
 800c35e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c362:	2b19      	cmp	r3, #25
 800c364:	d804      	bhi.n	800c370 <_strtol_l.isra.0+0xb8>
 800c366:	3c57      	subs	r4, #87	; 0x57
 800c368:	e7dc      	b.n	800c324 <_strtol_l.isra.0+0x6c>
 800c36a:	f04f 37ff 	mov.w	r7, #4294967295
 800c36e:	e7e5      	b.n	800c33c <_strtol_l.isra.0+0x84>
 800c370:	1c7b      	adds	r3, r7, #1
 800c372:	d108      	bne.n	800c386 <_strtol_l.isra.0+0xce>
 800c374:	2322      	movs	r3, #34	; 0x22
 800c376:	f8c8 3000 	str.w	r3, [r8]
 800c37a:	4608      	mov	r0, r1
 800c37c:	f1ba 0f00 	cmp.w	sl, #0
 800c380:	d107      	bne.n	800c392 <_strtol_l.isra.0+0xda>
 800c382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c386:	b102      	cbz	r2, 800c38a <_strtol_l.isra.0+0xd2>
 800c388:	4240      	negs	r0, r0
 800c38a:	f1ba 0f00 	cmp.w	sl, #0
 800c38e:	d0f8      	beq.n	800c382 <_strtol_l.isra.0+0xca>
 800c390:	b10f      	cbz	r7, 800c396 <_strtol_l.isra.0+0xde>
 800c392:	f105 39ff 	add.w	r9, r5, #4294967295
 800c396:	f8ca 9000 	str.w	r9, [sl]
 800c39a:	e7f2      	b.n	800c382 <_strtol_l.isra.0+0xca>
 800c39c:	2430      	movs	r4, #48	; 0x30
 800c39e:	2e00      	cmp	r6, #0
 800c3a0:	d1af      	bne.n	800c302 <_strtol_l.isra.0+0x4a>
 800c3a2:	2608      	movs	r6, #8
 800c3a4:	e7ad      	b.n	800c302 <_strtol_l.isra.0+0x4a>
 800c3a6:	2c30      	cmp	r4, #48	; 0x30
 800c3a8:	d0a3      	beq.n	800c2f2 <_strtol_l.isra.0+0x3a>
 800c3aa:	260a      	movs	r6, #10
 800c3ac:	e7a9      	b.n	800c302 <_strtol_l.isra.0+0x4a>
	...

0800c3b0 <_strtol_r>:
 800c3b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3b2:	4c06      	ldr	r4, [pc, #24]	; (800c3cc <_strtol_r+0x1c>)
 800c3b4:	4d06      	ldr	r5, [pc, #24]	; (800c3d0 <_strtol_r+0x20>)
 800c3b6:	6824      	ldr	r4, [r4, #0]
 800c3b8:	6a24      	ldr	r4, [r4, #32]
 800c3ba:	2c00      	cmp	r4, #0
 800c3bc:	bf08      	it	eq
 800c3be:	462c      	moveq	r4, r5
 800c3c0:	9400      	str	r4, [sp, #0]
 800c3c2:	f7ff ff79 	bl	800c2b8 <_strtol_l.isra.0>
 800c3c6:	b003      	add	sp, #12
 800c3c8:	bd30      	pop	{r4, r5, pc}
 800c3ca:	bf00      	nop
 800c3cc:	200003d0 	.word	0x200003d0
 800c3d0:	20000434 	.word	0x20000434

0800c3d4 <_strtoul_l.isra.0>:
 800c3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d8:	4680      	mov	r8, r0
 800c3da:	4689      	mov	r9, r1
 800c3dc:	4692      	mov	sl, r2
 800c3de:	461e      	mov	r6, r3
 800c3e0:	460f      	mov	r7, r1
 800c3e2:	463d      	mov	r5, r7
 800c3e4:	9808      	ldr	r0, [sp, #32]
 800c3e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3ea:	f000 f8b9 	bl	800c560 <__locale_ctype_ptr_l>
 800c3ee:	4420      	add	r0, r4
 800c3f0:	7843      	ldrb	r3, [r0, #1]
 800c3f2:	f013 0308 	ands.w	r3, r3, #8
 800c3f6:	d130      	bne.n	800c45a <_strtoul_l.isra.0+0x86>
 800c3f8:	2c2d      	cmp	r4, #45	; 0x2d
 800c3fa:	d130      	bne.n	800c45e <_strtoul_l.isra.0+0x8a>
 800c3fc:	787c      	ldrb	r4, [r7, #1]
 800c3fe:	1cbd      	adds	r5, r7, #2
 800c400:	2101      	movs	r1, #1
 800c402:	2e00      	cmp	r6, #0
 800c404:	d05c      	beq.n	800c4c0 <_strtoul_l.isra.0+0xec>
 800c406:	2e10      	cmp	r6, #16
 800c408:	d109      	bne.n	800c41e <_strtoul_l.isra.0+0x4a>
 800c40a:	2c30      	cmp	r4, #48	; 0x30
 800c40c:	d107      	bne.n	800c41e <_strtoul_l.isra.0+0x4a>
 800c40e:	782b      	ldrb	r3, [r5, #0]
 800c410:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c414:	2b58      	cmp	r3, #88	; 0x58
 800c416:	d14e      	bne.n	800c4b6 <_strtoul_l.isra.0+0xe2>
 800c418:	786c      	ldrb	r4, [r5, #1]
 800c41a:	2610      	movs	r6, #16
 800c41c:	3502      	adds	r5, #2
 800c41e:	f04f 32ff 	mov.w	r2, #4294967295
 800c422:	2300      	movs	r3, #0
 800c424:	fbb2 f2f6 	udiv	r2, r2, r6
 800c428:	fb06 fc02 	mul.w	ip, r6, r2
 800c42c:	ea6f 0c0c 	mvn.w	ip, ip
 800c430:	4618      	mov	r0, r3
 800c432:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c436:	2f09      	cmp	r7, #9
 800c438:	d817      	bhi.n	800c46a <_strtoul_l.isra.0+0x96>
 800c43a:	463c      	mov	r4, r7
 800c43c:	42a6      	cmp	r6, r4
 800c43e:	dd23      	ble.n	800c488 <_strtoul_l.isra.0+0xb4>
 800c440:	2b00      	cmp	r3, #0
 800c442:	db1e      	blt.n	800c482 <_strtoul_l.isra.0+0xae>
 800c444:	4282      	cmp	r2, r0
 800c446:	d31c      	bcc.n	800c482 <_strtoul_l.isra.0+0xae>
 800c448:	d101      	bne.n	800c44e <_strtoul_l.isra.0+0x7a>
 800c44a:	45a4      	cmp	ip, r4
 800c44c:	db19      	blt.n	800c482 <_strtoul_l.isra.0+0xae>
 800c44e:	fb00 4006 	mla	r0, r0, r6, r4
 800c452:	2301      	movs	r3, #1
 800c454:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c458:	e7eb      	b.n	800c432 <_strtoul_l.isra.0+0x5e>
 800c45a:	462f      	mov	r7, r5
 800c45c:	e7c1      	b.n	800c3e2 <_strtoul_l.isra.0+0xe>
 800c45e:	2c2b      	cmp	r4, #43	; 0x2b
 800c460:	bf04      	itt	eq
 800c462:	1cbd      	addeq	r5, r7, #2
 800c464:	787c      	ldrbeq	r4, [r7, #1]
 800c466:	4619      	mov	r1, r3
 800c468:	e7cb      	b.n	800c402 <_strtoul_l.isra.0+0x2e>
 800c46a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c46e:	2f19      	cmp	r7, #25
 800c470:	d801      	bhi.n	800c476 <_strtoul_l.isra.0+0xa2>
 800c472:	3c37      	subs	r4, #55	; 0x37
 800c474:	e7e2      	b.n	800c43c <_strtoul_l.isra.0+0x68>
 800c476:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c47a:	2f19      	cmp	r7, #25
 800c47c:	d804      	bhi.n	800c488 <_strtoul_l.isra.0+0xb4>
 800c47e:	3c57      	subs	r4, #87	; 0x57
 800c480:	e7dc      	b.n	800c43c <_strtoul_l.isra.0+0x68>
 800c482:	f04f 33ff 	mov.w	r3, #4294967295
 800c486:	e7e5      	b.n	800c454 <_strtoul_l.isra.0+0x80>
 800c488:	2b00      	cmp	r3, #0
 800c48a:	da09      	bge.n	800c4a0 <_strtoul_l.isra.0+0xcc>
 800c48c:	2322      	movs	r3, #34	; 0x22
 800c48e:	f8c8 3000 	str.w	r3, [r8]
 800c492:	f04f 30ff 	mov.w	r0, #4294967295
 800c496:	f1ba 0f00 	cmp.w	sl, #0
 800c49a:	d107      	bne.n	800c4ac <_strtoul_l.isra.0+0xd8>
 800c49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a0:	b101      	cbz	r1, 800c4a4 <_strtoul_l.isra.0+0xd0>
 800c4a2:	4240      	negs	r0, r0
 800c4a4:	f1ba 0f00 	cmp.w	sl, #0
 800c4a8:	d0f8      	beq.n	800c49c <_strtoul_l.isra.0+0xc8>
 800c4aa:	b10b      	cbz	r3, 800c4b0 <_strtoul_l.isra.0+0xdc>
 800c4ac:	f105 39ff 	add.w	r9, r5, #4294967295
 800c4b0:	f8ca 9000 	str.w	r9, [sl]
 800c4b4:	e7f2      	b.n	800c49c <_strtoul_l.isra.0+0xc8>
 800c4b6:	2430      	movs	r4, #48	; 0x30
 800c4b8:	2e00      	cmp	r6, #0
 800c4ba:	d1b0      	bne.n	800c41e <_strtoul_l.isra.0+0x4a>
 800c4bc:	2608      	movs	r6, #8
 800c4be:	e7ae      	b.n	800c41e <_strtoul_l.isra.0+0x4a>
 800c4c0:	2c30      	cmp	r4, #48	; 0x30
 800c4c2:	d0a4      	beq.n	800c40e <_strtoul_l.isra.0+0x3a>
 800c4c4:	260a      	movs	r6, #10
 800c4c6:	e7aa      	b.n	800c41e <_strtoul_l.isra.0+0x4a>

0800c4c8 <_strtoul_r>:
 800c4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4ca:	4c06      	ldr	r4, [pc, #24]	; (800c4e4 <_strtoul_r+0x1c>)
 800c4cc:	4d06      	ldr	r5, [pc, #24]	; (800c4e8 <_strtoul_r+0x20>)
 800c4ce:	6824      	ldr	r4, [r4, #0]
 800c4d0:	6a24      	ldr	r4, [r4, #32]
 800c4d2:	2c00      	cmp	r4, #0
 800c4d4:	bf08      	it	eq
 800c4d6:	462c      	moveq	r4, r5
 800c4d8:	9400      	str	r4, [sp, #0]
 800c4da:	f7ff ff7b 	bl	800c3d4 <_strtoul_l.isra.0>
 800c4de:	b003      	add	sp, #12
 800c4e0:	bd30      	pop	{r4, r5, pc}
 800c4e2:	bf00      	nop
 800c4e4:	200003d0 	.word	0x200003d0
 800c4e8:	20000434 	.word	0x20000434

0800c4ec <__submore>:
 800c4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f0:	460c      	mov	r4, r1
 800c4f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c4f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4f8:	4299      	cmp	r1, r3
 800c4fa:	d11d      	bne.n	800c538 <__submore+0x4c>
 800c4fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c500:	f000 f8ba 	bl	800c678 <_malloc_r>
 800c504:	b918      	cbnz	r0, 800c50e <__submore+0x22>
 800c506:	f04f 30ff 	mov.w	r0, #4294967295
 800c50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c50e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c512:	63a3      	str	r3, [r4, #56]	; 0x38
 800c514:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c518:	6360      	str	r0, [r4, #52]	; 0x34
 800c51a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c51e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c522:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c526:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c52a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c52e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c532:	6020      	str	r0, [r4, #0]
 800c534:	2000      	movs	r0, #0
 800c536:	e7e8      	b.n	800c50a <__submore+0x1e>
 800c538:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c53a:	0077      	lsls	r7, r6, #1
 800c53c:	463a      	mov	r2, r7
 800c53e:	f000 f8f5 	bl	800c72c <_realloc_r>
 800c542:	4605      	mov	r5, r0
 800c544:	2800      	cmp	r0, #0
 800c546:	d0de      	beq.n	800c506 <__submore+0x1a>
 800c548:	eb00 0806 	add.w	r8, r0, r6
 800c54c:	4601      	mov	r1, r0
 800c54e:	4632      	mov	r2, r6
 800c550:	4640      	mov	r0, r8
 800c552:	f7fe ffe7 	bl	800b524 <memcpy>
 800c556:	f8c4 8000 	str.w	r8, [r4]
 800c55a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c55e:	e7e9      	b.n	800c534 <__submore+0x48>

0800c560 <__locale_ctype_ptr_l>:
 800c560:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c564:	4770      	bx	lr
	...

0800c568 <__locale_ctype_ptr>:
 800c568:	4b04      	ldr	r3, [pc, #16]	; (800c57c <__locale_ctype_ptr+0x14>)
 800c56a:	4a05      	ldr	r2, [pc, #20]	; (800c580 <__locale_ctype_ptr+0x18>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	6a1b      	ldr	r3, [r3, #32]
 800c570:	2b00      	cmp	r3, #0
 800c572:	bf08      	it	eq
 800c574:	4613      	moveq	r3, r2
 800c576:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c57a:	4770      	bx	lr
 800c57c:	200003d0 	.word	0x200003d0
 800c580:	20000434 	.word	0x20000434

0800c584 <__ascii_mbtowc>:
 800c584:	b082      	sub	sp, #8
 800c586:	b901      	cbnz	r1, 800c58a <__ascii_mbtowc+0x6>
 800c588:	a901      	add	r1, sp, #4
 800c58a:	b142      	cbz	r2, 800c59e <__ascii_mbtowc+0x1a>
 800c58c:	b14b      	cbz	r3, 800c5a2 <__ascii_mbtowc+0x1e>
 800c58e:	7813      	ldrb	r3, [r2, #0]
 800c590:	600b      	str	r3, [r1, #0]
 800c592:	7812      	ldrb	r2, [r2, #0]
 800c594:	1c10      	adds	r0, r2, #0
 800c596:	bf18      	it	ne
 800c598:	2001      	movne	r0, #1
 800c59a:	b002      	add	sp, #8
 800c59c:	4770      	bx	lr
 800c59e:	4610      	mov	r0, r2
 800c5a0:	e7fb      	b.n	800c59a <__ascii_mbtowc+0x16>
 800c5a2:	f06f 0001 	mvn.w	r0, #1
 800c5a6:	e7f8      	b.n	800c59a <__ascii_mbtowc+0x16>

0800c5a8 <memmove>:
 800c5a8:	4288      	cmp	r0, r1
 800c5aa:	b510      	push	{r4, lr}
 800c5ac:	eb01 0302 	add.w	r3, r1, r2
 800c5b0:	d807      	bhi.n	800c5c2 <memmove+0x1a>
 800c5b2:	1e42      	subs	r2, r0, #1
 800c5b4:	4299      	cmp	r1, r3
 800c5b6:	d00a      	beq.n	800c5ce <memmove+0x26>
 800c5b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c5c0:	e7f8      	b.n	800c5b4 <memmove+0xc>
 800c5c2:	4283      	cmp	r3, r0
 800c5c4:	d9f5      	bls.n	800c5b2 <memmove+0xa>
 800c5c6:	1881      	adds	r1, r0, r2
 800c5c8:	1ad2      	subs	r2, r2, r3
 800c5ca:	42d3      	cmn	r3, r2
 800c5cc:	d100      	bne.n	800c5d0 <memmove+0x28>
 800c5ce:	bd10      	pop	{r4, pc}
 800c5d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c5d8:	e7f7      	b.n	800c5ca <memmove+0x22>
	...

0800c5dc <_free_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4605      	mov	r5, r0
 800c5e0:	2900      	cmp	r1, #0
 800c5e2:	d045      	beq.n	800c670 <_free_r+0x94>
 800c5e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5e8:	1f0c      	subs	r4, r1, #4
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	bfb8      	it	lt
 800c5ee:	18e4      	addlt	r4, r4, r3
 800c5f0:	f000 f8df 	bl	800c7b2 <__malloc_lock>
 800c5f4:	4a1f      	ldr	r2, [pc, #124]	; (800c674 <_free_r+0x98>)
 800c5f6:	6813      	ldr	r3, [r2, #0]
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	b933      	cbnz	r3, 800c60a <_free_r+0x2e>
 800c5fc:	6063      	str	r3, [r4, #4]
 800c5fe:	6014      	str	r4, [r2, #0]
 800c600:	4628      	mov	r0, r5
 800c602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c606:	f000 b8d5 	b.w	800c7b4 <__malloc_unlock>
 800c60a:	42a3      	cmp	r3, r4
 800c60c:	d90c      	bls.n	800c628 <_free_r+0x4c>
 800c60e:	6821      	ldr	r1, [r4, #0]
 800c610:	1862      	adds	r2, r4, r1
 800c612:	4293      	cmp	r3, r2
 800c614:	bf04      	itt	eq
 800c616:	681a      	ldreq	r2, [r3, #0]
 800c618:	685b      	ldreq	r3, [r3, #4]
 800c61a:	6063      	str	r3, [r4, #4]
 800c61c:	bf04      	itt	eq
 800c61e:	1852      	addeq	r2, r2, r1
 800c620:	6022      	streq	r2, [r4, #0]
 800c622:	6004      	str	r4, [r0, #0]
 800c624:	e7ec      	b.n	800c600 <_free_r+0x24>
 800c626:	4613      	mov	r3, r2
 800c628:	685a      	ldr	r2, [r3, #4]
 800c62a:	b10a      	cbz	r2, 800c630 <_free_r+0x54>
 800c62c:	42a2      	cmp	r2, r4
 800c62e:	d9fa      	bls.n	800c626 <_free_r+0x4a>
 800c630:	6819      	ldr	r1, [r3, #0]
 800c632:	1858      	adds	r0, r3, r1
 800c634:	42a0      	cmp	r0, r4
 800c636:	d10b      	bne.n	800c650 <_free_r+0x74>
 800c638:	6820      	ldr	r0, [r4, #0]
 800c63a:	4401      	add	r1, r0
 800c63c:	1858      	adds	r0, r3, r1
 800c63e:	4282      	cmp	r2, r0
 800c640:	6019      	str	r1, [r3, #0]
 800c642:	d1dd      	bne.n	800c600 <_free_r+0x24>
 800c644:	6810      	ldr	r0, [r2, #0]
 800c646:	6852      	ldr	r2, [r2, #4]
 800c648:	605a      	str	r2, [r3, #4]
 800c64a:	4401      	add	r1, r0
 800c64c:	6019      	str	r1, [r3, #0]
 800c64e:	e7d7      	b.n	800c600 <_free_r+0x24>
 800c650:	d902      	bls.n	800c658 <_free_r+0x7c>
 800c652:	230c      	movs	r3, #12
 800c654:	602b      	str	r3, [r5, #0]
 800c656:	e7d3      	b.n	800c600 <_free_r+0x24>
 800c658:	6820      	ldr	r0, [r4, #0]
 800c65a:	1821      	adds	r1, r4, r0
 800c65c:	428a      	cmp	r2, r1
 800c65e:	bf04      	itt	eq
 800c660:	6811      	ldreq	r1, [r2, #0]
 800c662:	6852      	ldreq	r2, [r2, #4]
 800c664:	6062      	str	r2, [r4, #4]
 800c666:	bf04      	itt	eq
 800c668:	1809      	addeq	r1, r1, r0
 800c66a:	6021      	streq	r1, [r4, #0]
 800c66c:	605c      	str	r4, [r3, #4]
 800c66e:	e7c7      	b.n	800c600 <_free_r+0x24>
 800c670:	bd38      	pop	{r3, r4, r5, pc}
 800c672:	bf00      	nop
 800c674:	20001224 	.word	0x20001224

0800c678 <_malloc_r>:
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	1ccd      	adds	r5, r1, #3
 800c67c:	f025 0503 	bic.w	r5, r5, #3
 800c680:	3508      	adds	r5, #8
 800c682:	2d0c      	cmp	r5, #12
 800c684:	bf38      	it	cc
 800c686:	250c      	movcc	r5, #12
 800c688:	2d00      	cmp	r5, #0
 800c68a:	4606      	mov	r6, r0
 800c68c:	db01      	blt.n	800c692 <_malloc_r+0x1a>
 800c68e:	42a9      	cmp	r1, r5
 800c690:	d903      	bls.n	800c69a <_malloc_r+0x22>
 800c692:	230c      	movs	r3, #12
 800c694:	6033      	str	r3, [r6, #0]
 800c696:	2000      	movs	r0, #0
 800c698:	bd70      	pop	{r4, r5, r6, pc}
 800c69a:	f000 f88a 	bl	800c7b2 <__malloc_lock>
 800c69e:	4a21      	ldr	r2, [pc, #132]	; (800c724 <_malloc_r+0xac>)
 800c6a0:	6814      	ldr	r4, [r2, #0]
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	b991      	cbnz	r1, 800c6cc <_malloc_r+0x54>
 800c6a6:	4c20      	ldr	r4, [pc, #128]	; (800c728 <_malloc_r+0xb0>)
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	b91b      	cbnz	r3, 800c6b4 <_malloc_r+0x3c>
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	f000 f863 	bl	800c778 <_sbrk_r>
 800c6b2:	6020      	str	r0, [r4, #0]
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f000 f85e 	bl	800c778 <_sbrk_r>
 800c6bc:	1c43      	adds	r3, r0, #1
 800c6be:	d124      	bne.n	800c70a <_malloc_r+0x92>
 800c6c0:	230c      	movs	r3, #12
 800c6c2:	6033      	str	r3, [r6, #0]
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f000 f875 	bl	800c7b4 <__malloc_unlock>
 800c6ca:	e7e4      	b.n	800c696 <_malloc_r+0x1e>
 800c6cc:	680b      	ldr	r3, [r1, #0]
 800c6ce:	1b5b      	subs	r3, r3, r5
 800c6d0:	d418      	bmi.n	800c704 <_malloc_r+0x8c>
 800c6d2:	2b0b      	cmp	r3, #11
 800c6d4:	d90f      	bls.n	800c6f6 <_malloc_r+0x7e>
 800c6d6:	600b      	str	r3, [r1, #0]
 800c6d8:	50cd      	str	r5, [r1, r3]
 800c6da:	18cc      	adds	r4, r1, r3
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f000 f869 	bl	800c7b4 <__malloc_unlock>
 800c6e2:	f104 000b 	add.w	r0, r4, #11
 800c6e6:	1d23      	adds	r3, r4, #4
 800c6e8:	f020 0007 	bic.w	r0, r0, #7
 800c6ec:	1ac3      	subs	r3, r0, r3
 800c6ee:	d0d3      	beq.n	800c698 <_malloc_r+0x20>
 800c6f0:	425a      	negs	r2, r3
 800c6f2:	50e2      	str	r2, [r4, r3]
 800c6f4:	e7d0      	b.n	800c698 <_malloc_r+0x20>
 800c6f6:	428c      	cmp	r4, r1
 800c6f8:	684b      	ldr	r3, [r1, #4]
 800c6fa:	bf16      	itet	ne
 800c6fc:	6063      	strne	r3, [r4, #4]
 800c6fe:	6013      	streq	r3, [r2, #0]
 800c700:	460c      	movne	r4, r1
 800c702:	e7eb      	b.n	800c6dc <_malloc_r+0x64>
 800c704:	460c      	mov	r4, r1
 800c706:	6849      	ldr	r1, [r1, #4]
 800c708:	e7cc      	b.n	800c6a4 <_malloc_r+0x2c>
 800c70a:	1cc4      	adds	r4, r0, #3
 800c70c:	f024 0403 	bic.w	r4, r4, #3
 800c710:	42a0      	cmp	r0, r4
 800c712:	d005      	beq.n	800c720 <_malloc_r+0xa8>
 800c714:	1a21      	subs	r1, r4, r0
 800c716:	4630      	mov	r0, r6
 800c718:	f000 f82e 	bl	800c778 <_sbrk_r>
 800c71c:	3001      	adds	r0, #1
 800c71e:	d0cf      	beq.n	800c6c0 <_malloc_r+0x48>
 800c720:	6025      	str	r5, [r4, #0]
 800c722:	e7db      	b.n	800c6dc <_malloc_r+0x64>
 800c724:	20001224 	.word	0x20001224
 800c728:	20001228 	.word	0x20001228

0800c72c <_realloc_r>:
 800c72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72e:	4607      	mov	r7, r0
 800c730:	4614      	mov	r4, r2
 800c732:	460e      	mov	r6, r1
 800c734:	b921      	cbnz	r1, 800c740 <_realloc_r+0x14>
 800c736:	4611      	mov	r1, r2
 800c738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c73c:	f7ff bf9c 	b.w	800c678 <_malloc_r>
 800c740:	b922      	cbnz	r2, 800c74c <_realloc_r+0x20>
 800c742:	f7ff ff4b 	bl	800c5dc <_free_r>
 800c746:	4625      	mov	r5, r4
 800c748:	4628      	mov	r0, r5
 800c74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c74c:	f000 f833 	bl	800c7b6 <_malloc_usable_size_r>
 800c750:	42a0      	cmp	r0, r4
 800c752:	d20f      	bcs.n	800c774 <_realloc_r+0x48>
 800c754:	4621      	mov	r1, r4
 800c756:	4638      	mov	r0, r7
 800c758:	f7ff ff8e 	bl	800c678 <_malloc_r>
 800c75c:	4605      	mov	r5, r0
 800c75e:	2800      	cmp	r0, #0
 800c760:	d0f2      	beq.n	800c748 <_realloc_r+0x1c>
 800c762:	4631      	mov	r1, r6
 800c764:	4622      	mov	r2, r4
 800c766:	f7fe fedd 	bl	800b524 <memcpy>
 800c76a:	4631      	mov	r1, r6
 800c76c:	4638      	mov	r0, r7
 800c76e:	f7ff ff35 	bl	800c5dc <_free_r>
 800c772:	e7e9      	b.n	800c748 <_realloc_r+0x1c>
 800c774:	4635      	mov	r5, r6
 800c776:	e7e7      	b.n	800c748 <_realloc_r+0x1c>

0800c778 <_sbrk_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4c06      	ldr	r4, [pc, #24]	; (800c794 <_sbrk_r+0x1c>)
 800c77c:	2300      	movs	r3, #0
 800c77e:	4605      	mov	r5, r0
 800c780:	4608      	mov	r0, r1
 800c782:	6023      	str	r3, [r4, #0]
 800c784:	f7f4 fd48 	bl	8001218 <_sbrk>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d102      	bne.n	800c792 <_sbrk_r+0x1a>
 800c78c:	6823      	ldr	r3, [r4, #0]
 800c78e:	b103      	cbz	r3, 800c792 <_sbrk_r+0x1a>
 800c790:	602b      	str	r3, [r5, #0]
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	2000e728 	.word	0x2000e728

0800c798 <__ascii_wctomb>:
 800c798:	b149      	cbz	r1, 800c7ae <__ascii_wctomb+0x16>
 800c79a:	2aff      	cmp	r2, #255	; 0xff
 800c79c:	bf85      	ittet	hi
 800c79e:	238a      	movhi	r3, #138	; 0x8a
 800c7a0:	6003      	strhi	r3, [r0, #0]
 800c7a2:	700a      	strbls	r2, [r1, #0]
 800c7a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c7a8:	bf98      	it	ls
 800c7aa:	2001      	movls	r0, #1
 800c7ac:	4770      	bx	lr
 800c7ae:	4608      	mov	r0, r1
 800c7b0:	4770      	bx	lr

0800c7b2 <__malloc_lock>:
 800c7b2:	4770      	bx	lr

0800c7b4 <__malloc_unlock>:
 800c7b4:	4770      	bx	lr

0800c7b6 <_malloc_usable_size_r>:
 800c7b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7ba:	1f18      	subs	r0, r3, #4
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	bfbc      	itt	lt
 800c7c0:	580b      	ldrlt	r3, [r1, r0]
 800c7c2:	18c0      	addlt	r0, r0, r3
 800c7c4:	4770      	bx	lr
	...

0800c7c8 <_init>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	bf00      	nop
 800c7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ce:	bc08      	pop	{r3}
 800c7d0:	469e      	mov	lr, r3
 800c7d2:	4770      	bx	lr

0800c7d4 <_fini>:
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	bf00      	nop
 800c7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7da:	bc08      	pop	{r3}
 800c7dc:	469e      	mov	lr, r3
 800c7de:	4770      	bx	lr
